<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SMULET&#39;s BLOG</title>
  
  
  <link href="http://simuleite.github.io/atom.xml" rel="self"/>
  
  <link href="http://simuleite.github.io/"/>
  <updated>2025-04-23T12:53:06.389Z</updated>
  <id>http://simuleite.github.io/</id>
  
  <author>
    <name>SIMULEITE</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pandoc使用</title>
    <link href="http://simuleite.github.io/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/pandoc%E4%BD%BF%E7%94%A8/"/>
    <id>http://simuleite.github.io/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/pandoc%E4%BD%BF%E7%94%A8/</id>
    <published>2025-04-22T16:00:00.000Z</published>
    <updated>2025-04-23T12:53:06.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文本格式转换"><a class="markdownIt-Anchor" href="#文本格式转换"></a> 文本格式转换</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pandoc --from markdown --to docx source.md -o dest.docx</span><br><span class="line">pandoc -f markdown source.md -t docx -o dest.docx</span><br><span class="line">pandoc source.md -o dest.docx --ignore-args # 忽略参数</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：为了最佳转换效果，markdown文件每行后都要空行</p></blockquote><h1 id="md2epub"><a class="markdownIt-Anchor" href="#md2epub"></a> md2epub</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首先把所有的md文件列出来</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 递归查找所有 .md 文件（排除 README.md 和 SUMMARY.md）</span></span></span><br><span class="line">find . -name &quot;*.md&quot; ! -name &quot;README.md&quot; ! -name &quot;SUMMARY.md&quot; | sort &gt; filelist.txt</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 然后编辑 `filelist.txt`，确保文件顺序正确（例如按 `SUMMARY.md` 的目录结构排序）。</span></span></span><br><span class="line"></span><br><span class="line">pandoc --standalone --toc \</span><br><span class="line">--metadata title=&quot;MIT6.824 分布式系统&quot; \</span><br><span class="line">--metadata author=&quot;Robert Morris&quot; \</span><br><span class="line">-o output.epub $(cat filelist.txt) </span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：对于gitbook，pandoc可能不能正确处理路径，推荐使用honkit。</p></blockquote><h2 id="honkit"><a class="markdownIt-Anchor" href="#honkit"></a> honkit</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// book.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MIT6.824 分布式系统&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Robert Morris&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;hints&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pluginsConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hints&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fa fa-info-circle&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;warning&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fa fa-exclamation-triangle&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装honkit</span></span><br><span class="line">npm install honkit --save-dev</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要calibre转换</span></span><br><span class="line">ebook-convert --version</span><br><span class="line"></span><br><span class="line">npm init -y</span><br><span class="line">npx honkit epub ./ ./mybook.epub</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文本格式转换&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#文本格式转换&quot;&gt;&lt;/a&gt; 文本格式转换&lt;/h1&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pr</summary>
      
    
    
    
    
    <category term="基本操作" scheme="http://simuleite.github.io/tags/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>ssh使用</title>
    <link href="http://simuleite.github.io/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/ssh%E4%BD%BF%E7%94%A8/"/>
    <id>http://simuleite.github.io/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/ssh%E4%BD%BF%E7%94%A8/</id>
    <published>2025-04-13T16:00:00.000Z</published>
    <updated>2025-04-25T06:34:47.753Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ssh登录"><a class="markdownIt-Anchor" href="#ssh登录"></a> ssh登录</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh &lt;user_name&gt;@&lt;remote_ip&gt; -p &lt;remote_port&gt; -i &lt;your_key&gt;</span><br></pre></td></tr></table></figure><h1 id="ssh端口映射"><a class="markdownIt-Anchor" href="#ssh端口映射"></a> ssh端口映射</h1><p>可以用于不保留端口的情况下，远程连接数据库等。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -N -L &lt;local_port&gt;:localhost:&lt;remote_port&gt; &lt;user_name&gt;@&lt;remote_ip&gt; -p &lt;remote_port&gt; -i &lt;your_key&gt; </span><br></pre></td></tr></table></figure><h2 id="脚本批量映射"><a class="markdownIt-Anchor" href="#脚本批量映射"></a> 脚本批量映射</h2><p>需要注意，Nacos有gRPC，除了8848端口外，9848端口也要一起开放。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Port Mapping</span></span><br><span class="line">PORTS=(</span><br><span class="line">    &quot;ulocalport:localhost:uremoteport&quot;</span><br><span class="line">    # MySQL</span><br><span class="line">    &quot;53306:localhost:3306&quot;</span><br><span class="line">    # Nacos</span><br><span class="line">    &quot;58848:localhost:8848&quot;</span><br><span class="line">    &quot;59848:localhost:9848&quot;</span><br><span class="line">    # Redis</span><br><span class="line">    &quot;56379:localhost:6379&quot;</span><br><span class="line">    # RocketMQ namesrv</span><br><span class="line">    &quot;59876:localhost:9876&quot;</span><br><span class="line">    # RocketMQ broker</span><br><span class="line">    &quot;510911:localhost:10911&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">ARGS=()</span><br><span class="line">for port in &quot;$&#123;PORTS[@]&#125;&quot;; do</span><br><span class="line">    ARGS+=(-L &quot;$port&quot;)</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">ssh -o ServerAliveInterval=60 -N &quot;$&#123;ARGS[@]&#125;&quot; &lt;username&gt;@&lt;remote_ip&gt;</span><br></pre></td></tr></table></figure><h1 id="密钥登录"><a class="markdownIt-Anchor" href="#密钥登录"></a> 密钥登录</h1><ol><li>首先在本地生成一份密钥，然后将公钥上传到remote的<code>~/.ssh/authorized_keys</code></li><li>修改remote<code>/etc/ssh/sshd_config</code></li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新端口</span></span><br><span class="line">Port 22</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用密钥认证</span></span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">禁用密码登录</span></span><br><span class="line">PasswordAuthentication no</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">允许Root登录但禁止密码验证</span></span><br><span class="line">PermitRootLogin prohibit-password</span><br></pre></td></tr></table></figure><ol start="3"><li>重启ssh</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Ubuntu/Debian</span></span><br><span class="line">sudo systemctl restart ssh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CentOS/RHEL</span></span><br><span class="line">sudo systemctl restart sshd</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ssh登录&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ssh登录&quot;&gt;&lt;/a&gt; ssh登录&lt;/h1&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;</summary>
      
    
    
    
    
    <category term="基本操作" scheme="http://simuleite.github.io/tags/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>nginx使用</title>
    <link href="http://simuleite.github.io/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/nginx%E4%BD%BF%E7%94%A8/"/>
    <id>http://simuleite.github.io/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/nginx%E4%BD%BF%E7%94%A8/</id>
    <published>2025-04-13T16:00:00.000Z</published>
    <updated>2025-04-25T14:26:54.474Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新增配置"><a class="markdownIt-Anchor" href="#新增配置"></a> 新增配置</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/nginx/sites-available/yourdomain.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">符号链接</span></span><br><span class="line">sudo ln -s /etc/nginx/sites-available/yourdomain.conf /etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure><h1 id="port2domain"><a class="markdownIt-Anchor" href="#port2domain"></a> port2domain</h1><h2 id="后端服务"><a class="markdownIt-Anchor" href="#后端服务"></a> 后端服务</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name yourdomain.com www.yourdomain.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:9000;  # 项目运行的端口</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 日志配置（可选）</span><br><span class="line">    error_log /var/log/nginx/yourdomain.error.log;</span><br><span class="line">    access_log /var/log/nginx/yourdomain.access.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启用"><a class="markdownIt-Anchor" href="#启用"></a> 启用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nginx -t  # 检查配置是否正确</span><br><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure><h2 id="前端打包文件"><a class="markdownIt-Anchor" href="#前端打包文件"></a> 前端打包文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    root /var/www/railcloud/dist;</span><br><span class="line">    index index.html;</span><br><span class="line">    try_files $uri $uri/ /index.html; # 支持SPA路由</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启用-2"><a class="markdownIt-Anchor" href="#启用-2"></a> 启用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">③ 设置正确权限</span></span><br><span class="line">sudo chown -R www-data:www-data /var/www/railcloud</span><br><span class="line">sudo chmod -R 755 /var/www/railcloud</span><br><span class="line"></span><br><span class="line">sudo nginx -t &amp;&amp; sudo systemctl reload nginx</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;新增配置&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#新增配置&quot;&gt;&lt;/a&gt; 新增配置&lt;/h1&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;spa</summary>
      
    
    
    
    
    <category term="基本操作" scheme="http://simuleite.github.io/tags/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>JUC并发编程</title>
    <link href="http://simuleite.github.io/ComputerScience/%E7%9F%A5%E8%AF%86/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <id>http://simuleite.github.io/ComputerScience/%E7%9F%A5%E8%AF%86/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</id>
    <published>2025-03-21T16:00:00.000Z</published>
    <updated>2025-03-25T12:12:16.682Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java多线程"><a class="markdownIt-Anchor" href="#java多线程"></a> Java多线程</h1><p>回顾：操作系统的<a href="obsidian://open?vault=Obsidian%20Vault&amp;file=ComputerScience%2F%E7%9F%A5%E8%AF%86%2FOS%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">进程</a>概念。进程的问题：上下文切换开销。为了解决这个问题，出现了线程。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> (() -&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    System.out.pirntln(<span class="string">&quot;Sub Thread&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">thread.start();</span><br><span class="line">System.out.println(<span class="string">&quot;Main Thread&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Main Thread # 主线程先输出结果，说明两个线程同时运行！</span><br><span class="line">Sub Thread</span><br></pre></td></tr></table></figure><h2 id="线程优先级"><a class="markdownIt-Anchor" href="#线程优先级"></a> 线程优先级</h2><p>Java使用抢占式调度，有以下三种优先级</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MIN_PRIORITY</span><br><span class="line">MAX_PRIORITY</span><br><span class="line">NOM_PRIORITY</span><br></pre></td></tr></table></figure><h2 id="线程同步"><a class="markdownIt-Anchor" href="#线程同步"></a> 线程同步</h2><p>共享内存会出现缓存一致性问题，因此需要<strong>线程锁</strong>机制保证数据安全性（原子性）。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> <span class="comment">// 悲观锁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span> (Class.class / <span class="built_in">this</span>) &#123; ... &#125; <span class="comment">// 类锁</span></span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">new</span> <span class="title class_">Class</span>() / instanceOfClass) &#123; ... &#125; <span class="comment">// 实例锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure><h1 id="锁"><a class="markdownIt-Anchor" href="#锁"></a> 锁</h1><p><code>synchronized</code>使用的锁存储在Java对象头中。</p><h3 id="重量级锁"><a class="markdownIt-Anchor" href="#重量级锁"></a> 重量级锁</h3><p>JDK6以前，<code>synchronized</code>被称为重量级锁。因为Java的线程是映射在OS原生线程上，上下文切换成本高；直到JDK6以后才优化了锁的实现。<br />简单来说，每个等待锁都会被封装成ObjectWaiter对象，分为三个区域</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">direction: right</span><br><span class="line">Entry Set -&gt; The Owner</span><br><span class="line">The Owner &lt;-&gt; Wait Set</span><br></pre></td></tr></table></figure><p>Entry Set会排队，直到它成为The Owner，享有资源。当The Owner调用<code>wait()</code>方法，就会挂起进入Wait Set，直到<code>wait()</code>所等待的操作完成。<br />但是每个线程占用同步代码块的时间并不长，完全不需要挂起又唤醒。<br />因此，可以使用<strong>自旋锁</strong></p><h3 id="自旋锁"><a class="markdownIt-Anchor" href="#自旋锁"></a> 自旋锁</h3><p>调用<code>wait()</code>，自旋锁并不是被挂起，而是无限循环是否能够获取锁；当等待时间太长，会恢复重量锁机制。<br />JDK6以后，自旋时间是动态变化的。如果某个线程经常自旋失败，它会直接使用重量级锁；反之，则会延长自旋时间。</p><h2 id="轻量级锁"><a class="markdownIt-Anchor" href="#轻量级锁"></a> 轻量级锁</h2><p>JDK6后，为了减少获得和释放锁的消耗，引入了轻量级锁。<br />轻量级锁的设计目标是，在无竞争状态下减少重量级锁带来的性能消耗（切换内核态、线程阻塞引发线程切换）。</p><blockquote><p>如果只有一个线程占用资源，那就不要加锁、解锁。<br />轻量级锁需要向系统申请互斥量。</p></blockquote><h3 id="cas算法"><a class="markdownIt-Anchor" href="#cas算法"></a> CAS算法</h3><p>Compare and Swap<br />CAS算法不是加锁，而是通过比较来判断对象是否已被修改，如果没有直接替换；如果被修改，那么修改失败。</p><p>轻量级锁就是使用CAS算法，如果CAS失败，那么进入重量级锁状态。</p><h2 id="偏向锁"><a class="markdownIt-Anchor" href="#偏向锁"></a> 偏向锁</h2><p>Biased Locking<br /><code>-XX:UserBiasLock</code><br />当只有一个线程反复访问同步代码块，JVM直接让该线程获取锁，避免不必要的不同步操作。<br />根据对象头底层数据结构，如果对象调用过<code>hashCode()</code>通过哈希值来检查一致性，那么对象头就没有空间存放ThreadId了（JVM通过这个id判断是否频繁访问），此时该线程只能使用轻量级锁。</p><h2 id="锁消除和锁粗化"><a class="markdownIt-Anchor" href="#锁消除和锁粗化"></a> 锁消除和锁粗化</h2><p>如果在运行过程中，根本没有出现资源竞争，那就会直接把锁消除掉。<br />如果某个资源频繁地开锁解锁（比如在循环内部<code>synchronized</code>），JVM会把锁的范围放大，避免加锁解锁的开销。</p><h1 id="java-memory-model"><a class="markdownIt-Anchor" href="#java-memory-model"></a> Java Memory Model</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Java Thread 1 &lt;-&gt; Working Memory 1 &lt;-&gt; Save/Load Operation </span><br><span class="line">Java Thread 2 &lt;-&gt; Working Memory 2 &lt;-&gt; Save/Load Operation </span><br><span class="line">Java Thread 3 &lt;-&gt; Working Memory 3 &lt;-&gt; Save/Load Operation </span><br><span class="line">Save/Load Operation &lt;-&gt; Main Memory</span><br></pre></td></tr></table></figure><p>JMM内存模型中有以下规定：</p><ol><li>所有变量存储在主内存</li><li>每条线程有自己的工作内存，不能直接操作主内存</li><li>不同线程间互相隔离，要传递内容，必须通过主内存</li></ol><h1 id="volatile"><a class="markdownIt-Anchor" href="#volatile"></a> volatile</h1><p><code>volatile</code>的最大作用是保证变量<strong>可见性</strong>，即发生修改后强制刷新到主内存中，使其他线程的缓存失效；相当于通知了其他线程要更新变量为最新版本。<br />注意，<code>volatile</code>不能保证原子性。</p><h1 id="lockcondition"><a class="markdownIt-Anchor" href="#lockcondition"></a> Lock&amp;Condition</h1><p>Lock用法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(); <span class="comment">// 可重入锁</span></span><br><span class="line"><span class="type">Runnable</span> <span class="variable">action</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100000</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        i += <span class="number">1</span>; <span class="comment">// 保证同一时刻只有一个线程操作i</span></span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(action).start();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(action).start();</span><br></pre></td></tr></table></figure><p>Condition用法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Condition</span> <span class="variable">cond</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">    ...</span><br><span class="line">    cond.await(); <span class="comment">// 等待</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">    ...</span><br><span class="line">    cond.signal(); <span class="comment">// 唤醒await线程</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(thread1).start();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(thread2).start();</span><br></pre></td></tr></table></figure><h2 id="leetcode-1114-顺序打印123"><a class="markdownIt-Anchor" href="#leetcode-1114-顺序打印123"></a> LeetCode 1114 顺序打印123</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">cond1</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">cond2</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">state</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Foo</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">first</span><span class="params">(Runnable printFirst)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// printFirst.run() outputs &quot;first&quot;. Do not change or remove this line.</span></span><br><span class="line">            printFirst.run();</span><br><span class="line">            state = <span class="number">1</span>;</span><br><span class="line">            cond1.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">second</span><span class="params">(Runnable printSecond)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (state != <span class="number">1</span>) &#123;</span><br><span class="line">                cond1.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// printSecond.run() outputs &quot;second&quot;. Do not change or remove this line.</span></span><br><span class="line">            printSecond.run();</span><br><span class="line">            state = <span class="number">2</span>;</span><br><span class="line">            cond2.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">third</span><span class="params">(Runnable printThird)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (state != <span class="number">2</span>) &#123;</span><br><span class="line">                cond2.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// printThird.run() outputs &quot;third&quot;. Do not change or remove this line.</span></span><br><span class="line">            printThird.run();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="可重入锁"><a class="markdownIt-Anchor" href="#可重入锁"></a> 可重入锁</h2><p>Re-entrant-Lock<br />这种锁可以多次加锁，同时也要多次解锁才算真的解锁了。</p><blockquote><p>可重入锁是一种排他锁，其他线程必须等锁释放了才可以获取到锁。</p></blockquote><h3 id="公平锁与非公平锁"><a class="markdownIt-Anchor" href="#公平锁与非公平锁"></a> 公平锁与非公平锁</h3><ul><li>公平锁：按照申请锁的时间去获得锁，会进入队列排队</li><li>非公平：抢占式获取锁</li></ul><h2 id="读写锁"><a class="markdownIt-Anchor" href="#读写锁"></a> 读写锁</h2><blockquote><p>读写锁在同一时刻，可以让多个线程获取到锁。</p></blockquote><ul><li>读锁：没有线程占用<strong>写锁</strong>的情况下，同一时间可以有多个线程加读锁。</li><li>写锁：没有线程占用<strong>读锁</strong>的情况下，只有一个线程可以加写锁。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Lock</span> <span class="variable">reEntLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLockReadWriteLock</span>();</span><br><span class="line">reEntLock.readLock().lock();</span><br><span class="line">reEntLock.writeLock().lock();</span><br></pre></td></tr></table></figure><h2 id="锁降级-锁升级"><a class="markdownIt-Anchor" href="#锁降级-锁升级"></a> 锁降级、锁升级</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">reEntLock.writeLock().lock();</span><br><span class="line"><span class="comment">// 先加写锁，后加读锁，降级</span></span><br><span class="line">reEntLock.readLock().lock();</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后释放写锁，只留下读锁，锁降级</span></span><br><span class="line">reEntLock.writeLock().unlock();</span><br></pre></td></tr></table></figure><h2 id="aqs实现"><a class="markdownIt-Anchor" href="#aqs实现"></a> AQS实现</h2><p>Abstract Queued Synchronizer<br />在AQS中，一个线程获取锁后，其他线程进入等待队列。<br />等待队列由双向链表实现。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;java多线程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java多线程&quot;&gt;&lt;/a&gt; Java多线程&lt;/h1&gt;
&lt;p&gt;回顾：操作系统的&lt;a href=&quot;obsidian://open?vault=Obsidian%20Vault&amp;a</summary>
      
    
    
    
    
    <category term="知识" scheme="http://simuleite.github.io/tags/%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯 错题本</title>
    <link href="http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/%E9%94%99%E9%A2%98%E6%9C%AC/%E8%93%9D%E6%A1%A5%E6%9D%AF%20%E9%94%99%E9%A2%98%E6%9C%AC/"/>
    <id>http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/%E9%94%99%E9%A2%98%E6%9C%AC/%E8%93%9D%E6%A1%A5%E6%9D%AF%20%E9%94%99%E9%A2%98%E6%9C%AC/</id>
    <published>2025-03-18T16:00:00.000Z</published>
    <updated>2025-03-19T10:48:35.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3513-岛屿个数"><a class="markdownIt-Anchor" href="#3513-岛屿个数"></a> 3513 岛屿个数</h1><p>#外岛数量 #bfs</p><h2 id="杰克船长算法"><a class="markdownIt-Anchor" href="#杰克船长算法"></a> 杰克船长算法</h2><blockquote><p>杰克船长在公海上游荡，每发现一处岛屿，他就会绕着岛走一圈，并把这个岛标记到地图上。</p></blockquote><p>这个问题的解决方法就在这里：我们<strong>一定</strong>要有一片完全连通的公海，只有在公海上遇到岛屿，才标记岛屿数量；绝不踏入内海。</p><p>可是测试用例是这样的：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 5</span><br><span class="line">01111</span><br><span class="line">11001</span><br><span class="line">10101</span><br><span class="line">10001</span><br><span class="line">11111</span><br></pre></td></tr></table></figure><p>这个测试用例，只有<code>(0, 0)</code>是公海，怎么办呢？<br />我们用一圈公海把测试用例包围起来：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">processInput</span><span class="params">(Scanner sc)</span> &#123;</span><br><span class="line">    M = sc.nextInt();</span><br><span class="line">    N = sc.nextInt();</span><br><span class="line">    sc.nextLine();</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">int</span>[M + <span class="number">2</span>][N + <span class="number">2</span>]; <span class="comment">// 注意+2，多一圈&#x27;0&#x27;表示公海</span></span><br><span class="line">    visitedSea = <span class="keyword">new</span> <span class="title class_">boolean</span>[M + <span class="number">2</span>][N + <span class="number">2</span>];</span><br><span class="line">    visitedIsland = <span class="keyword">new</span> <span class="title class_">boolean</span>[M + <span class="number">2</span>][N + <span class="number">2</span>];</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>; x &lt;= M; x += <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">1</span>; y &lt;= N; y += <span class="number">1</span>) &#123;</span><br><span class="line">            map[x][y] = line.charAt(y - <span class="number">1</span>) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>接着就是对最外面一圈公海进行<code>bfs</code>遍历，只有在公海遇到岛屿才上岛：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bfsSea</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    Queue&lt;Point&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    queue.add(<span class="keyword">new</span> <span class="title class_">Point</span>(x, y));</span><br><span class="line">    visitedSea[x][y] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="type">Point</span> <span class="variable">point</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">0</span>; d &lt; <span class="number">8</span>; d += <span class="number">1</span>) &#123; <span class="comment">// 8个方向！</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">nx</span> <span class="operator">=</span> point.x + dx[d];</span><br><span class="line">            <span class="type">int</span> <span class="variable">ny</span> <span class="operator">=</span> point.y + dy[d];</span><br><span class="line">            <span class="keyword">if</span> (!isOutBound(nx, ny)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!visitedSea[nx][ny] &amp;&amp; map[nx][ny] == <span class="number">0</span>) &#123;</span><br><span class="line">                    visitedSea[nx][ny] = <span class="literal">true</span>;</span><br><span class="line">                    queue.add(<span class="keyword">new</span> <span class="title class_">Point</span>(nx, ny));</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!visitedIsland[nx][ny] &amp;&amp; map[nx][ny] == <span class="number">1</span>) &#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                    bfsIsland(nx, ny);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意测试用例的边界情况</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 6</span><br><span class="line">111111</span><br><span class="line">100001</span><br><span class="line">010101</span><br><span class="line">100001</span><br><span class="line">111111</span><br></pre></td></tr></table></figure><p>上面这个测试用例告诉我们：公海可以朝8个方向通行。而岛屿我们只朝4面通行</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bfsIsland</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    Queue&lt;Point&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    queue.add(<span class="keyword">new</span> <span class="title class_">Point</span>(x, y));</span><br><span class="line">    visitedIsland[x][y] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">        <span class="type">Point</span> <span class="variable">point</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">0</span>; d &lt; <span class="number">4</span>; d += <span class="number">1</span>) &#123; <span class="comment">// 4个方向</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">nx</span> <span class="operator">=</span> point.x + dx[d];</span><br><span class="line">            <span class="type">int</span> <span class="variable">ny</span> <span class="operator">=</span> point.y + dy[d];</span><br><span class="line">            <span class="keyword">if</span> (!isOutBound(nx, ny) &amp;&amp; !visitedIsland[nx][ny] &amp;&amp; map[nx][ny] == <span class="number">1</span>) &#123;</span><br><span class="line">                visitedIsland[nx][ny] = <span class="literal">true</span>;</span><br><span class="line">                queue.add(<span class="keyword">new</span> <span class="title class_">Point</span>(nx, ny));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整调用如下：<br />如果WA，可以把访问点全部打印出来，看看是不是代码有漏洞导致没遍历完</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span>[][] map;</span><br><span class="line"><span class="keyword">static</span> <span class="type">boolean</span>[][] visitedSea;</span><br><span class="line"><span class="keyword">static</span> <span class="type">boolean</span>[][] visitedIsland;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> M, N;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> cnt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">solution</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">int</span> <span class="variable">T</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; T; i += <span class="number">1</span>) &#123;</span><br><span class="line">        processInput(sc);</span><br><span class="line">        <span class="comment">// printMap();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 外面一圈都是公海，所以从(0, 0)开始就可以遍历整个公海</span></span><br><span class="line">        bfsSea(<span class="number">0</span>, <span class="number">0</span>); </span><br><span class="line">        ans.add(cnt);</span><br><span class="line">        <span class="comment">// printVisited();</span></span><br><span class="line">    &#125;</span><br><span class="line">    sc.close();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> answer : ans) &#123;</span><br><span class="line">        System.out.println(answer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Point</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上、下、左、右、左上、左下、右上、右下</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span>[] dx = &#123; -<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span>[] dy = &#123; <span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;3513-岛屿个数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#3513-岛屿个数&quot;&gt;&lt;/a&gt; 3513 岛屿个数&lt;/h1&gt;
&lt;p&gt;#外岛数量 #bfs&lt;/p&gt;
&lt;h2 id=&quot;杰克船长算法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#杰克船长算法&quot;&gt;&lt;/a&gt; 杰克船长算法&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;杰克船长在公海上游荡，每发现一处岛屿，他就会绕着岛走一圈，并把这个岛标记到地图上。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个问题的解决方法就在这里：我们&lt;strong&gt;一定&lt;/strong&gt;要有一片完全连通的公海，只有在公海上遇到岛屿，才标记岛屿数量；绝不踏入内海。&lt;/p&gt;
&lt;p&gt;可是测试用例是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;5 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;01111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10001&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11111&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个测试用例，只有&lt;code&gt;(0, 0)&lt;/code&gt;是公海，怎么办呢？&lt;br /&gt;
我们用一圈公海把测试用例包围起来：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;processInput&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Scanner sc)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    M = sc.nextInt();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    N = sc.nextInt();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sc.nextLine();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    map = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;int&lt;/span&gt;[M + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;][N + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;// 注意+2，多一圈&amp;#x27;0&amp;#x27;表示公海&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    visitedSea = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;boolean&lt;/span&gt;[M + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;][N + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    visitedIsland = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;boolean&lt;/span&gt;[M + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;][N + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cnt = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; x &amp;lt;= M; x += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; sc.nextLine();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; y &amp;lt;= N; y += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            map[x][y] = line.charAt(y - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) - &lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="笔记" scheme="http://simuleite.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JVM</title>
    <link href="http://simuleite.github.io/ComputerScience/%E7%9F%A5%E8%AF%86/JVM%E5%8E%9F%E7%90%86/"/>
    <id>http://simuleite.github.io/ComputerScience/%E7%9F%A5%E8%AF%86/JVM%E5%8E%9F%E7%90%86/</id>
    <published>2025-03-01T16:00:00.000Z</published>
    <updated>2025-04-25T14:29:45.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序如何装载"><a class="markdownIt-Anchor" href="#程序如何装载"></a> 程序如何装载</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Main\.java, Minor\.java -&gt; jar包.java Main\.main(): 编译打包</span><br><span class="line">jar包.java Main\.main() -&gt; 验证: 加载</span><br><span class="line">jar包.java Main\.main() -&gt; Minor\.class: 使用</span><br><span class="line">Minor\.class -&gt; JVM: 加载</span><br><span class="line">验证 -&gt; 准备 -&gt; 解析 -&gt; 初始化 -&gt; JVM</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加载：从磁盘加载到内存。（懒加载，用到类才加载，如main方法或new对象）<br />验证：验证字节码是否正确、是否可识别。<br />准备：初始化静态（static，不包括常量）变量、赋初值（默认值）。<br />解析：符号引用 -&gt; 直接引用。静态方法（如main） -&gt; 指向数据所在内存的指针。这是静态链接，在类加载期间完成；而动态链接在程序运行期间完成。<br />初始化：为静态变量赋值，执行静态代码块。</p><h1 id="类加载器"><a class="markdownIt-Anchor" href="#类加载器"></a> 类加载器</h1><p>加载过程由类加载器实现，有几种类加载器：</p><ol><li>引导类加载器（C++）：JRE核心lib的jar类包</li><li>扩展类加载器：JRE拓展lib(ext)jar类包</li><li>应用程序类加载器：ClassPath路径下的类包（自己编写的类）</li><li>其他加载器：加载自定义路径下的类包</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java com\.site\.jvm\.Math\.class -&gt; java\.exe调用底层jvm\.dll创建Java虚拟机 -&gt; 创建引导类加载器实例</span><br><span class="line">创建引导类加载器实例 -&gt; sum\.misc\.Launcher\.getLauncher(): C++调用Java代码，创建JVM启动器实例，这个实例负责创建其他类加载器</span><br><span class="line">sum\.misc\.Launcher\.getLauncher() -&gt; launcher\.getClassLoader(): 获取运行类自己的加载器ClassLoader（AppClassLoader实例）</span><br><span class="line">launcher\.getClassLoader() -&gt; classLoader\.loadClass(&quot;com\.site\.jvm\.Math&quot;):调用loadClass加载即将要运行的类</span><br><span class="line">classLoader\.loadClass(&quot;com\.site\.jvm\.Math&quot;) -&gt; Math\.main(): 加载完成后，JVM执行Math.main()</span><br><span class="line">创建引导类加载器实例 -&gt; Math\.main(): C++发起调用 </span><br><span class="line">Math\.main()-&gt; JVM销毁: Java程序运行结束</span><br></pre></td></tr></table></figure><h1 id="双亲委派机制"><a class="markdownIt-Anchor" href="#双亲委派机制"></a> 双亲委派机制</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">direction: up</span><br><span class="line">应用程序类加载器 -&gt; 拓展类加载器: 向上委托</span><br><span class="line">拓展类加载器 -&gt; 引导类加载器: 向上委托</span><br><span class="line">引导类加载器 -&gt; 拓展类加载器: 父加载器加载失败，由子加载器自己加载</span><br><span class="line">拓展类加载器 -&gt; 应用程序类加载器: 父加载器加载失败，由子加载器自己加载</span><br></pre></td></tr></table></figure><p>pros:</p><ul><li>避免重复加载：下层加载了，上层不会加载；</li><li>沙箱安全机制：可以防止核心API被篡改<br />cons: 上层不能调动下层，层层传递比较繁琐</li></ul><h2 id="打破双亲委派-避免弊端"><a class="markdownIt-Anchor" href="#打破双亲委派-避免弊端"></a> 打破双亲委派 避免弊端</h2><p>通过<code>ContentTextClassLoader</code>反向委托，可以使上层调用你想要用的加载器。</p><h3 id="典型案例-tomcat8"><a class="markdownIt-Anchor" href="#典型案例-tomcat8"></a> 典型案例 Tomcat8</h3><h4 id="tomcat不遵循双亲委派机制自己写一个hashmap类会不会有风险"><a class="markdownIt-Anchor" href="#tomcat不遵循双亲委派机制自己写一个hashmap类会不会有风险"></a> Tomcat不遵循双亲委派机制，自己写一个HashMap类，会不会有风险？</h4><p>Tomcat不遵循双亲委派机制，只是自定义的classloader顺序不同，但是还是需要到顶层请求classloadder</p><h1 id="jvm内存布局"><a class="markdownIt-Anchor" href="#jvm内存布局"></a> JVM内存布局</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grid-rows: 3</span><br><span class="line">cf: 类文件\nClass Files</span><br><span class="line">cf.shape: page</span><br><span class="line">cls: 类加载子系统\nClass Loader Subsystem</span><br><span class="line">rda: 运行时数据区（Runtime Data Area）: &#123;</span><br><span class="line">    方法区（共享）\nMethod Area</span><br><span class="line">    程序计数器\nPC Reg</span><br><span class="line">    本地方法栈\nNative Method Stack</span><br><span class="line">    堆（共享）\nHeap</span><br><span class="line">    虚拟机栈\nJVM Stack</span><br><span class="line">&#125;</span><br><span class="line">ee: 执行引擎\nExecution Engine</span><br><span class="line">nmi: 本地方法接口\nNative Method Interface</span><br><span class="line">nml: 本地方法库\nNative Method Libs</span><br><span class="line"></span><br><span class="line">cf &lt;-&gt; cls</span><br><span class="line">cls &lt;-&gt; rda</span><br><span class="line">rda &lt;-&gt; ee</span><br><span class="line">rda &lt;-&gt; nmi</span><br><span class="line">ee &lt;-&gt; nmi</span><br><span class="line">nmi &lt;-&gt; nml</span><br></pre></td></tr></table></figure><h1 id="垃圾回收"><a class="markdownIt-Anchor" href="#垃圾回收"></a> 垃圾回收</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">direction: right</span><br><span class="line">young: 年轻代: &#123;</span><br><span class="line">    ed: Eden(8)</span><br><span class="line">    s: Survivor区: &#123;</span><br><span class="line">        s0: s0(1)</span><br><span class="line">        s1: s1(1)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">young.ed -&gt; young.s.s0 &lt;-&gt; young.s.s1 -&gt; Old(2/3)</span><br></pre></td></tr></table></figure><p>当Eden区不够放，就会执行Minor GC，将空指针、无用对象回收，并把有用对象放入s0/s1（然后清楚Eden和另外一块survivor区的所有对象），年龄+1；<br />年龄到15时，会把对象放入老年代。<br />但是如果s0/s1放不下Minor GC后存活的对象，会直接放入老年代。<br />老年代满了，会触发Full GC，会暂停所有用户线程（STW， Stop The World）。</p><h1 id="对象创建"><a class="markdownIt-Anchor" href="#对象创建"></a> 对象创建</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start: 类加载检查</span><br><span class="line">cond: 是否已加载类</span><br><span class="line">cond.shape: diamond</span><br><span class="line">yes: 分配内存</span><br><span class="line">yes -&gt; 初始化 -&gt; 设置对象头 -&gt; 执行\&lt;init\&gt;方法</span><br><span class="line">no: 加载类</span><br><span class="line">start -&gt; cond</span><br><span class="line">cond -&gt; no: 否</span><br><span class="line">no -&gt; yes</span><br><span class="line">cond -&gt; yes: 是</span><br></pre></td></tr></table></figure><h2 id="分配内存"><a class="markdownIt-Anchor" href="#分配内存"></a> 分配内存</h2><ol><li>指针碰撞（默认方法）：Java堆中的内存规整分配，没有碎片，那么只需要在最后一个对象的指针后加上一段偏移量（大小）即可完成分配。</li><li>空闲列表：Java堆中内存分配不规整，碎片化。需要维护一张表，记录哪些空间可用。在分配内存时，找到足够大的空间划分给对象实例。</li></ol><blockquote><p>在并发的情况下，可能出现正在给A分配内存，指针未修改，此时又给B分配内存，B内存区与A重合的情况。</p></blockquote><h3 id="并发解决方法"><a class="markdownIt-Anchor" href="#并发解决方法"></a> 并发解决方法</h3><ol><li>CAS（Compare and Swap）：比较交换，虚拟机就采用CAS+失败重试的方法保证原子性。</li><li>TLAB（Thread Local Allocation Buffer）：按照不同线程划分内存区域，每个线程在区域内分配，防止重合。</li></ol><h2 id="object-header-对象头"><a class="markdownIt-Anchor" href="#object-header-对象头"></a> Object Header 对象头</h2><ol><li>Mark Word标记字段：运行时数据哈希值、GC分代年龄、锁状态标志、线程持有锁、偏向线程ID、偏向时间戳，32位4B，64位8B</li></ol><table><thead><tr><th>锁状态</th><th>23bit</th><th>2bit</th><th>4bit</th><th>1bit<br>是否指向偏向锁</th><th>2bit<br>锁标志位</th></tr></thead><tbody><tr><td>无锁态</td><td>对象的-</td><td>-HashCode</td><td>分代年龄</td><td>0</td><td>01</td></tr><tr><td>轻量级锁</td><td>指向-</td><td>-栈中锁-</td><td>-记录的-</td><td>-指针</td><td>00</td></tr><tr><td>重量级锁</td><td>指向-</td><td>-互斥量-</td><td>-（重量级锁）-</td><td>-的指针</td><td>10</td></tr><tr><td>GC标记</td><td>-</td><td>-</td><td>-</td><td>-</td><td>11</td></tr><tr><td>偏向锁</td><td>线程ID</td><td>Epoch</td><td>分代年龄</td><td>1</td><td>01</td></tr></tbody></table><ol start="2"><li>Klass Pointer类型指针：指向类的元数据，8B，压缩后4B</li><li>数组长度：4B</li></ol><h2 id="init-方法"><a class="markdownIt-Anchor" href="#init-方法"></a> &lt;init&gt; 方法</h2><p>执行&lt;init&gt;方法，会将对象按照程序的意愿进行初始化，是真正的属性赋值（不是赋初值0），会执行构造方法。</p><h2 id="对象内存分配"><a class="markdownIt-Anchor" href="#对象内存分配"></a> 对象内存分配</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start -&gt; cond1: new Object()</span><br><span class="line">cond1: 栈内分配？</span><br><span class="line">cond1 -&gt; 栈: Y</span><br><span class="line">栈 -&gt; End: POP</span><br><span class="line">cond1 -&gt; cond2: N</span><br><span class="line">cond2: 大对象？</span><br><span class="line">cond2 -&gt; Old: Y</span><br><span class="line">Old -&gt; End: Full GC</span><br><span class="line">cond2 -&gt; cond3: N</span><br><span class="line">cond3: TLAB？</span><br><span class="line">cond3 -&gt; Eden: Y</span><br><span class="line">cond3 -&gt; Eden: N</span><br><span class="line">condMgc: Minor GC?</span><br><span class="line">Eden -&gt; condMgc</span><br><span class="line">condMgc -&gt; S1: N</span><br><span class="line">S1 -&gt; Age?</span><br><span class="line">Age? -&gt; Old: Y</span><br><span class="line">Age? -&gt; S2: N</span><br><span class="line">S2 -&gt; condMgc</span><br><span class="line">condMgc &lt;-&gt; End: Y</span><br></pre></td></tr></table></figure><h3 id="对象逃逸分析"><a class="markdownIt-Anchor" href="#对象逃逸分析"></a> 对象逃逸分析</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> Object; <span class="comment">// 被其他方法使用，逃逸</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    ...</span><br><span class="line">    businessMapper.insert(obj); <span class="comment">// 生命周期和函数一起结束，非逃逸</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非逃逸对象会分配在栈空间，随着方法结束被释放；而逃逸对象会真正分配在堆上。</p><h2 id="survivor到老年代"><a class="markdownIt-Anchor" href="#survivor到老年代"></a> Survivor到老年代</h2><p>一块Survivor区，一批对象占用&lt;=50%的内存大小。如果一批对象大于这个值，那么大于等于这批对象最大年龄的对象都会被放入老年代。</p><p>因此，如果一秒时间内新对象太多，超出这个Survivor区的生存阈值，就会直接放入老年代，从到导致更频繁的Full GC。解决方法是：1. 要么扩大Eden，让Minor GC间隔更长；2. 要么扩大Survivor，让垃圾对象能被放入，并在下一次GC及时释放，不会被错误地放入老年代。</p><h2 id="full-gc"><a class="markdownIt-Anchor" href="#full-gc"></a> Full GC</h2><p>每次Minor GC，都会判断老年代内存空间是否够Survivor区的对象放入老年代，不够，则触发Full GC，还不够，则OOM<br />当老年代空间不够放，JVM会尽快Full GC（因为即使Minor GC可能也不够放，反而浪费了时间）</p><h2 id="对象内存回收算法"><a class="markdownIt-Anchor" href="#对象内存回收算法"></a> 对象内存回收算法</h2><h3 id="1-引用计数器"><a class="markdownIt-Anchor" href="#1-引用计数器"></a> 1. 引用计数器</h3><p>新增一个引用，计数器加1；一个引用失效，计数器减1。<br />实现简单，但是存在循环引用问题，A&lt;-&gt;B之间互相引用，于是无法回收。</p><h3 id="2-可达性分析"><a class="markdownIt-Anchor" href="#2-可达性分析"></a> 2. 可达性分析</h3><p>以GC Roots对象（线程栈本地对象、静态变量、本地方法栈变量等）作为起点，向下搜索引用对象，找到的对象都标记为非垃圾对象。</p><h2 id="无用类判断"><a class="markdownIt-Anchor" href="#无用类判断"></a> 无用类判断</h2><p>同时满足以下3个条件即为无用类：</p><ol><li>所有实例都已被回收</li><li>该类的ClassLoader已被回收</li><li>该类的java.lang.Class对象没有被引用。<br />一般只有自定义的类加载器会被回收。</li></ol><h1 id="垃圾收集"><a class="markdownIt-Anchor" href="#垃圾收集"></a> 垃圾收集</h1><h2 id="垃圾收集算法"><a class="markdownIt-Anchor" href="#垃圾收集算法"></a> 垃圾收集算法</h2><h3 id="分代收集理论"><a class="markdownIt-Anchor" href="#分代收集理论"></a> 分代收集理论</h3><p>根据对象存活周期的不同，将内存分成几块（在不同的年龄代，用不同的垃圾收集算法）。一般Java堆分为新生代和老年代。<br />例如，新生代几乎99%的对象会被回收，所以简单地标记-复制就可以完成内存整理；而老年代存活几率比较高，而且可能没有额外空间分配，因此需要用标记-清除、标记-整理算法。</p><blockquote><p>标记-复制比标记-清除和标记-整理快10倍以上。</p></blockquote><h3 id="标记-复制算法"><a class="markdownIt-Anchor" href="#标记-复制算法"></a> 标记-复制算法</h3><p>这个算法把内存分为大小相等的两块，每次整理只需要将一端的存活对象标记好，复制到另一端，然后把这一端内存全部清空。因此，使用标记-复制算法，每次都对内存区间的一半进行回收。（内存利用率低，最多只有50%）</p><h3 id="标记-清除算法"><a class="markdownIt-Anchor" href="#标记-清除算法"></a> 标记-清除算法</h3><p>这个算法简单地标记存活对象，然后一次性清除未被标记的对象。算法实现简单，但是也有问题：</p><ol><li>效率低。如果标记的对象太多而且内存不连续，效率不高。</li><li>空间碎片化。只是简单地清除对象而不整理，会产生大量内存碎片，缺少整块内存。</li></ol><h3 id="标记-整理算法"><a class="markdownIt-Anchor" href="#标记-整理算法"></a> 标记-整理算法</h3><p>这个算法标记存活对象，然后让所有存活对象都向内存一端移动。然后清除其余的内存区间，获得整块连续的内存空间。</p><h2 id="垃圾收集器"><a class="markdownIt-Anchor" href="#垃圾收集器"></a> 垃圾收集器</h2><blockquote><p>垃圾收集器是内存回收的具体实现。</p></blockquote><h3 id="1-serial收集器"><a class="markdownIt-Anchor" href="#1-serial收集器"></a> 1 Serial收集器</h3><p>串行收集器是最基础的收集器。它的单线程体现在：</p><ol><li>只用一条垃圾收集线程</li><li>垃圾收集时，Stop The World<br />Serial在新生代<code>-XX:+UserSerialGC</code>使用标记-复制算法，在老年代<code>-XX:+UserSerialOldGC</code>使用标记-整理算法。</li></ol><h3 id="2-parallel-scavenge收集器jdk18默认收集器"><a class="markdownIt-Anchor" href="#2-parallel-scavenge收集器jdk18默认收集器"></a> 2 Parallel Scavenge收集器（JDK1.8默认收集器）</h3><p>并行收集器，实际上就是Serial的多线程版本，回收时同样会Stop The World。默认的收集线程数与CPU核心数量保持一致。<br />并行收集器关注CPU吞吐量，减少用户线程停顿时间。<br />Parallel Scavenge同样在新生代<code>-XX:+UserParallelGC</code>使用标记-复制算法，在老年代<code>-XX:+UserParallelOldGC</code>使用标记-整理算法。</p><h4 id="parnew收集器"><a class="markdownIt-Anchor" href="#parnew收集器"></a> ParNew收集器</h4><p>ParNew收集器<code>-XX:+UseParNewGC</code>和Parallel类似，但是可以与CMS配合使用。</p><h3 id="3-cms收集器"><a class="markdownIt-Anchor" href="#3-cms收集器"></a> 3 CMS收集器</h3><p>CMS（Concurrent Mark Sweep）收集器只适用于老年代，以<strong>最短停顿时间</strong>为目标。是HotSpot JVM第一款并发收集器，可以使垃圾回收与用户线程同时工作。<br />CMS使用的是标记-清除算法（Mark Sweep），运作过程是：</p><ol><li>初始标记：STW，记录GC Roots直接引用的对象。</li><li>并发标记：从GC Roots直接关联对象开始遍历整个对象图，过程中不需要暂停用户线程。因为没有STW，所以过程中已经标记的对象状态会改变。</li><li>重新标记：STW，用三色标记的增量更新算法做重新标记，修正第2步状态改变的对象标记记录。</li><li>并发清理：恢复用户线程，同时开始GC清扫。</li><li>并发重置：重置本次GC的标记数据。<br />CMS主要优点是并发收集、短停顿，然而也有下面几个缺点：</li><li>对CPU资源敏感，会和服务器抢资源。</li><li>无法处理<strong>浮动垃圾</strong>（并发标记、并发清理阶段产生的新垃圾），只能等下一次GC再清理。</li><li>清扫算法，不能腾出整块连续内存，只能得到许多内存碎片。</li><li>执行不确定性。在并发标记、并发清理阶段会出现上一轮垃圾回收还没完成，下一轮又开始的情况。</li></ol><h4 id="并发失败"><a class="markdownIt-Anchor" href="#并发失败"></a> 并发失败</h4><p>在CMS并发标记、并发清理阶段，如果用户线程又实例化了许多新对象，导致老年代触发Full GC，STW，那么这个清理线程实际上就失败了，还是用效率低下的线性收集器收集。</p><h4 id="cms参数"><a class="markdownIt-Anchor" href="#cms参数"></a> CMS参数</h4><p><code>-XX:+UseConcMarkSweepGC</code> 启用CMS（老年代）<br /><code>-XX:ConcGCThreads</code> 并发GC线程数量<br /><code>-XX:+UseCMSCompactAtFullCollection</code> FullGC后碎片整理<br /><code>-XX:CMSFullGCsBeforeCompaction</code> 设置每隔多少次FullGC做一次碎片整理，默认值为0<br /><code>-XX:CMSInitiatingOccupancyFraction</code> 设置老年代FullGC空间占比阈值，默认是92；不设置100是为了避免并发失败启用线性收集器<br /><code>-XX:+UseCMSInitiatingOccupancyOnly</code> 强制使用设定阈值。默认是只在第一次使用设定的阈值，后续动态调整<br /><code>-XX:+CMSScavengeBeforeRemark</code> CMSGC前启动一次MinorGC，降低CMS标记阶段的开销<br /><code>-XX:+CMSParallelInitialMarkEnabled</code> 初始标记阶段使用多线程，缩短STW<br /><code>-XX:+CMSParallelRemarkEnabled</code> 重新标记阶段采用多线程，缩短STW</p><h2 id="三色标记"><a class="markdownIt-Anchor" href="#三色标记"></a> 三色标记</h2><p>黑色：全部引用都扫描过的对象，存活<br />灰色：还没完全扫描的对象<br />白色：未扫描的对象。扫描开始时所有对象为白色；扫描结束后，清理白色对象<br />三色标记可能会产生漏标的问题，对于灰色对象中还没扫描的对象，如果这个对象被已经扫描过的黑色对象引用，而灰色对象的引用又被置null，那么这个应该被扫描和标记的对象就会被漏扫，从而导致错误清理。</p><h3 id="漏标-读写屏障"><a class="markdownIt-Anchor" href="#漏标-读写屏障"></a> 漏标-读写屏障</h3><p>漏标会错误清理，是非常严重的错误，会使用增量更新和原始快照两种方法避免：</p><ul><li>增量更新（IU）：当黑色对象新增白色对象引用时，会把这个新增引用记录下来（这样黑色就变成灰色对象），等并发扫描结束，重新扫描这些黑色对象。</li><li>原始快照（STAB）：当灰色对象删除白色对象的引用时，记录这个引用删除，等并发扫描结束，将这些白色对象直接设置为黑色对象，使这一轮GC不清理这些对象。</li></ul><h4 id="写屏障"><a class="markdownIt-Anchor" href="#写屏障"></a> 写屏障</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">oop_field_store</span><span class="params">(oop* field, oop new_value)</span> &#123;</span><br><span class="line">    pre_write_barrier(field); <span class="comment">// 写屏障，记录旧值（先加入队列，与实际操作异步）</span></span><br><span class="line">    *field = new_value; <span class="comment">// 赋值操作</span></span><br><span class="line">    post_write_barrier(field, value); <span class="comment">// 写屏障，记录新值（入队，异步执行）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CMS使用的是写屏障+增量更新方案<br />G1，Shenandoah使用写屏障+STAB方案<br />ZGC使用读屏障方案</p><h4 id="为什么g1使用stabcms用增量更新"><a class="markdownIt-Anchor" href="#为什么g1使用stabcms用增量更新"></a> 为什么G1使用STAB，CMS用增量更新？</h4><p>不处理，效率更高。有多少被删除的引用会真的被黑色对象引用呢？再做一次深度扫描太浪费了。而G1是为大内存设计的，分了很多区域，与只有一块老年代区域的CMS不同，做深度扫描的成本会高很多。</p><h2 id="记忆集与卡表"><a class="markdownIt-Anchor" href="#记忆集与卡表"></a> 记忆集与卡表</h2><p>在新生代做GC Roots可达性扫描过程中，可能会碰到跨代引用的问题（如被老年代引用）。这时，如果要进入老年代做扫描，效率太低了。<br />因此，在新生代引入记录集（Remember Set）数据结构，记录从非收集区到收集区的指针集合，避免把整个老年代纳入GCRoots扫描范围。</p><p>Hotspot使用一种叫“卡表”（Cardtable）的方式实现记忆集。<br />卡表使用一个字节数组<code>CARD_TABLE[]</code>实现，其中每个元素对应一块特定大小的内存，称为“卡页”。<br />Hotspot使用的卡页大小为<code>2^9 = 512</code>字节。即<code>CARD_TABLE</code>1字节对应512B（0~511）</p><p>具体来说，老年代按卡页被分割成许多个区块。当老年代地址<code>0x0200（2*16^2=512B）</code>区块引用了新生代的对象，<code>CARD_TABLE[] = &#123; 0, 1, ... &#125;</code>，将对应区域标记为dirty。此时，新生代不仅会做GC Roots扫描，还会到老年代对应的地址<code>0x0200</code>扫描引用。</p><p>卡表状态也是用写屏障维护。</p><h2 id="g1收集器"><a class="markdownIt-Anchor" href="#g1收集器"></a> G1收集器</h2><p>使用<code>-XX:+UseG1GC</code>启动G1（Garbage-First）。<br />G1不再使用原来的分代概念，而是将内存分割成大小相等的区域（Region）。JVM最多可以有2048个Region（每块区域大小=堆大小/2048）。<br />G1保留了年轻代、老年代的概念，但是它们都可以随机放在任何一块Region中，而不是物理隔离。<br />默认的年轻代占堆空间的5%，在运行过程中，JVM会给年轻代增加内存，但是年轻代不会超过60%。在年轻代内部，仍然保持8：1：1的比例</p><p>G1的特点是有一个<code>Humongous（极大的）</code>分区，专门存放短期巨型对象（超过region50%就算大对象，如果超过一个region大小，那就跨region存放），而不是直接放入老年代。在FullGC时，会将Humongous区垃圾对象一并回收。</p><h3 id="gc过程"><a class="markdownIt-Anchor" href="#gc过程"></a> GC过程</h3><ol><li>初始标记，STW</li><li>并发标记，和CMS一样</li><li>最终标记：和CMS重新标记一样</li><li>筛选回收：对各个Region的回收价值/成本进行排序，根据用户期望停顿时间<code>-XX:MaxGCPauseMillis，默认200ms</code>制定回收计划。</li></ol><blockquote><p>因为是用户设置的停顿时间，所以G1直接STW并发回收提高效率。</p></blockquote><p>G1主要使用复制算法，将一个region的存活对象放入另一个region中，内存碎片比较少，而且不像CMS需要整理。<br />G1因为内部实现复杂，没用实现并发回收。Shenandoah就实现了这一点，可以看作G1的升级版。<br />G1在后台维护一个优先队列，优先选择允许时间内价值最大（回收空间最多）的Region</p><h3 id="g1垃圾收集分类"><a class="markdownIt-Anchor" href="#g1垃圾收集分类"></a> G1垃圾收集分类</h3><h4 id="younggc"><a class="markdownIt-Anchor" href="#younggc"></a> YoungGC</h4><p>YoungGC会计算Eden区回收所需的时间，接近用户设置的允许时间时，就会触发YoungGC。<br />G1通过动态调整Eden区大小（默认5%）来实现上述算法。</p><h4 id="mixedgc"><a class="markdownIt-Anchor" href="#mixedgc"></a> MixedGC</h4><p>老年代对占有率达到<code>-XX:InitiatingHeapOccupancyPercent，默认45</code>的设定值就会触发，将回收所有Young、部分Old和Humongous区域。<br />G1会优先在老年代做MixedGC，如果复制对象过程中，没有足够的内存，那么会触发FullGC。</p><h4 id="fullgc"><a class="markdownIt-Anchor" href="#fullgc"></a> FullGC</h4><p>STW，线性标记-压缩，整个过程比较耗时；Shenandoah优化这个过程为多线程。</p><h2 id="zgc"><a class="markdownIt-Anchor" href="#zgc"></a> ZGC</h2><p>ZGC的设计目标：</p><ol><li>TB级别的堆内存</li><li>GC Pause &lt;= 10ms</li><li>下一代GC特征基础</li><li>最多15%的吞吐量下降<br />ZGC源自Azul的C4，最大优势是，停顿时间与堆大小<strong>无关</strong>，而是都在10ms内。</li></ol><p>NUMA架构，识别每块CPU使用的内存区域，防止竞争和锁的效率问题</p><h3 id="zgc运作过程"><a class="markdownIt-Anchor" href="#zgc运作过程"></a> ZGC运作过程</h3><ol><li>并发标记：ZGC不把标记放在对象内部，而是在颜色指针上标记</li><li>并发预备重分配：得出本次收集需要清理的Region并放入重分配集Relocation Set，与G1不同，ZGC每次都会扫描所有Region，这样就不需要维护卡表</li><li>并发重分配：会将Relocation Set的存活对象复制到新的Region上。由于会发生数据不同步问题。因此维护一个转发表（Forward Table），并通过读屏障来确保数据一致，ZGC称之为Self-Healing。</li><li>并发重映射：修正整个堆指向重分配集中，旧对象的所有引用</li></ol><h3 id="读屏障懒更新"><a class="markdownIt-Anchor" href="#读屏障懒更新"></a> 读屏障（懒更新）</h3><p>由于ZGC使用颜色指针，而复制对象的过程中会发生数据不同步问题。<br />所以，ZGC直到原来的指针被读取（即此时没有发生写入），才会真正地修正指针引用，成为读屏障。</p><h3 id="转发表"><a class="markdownIt-Anchor" href="#转发表"></a> 转发表</h3><p>读屏障怎么知道地址有没有变化？在并发重分配阶段维护转发表，就知道对象去向。</p><h3 id="颜色指针"><a class="markdownIt-Anchor" href="#颜色指针"></a> 颜色指针</h3><p>以前的垃圾回收器GC信息保存在对象头，而ZGC将这些信息保存在指针上。<br />每个对象有一个64位的指针，其中</p><ul><li>42位用于寻址（4^42=4T）</li><li>1位Marked1标识</li><li>1位Marked0标识</li><li>1位Remapped标识，设置后，说明对象没有指向RelocationSet</li><li>1位Finalizable标识，与并发引用处理有关，表示这个对象只能通过finalizer访问</li><li>18位未使用</li></ul><h4 id="为什么2个mark"><a class="markdownIt-Anchor" href="#为什么2个mark"></a> 为什么2个Mark</h4><p>每个GC周期开始，会交替使用标记位（01、10互换），使上次GC标记失效。</p><h4 id="颜色指针3大优势"><a class="markdownIt-Anchor" href="#颜色指针3大优势"></a> 颜色指针3大优势</h4><ol><li>一旦某个Region的存活对象被移走，这个Region能够立刻被释放和重用。</li><li>颜色指针大幅减少内存屏障使用数量，ZGC使用读屏障</li><li>颜色指针有强大扩展性（18位）</li></ol><h3 id="zgc问题"><a class="markdownIt-Anchor" href="#zgc问题"></a> ZGC问题</h3><p>最大的问题也是浮动垃圾，ZGC的停顿时间是10ms，但是实际上执行回收时间远大于这个值，在此期间会产生许许多多不能处理的新垃圾对象，只能等待下一次回收。</p><p>解决方法只有增加堆容量，让程序有更多喘息时间（未分代情况下）。<br />分代ZGC区分新生代和老年代（代际隔离），对新生代的回收更频繁（分代回收）。</p><h1 id="jvm调优工具"><a class="markdownIt-Anchor" href="#jvm调优工具"></a> JVM调优工具</h1><h2 id="jmap"><a class="markdownIt-Anchor" href="#jmap"></a> Jmap</h2><p><code>jmap</code>可以查看内存信息、实例个数以及所占内存大小</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">jps</span></span><br><span class="line">&lt;PID&gt; &lt;Name&gt;</span><br><span class="line">22928 Jps</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">jmap -histo &lt;PID&gt; &gt; jlog</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看堆情况</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">jmap -heap &lt;PID&gt;</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导出快照Dump</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">jmap -dump:format=b,file=&lt;FileName&gt; &lt;PID&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jstack"><a class="markdownIt-Anchor" href="#jstack"></a> Jstack</h2><p><code>jstack</code>可以查找死锁</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">jstack &lt;PID&gt;</span></span><br><span class="line">...</span><br><span class="line">java.lang.Thread.State: BLOCKED</span><br><span class="line">...</span><br><span class="line">Found &lt;amount&gt; Java-level deadlock:</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="jvisualvm"><a class="markdownIt-Anchor" href="#jvisualvm"></a> Jvisualvm</h2><p><code>jvisualvm</code>可视化监管java进程，点击<code>进程dump</code>与<code>jstack</code>一致</p><h2 id="jstat"><a class="markdownIt-Anchor" href="#jstat"></a> Jstat</h2><p><code>jstat [-option] [vmid] [gap(ms)] [query_times]</code>可以查看堆内存各部分使用情况，例如查看GC：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">jstat -gc &lt;PID&gt;</span></span><br></pre></td></tr></table></figure><p>结合不同参数可以具体查看各代的情况。</p><h2 id="linux工具"><a class="markdownIt-Anchor" href="#linux工具"></a> Linux工具</h2><h3 id="top"><a class="markdownIt-Anchor" href="#top"></a> top</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">top -p &lt;PID&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">H查看所有线程情况，配合jstack找到线程ID，即可找到对应代码</span></span><br></pre></td></tr></table></figure><h1 id="实用脚本"><a class="markdownIt-Anchor" href="#实用脚本"></a> 实用脚本</h1><h2 id="jstat-2"><a class="markdownIt-Anchor" href="#jstat-2"></a> Jstat</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查是否提供了PID参数</span></span><br><span class="line">if [ -z &quot;$1&quot; ]; then</span><br><span class="line">  echo &quot;Usage: $0 &lt;PID&gt;&quot;</span><br><span class="line">  echo &quot;Example: $0 5527&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">PID=$1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查进程是否存在</span></span><br><span class="line">if ! ps -p $PID &gt; /dev/null; then</span><br><span class="line">  echo &quot;Error: Process with PID $PID not found&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行jstat并格式化输出</span></span><br><span class="line">jstat -gc $PID | awk &#x27;</span><br><span class="line">function progress(pct) &#123;</span><br><span class="line">    bars = int(pct/5)</span><br><span class="line">    return sprintf(&quot;[%-20s]&quot;, substr(&quot;||||||||||||||||||||&quot;, 1, bars))</span><br><span class="line">&#125;</span><br><span class="line">NR==2 &#123;</span><br><span class="line">    printf &quot;Eden:  %5.1fMB %s %5.1fMB (%d%%)\n&quot;, $6/1024, progress(100*$6/$5), $5/1024, 100*$6/$5</span><br><span class="line">    printf &quot;Old:   %5.1fMB %s %5.1fMB (%d%%)\n&quot;, $8/1024, progress(100*$8/$7), $7/1024, 100*$8/$7</span><br><span class="line">    printf &quot;Meta:  %5.1fMB %s %5.1fMB (%d%%)\n&quot;, $10/1024, progress(100*$10/$9), $9/1024, 100*$10/$9</span><br><span class="line">    printf &quot;GC Stats: YGC=%d(%.3fs) FGC=%d(%.3fs) Total=%.3fs\n&quot;, $13, $14, $15, $16, $19</span><br><span class="line">&#125;&#x27;</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><h3 id="输出"><a class="markdownIt-Anchor" href="#输出"></a> 输出</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Eden:   32.0MB [|||||||||||||       ]  47.0MB (68%)</span><br><span class="line">Old:    18.8MB [||||||||||||        ]  30.0MB (62%)</span><br><span class="line">Meta:   52.5MB [||||||||||||||||||| ]  52.9MB (99%)</span><br><span class="line">GC Stats: YGC=18(0.166s) FGC=0(0.000s) Total=0.174s</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;程序如何装载&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#程序如何装载&quot;&gt;&lt;/a&gt; 程序如何装载&lt;/h1&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;</summary>
      
    
    
    
    
    <category term="知识" scheme="http://simuleite.github.io/tags/%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>洛谷 错题本</title>
    <link href="http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/%E9%94%99%E9%A2%98%E6%9C%AC/%E6%B4%9B%E8%B0%B7%20%E9%94%99%E9%A2%98%E6%9C%AC/"/>
    <id>http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/%E9%94%99%E9%A2%98%E6%9C%AC/%E6%B4%9B%E8%B0%B7%20%E9%94%99%E9%A2%98%E6%9C%AC/</id>
    <published>2025-02-28T16:00:00.000Z</published>
    <updated>2025-03-12T01:32:05.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="p1004-noip-2000-提高组-方格取数"><a class="markdownIt-Anchor" href="#p1004-noip-2000-提高组-方格取数"></a> P1004 [NOIP 2000 提高组] 方格取数</h1><p>#走两次dp<br />如果只走一次，这题是非常经典的DP。但是要走两次，就变得非常有难度。<br />首先，可以简单地推广：要走两次，dp就存四个下标：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][][][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[N][N][N][N];</span><br></pre></td></tr></table></figure><p>我们只需要遍历所有可能，并且比较四种走法（同下、同右、一下一右），取最大值就可以了。<br />注意，一个数只能取一次，需要一个判断防止重复取数。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">1</span>; i1 &lt; N; i1 += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">1</span>; i2 &lt; N; i2 += <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j1</span> <span class="operator">=</span> <span class="number">1</span>; j1 &lt; N; j1 += <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j2</span> <span class="operator">=</span> <span class="number">1</span>; j2 &lt; N; j2 += <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">step</span> <span class="operator">=</span> map[i1][j1];</span><br><span class="line">                <span class="keyword">if</span> (i2 != i1 &amp;&amp; j2 != j1) step += map[i2][j2];</span><br><span class="line">                </span><br><span class="line">                dp[i1][j1][i2][j2] = </span><br><span class="line">                    Math.max(dp[i1-<span class="number">1</span>][j1][i2-<span class="number">1</span>][j2], </span><br><span class="line">                    Math.max(dp[i1-<span class="number">1</span>][j1][i2][j2-<span class="number">1</span>], </span><br><span class="line">                    Math.max(dp[i1][j1-<span class="number">1</span>][i2-<span class="number">1</span>][j2], </span><br><span class="line">                             dp[i1][j1-<span class="number">1</span>][i2][j2-<span class="number">1</span>]))) + step;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(dp[N-<span class="number">1</span>][N-<span class="number">1</span>][N-<span class="number">1</span>][N-<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>当然，4个循环时间复杂度太高了。我们可以用一个<code>k == i1 + j1 == i2 + j2</code>来减少一重循环。<br />这个k利用得很巧妙，因为每次要么向下走，要么向右走，所以<code>k-1 == i-1 + j == i + j-1</code>，全程使用<code>k-1</code>就能代表所有情况。</p><span id="more"></span><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>*N][N][N];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt; <span class="number">2</span>*N; k += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">1</span>; i1 &lt; N; i1 += <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">1</span>; i2 &lt; N; i2 += <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">j1</span> <span class="operator">=</span> k - i1, j2 = k - i2;</span><br><span class="line">            <span class="keyword">if</span> (j1 &lt; <span class="number">0</span> || j1 &gt;= N || j2 &lt; <span class="number">0</span> || j2 &gt;= N) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">step</span> <span class="operator">=</span> map[i1][j1];</span><br><span class="line">            <span class="keyword">if</span> (i1 != i2) step += map[i2][j2];</span><br><span class="line">            dp[k][i1][i2] = Math.max(dp[k-<span class="number">1</span>][i1-<span class="number">1</span>][i2-<span class="number">1</span>], Math.max(dp[k-<span class="number">1</span>][i1][i2],</span><br><span class="line">            Math.max(dp[k-<span class="number">1</span>][i1-<span class="number">1</span>][i2], dp[k-<span class="number">1</span>][i1][i2-<span class="number">1</span>]))) + step;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(dp[<span class="number">2</span> * (N-<span class="number">1</span>)][N-<span class="number">1</span>][N-<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><h1 id="b3637-最长上升子序列"><a class="markdownIt-Anchor" href="#b3637-最长上升子序列"></a> B3637 最长上升子序列</h1><p>#单维dp</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i += <span class="number">1</span>) &#123;</span><br><span class="line">    dp[i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j += <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt; nums[j]) &#123;</span><br><span class="line">            dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dp[i] &gt; max) &#123;</span><br><span class="line">        max = dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(max);</span><br></pre></td></tr></table></figure><p>如何理解<code>dp[i] = Math.max(dp[i], dp[j] + 1)</code>?<br />这里dp[j]存储的是以j为结尾的LIS，而+1代表的是dp[i]自己。<br />我们通过计算出前面的所有dp[j]，最后只需要看对于每个nums[j]，它是否小于nums[i]，小于，就添加一个就可以了。</p><h1 id="p2782-友好城市"><a class="markdownIt-Anchor" href="#p2782-友好城市"></a> P2782 友好城市</h1><p>#贪心 #LIS最优解法<br />友好城市可以转换为一个LIS问题：将北岸城市按照坐标顺序排序后，求北岸城市对应南岸城市的坐标LIS（南岸城市坐标必须递增，不递增就是交叉造桥），这就是不交叉情况下能够建筑的最多桥梁数。<br />传统的DP写法需要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的时间复杂度，会超时；下面介绍LIS的最优解法：贪心+二分。</p><h2 id="贪心法求解lis"><a class="markdownIt-Anchor" href="#贪心法求解lis"></a> 贪心法求解LIS</h2><p>对于一个序列sequence，遍历sequence[i]，维护一个上升序列数组，使其每个元素尽可能地小（这样整个序列就尽可能长），遍历结束，这个数组就是LIS。<br />具体的算法实现是：对于每个sequence[i]，查找它在贪心上升序列greedy中应该插入的位置（维持序列上升的位置），并替换原来的更大的元素，如果不存在更大的元素，在末尾追加该元素。最后，greedy就是LIS，greedy的长度就是能够建筑合法桥梁的最大值。</p><h3 id="优化dp思路交换状态与状态值"><a class="markdownIt-Anchor" href="#优化dp思路交换状态与状态值"></a> 优化DP思路：交换状态与状态值</h3><p>原来的DP是这样表示：<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mtext> 表示 末尾元素 为</mtext><mi>c</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>e</mi><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mtext>的元素的</mtext><mi>L</mi><mi>I</mi><mi>S</mi><mtext> 长度</mtext></mrow><annotation encoding="application/x-tex">dp[i]\text{ 表示\ 末尾元素\ 为}cities[i]\text{的元素的}LIS\text{ 长度}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">表示</span><span class="mord"> </span><span class="mord cjk_fallback">末尾元素</span><span class="mord"> </span><span class="mord cjk_fallback">为</span></span><span class="mord mathdefault">c</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mord text"><span class="mord cjk_fallback">的元素的</span></span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">长度</span></span></span></span></span><br />交换“末尾元素”与“长度”后：<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>r</mi><mi>e</mi><mi>e</mi><mi>d</mi><mi>y</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mtext> 表示 长度 为</mtext><mi>i</mi><mo>+</mo><mn>1</mn><mtext>的</mtext><mi>I</mi><mi>S</mi><mtext>的 末尾元素 的最小值</mtext></mrow><annotation encoding="application/x-tex">greedy[i]\text{ 表示\ 长度\ 为}i+1\text{的}IS\text{的\ 末尾元素\ 的最小值}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">表示</span><span class="mord"> </span><span class="mord cjk_fallback">长度</span><span class="mord"> </span><span class="mord cjk_fallback">为</span></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord text"><span class="mord cjk_fallback">的</span></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord text"><span class="mord cjk_fallback">的</span><span class="mord"> </span><span class="mord cjk_fallback">末尾元素</span><span class="mord"> </span><span class="mord cjk_fallback">的最小值</span></span></span></span></span></p><p>代码实现如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ... <span class="comment">// 处理输入，按北岸城市坐标cities[i].source排序</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span>[] greedy = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i += <span class="number">1</span>) &#123; <span class="comment">// 顺序遍历排好序的北岸城市坐标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> cities[i].target; <span class="comment">// 北岸城市对应的友好城市坐标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> lowerBound(greedy, len-<span class="number">1</span>, target); <span class="comment">// 注意要传入len-1</span></span><br><span class="line">        <span class="keyword">if</span> (index == len) &#123; <span class="comment">// 追加元素</span></span><br><span class="line">            greedy[len++] = target;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 找到递增序列位置，替换</span></span><br><span class="line">            greedy[index] = target;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 寻找target应该插入到递增序列nums的下标位置</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">lowerBound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> end, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> start + (end - start) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt;= target) &#123;</span><br><span class="line">            end = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            start = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="p1091-noip-2004-提高组-合唱队形"><a class="markdownIt-Anchor" href="#p1091-noip-2004-提高组-合唱队形"></a> P1091 [NOIP 2004 提高组] 合唱队形</h1><p>#双向LIS<br />合唱队形可以看成求两边LIS之和的最大值。此时总人数减去LIS之和的最大值，就是最少出列队员数。<br />这里要注意当前index+1的值才是正确的长度。len标记的是数组的总长度，但是index会动态更新寻找更小值并做替换。当index找到最小值时，后面的更大值是在index以前的，不属于当前下标i+1结尾的IS长度。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] gdUp = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line"><span class="type">int</span> <span class="variable">lenUp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span>[] lenUps = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i += <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> lowerBound(gdUp, lenUp-<span class="number">1</span>, members[i]);</span><br><span class="line">  <span class="keyword">if</span> (index == lenUp) &#123;</span><br><span class="line">    gdUp[lenUp++] = members[i];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    gdUp[index] = members[i];</span><br><span class="line">  &#125;</span><br><span class="line">  lenUps[i] = index + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] gdDown = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line"><span class="type">int</span> <span class="variable">lenDown</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span>[] lenDowns = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> N-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i -= <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> lowerBound(gdDown, lenDown-<span class="number">1</span>, members[i]);</span><br><span class="line">  <span class="keyword">if</span> (index == lenDown) &#123;</span><br><span class="line">    gdDown[lenDown++] = members[i];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    gdDown[index] = members[i];</span><br><span class="line">  &#125;</span><br><span class="line">  lenDowns[i] = index + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i += <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (lenUps[i] + lenDowns[i] - <span class="number">1</span> &gt; max) &#123;</span><br><span class="line">    max = lenUps[i] + lenDowns[i] - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(N - max);</span><br></pre></td></tr></table></figure><h1 id="p1020-noip-1999-提高组-导弹拦截"><a class="markdownIt-Anchor" href="#p1020-noip-1999-提高组-导弹拦截"></a> P1020 [NOIP 1999 提高组] 导弹拦截</h1><p>#最长不递增子序列<br />做这题各种WA让我非常confusing，仔细研究后发现是我没有理解导弹拦截的规则（可以拦截相等高度！），真所谓“失之毫厘，谬以千里”。原理其实很简单：</p><ol><li>导弹系统可以拦截的最多导弹数，是一个<strong>最长不严格递减子序列</strong>（导弹高度不需要严格递减、可以相等），在题目要求的数据规模下，必须使用贪心+二分解法，转化为逆序求<strong>最长不严格递增子序列</strong>。</li><li>最少需要多少导弹拦截系统？一个系统只能拦截比前一个导弹高度更低的导弹，那么每出现一个比之前所有高度都更高的导弹，之前的系统都不能拦截。这就是LIS！</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ... <span class="comment">// 处理输入</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span>[] gdDown = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxMissile</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> N-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i -= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> upperBound(gdDown, maxMissile - <span class="number">1</span>, nums[i]);</span><br><span class="line">        <span class="keyword">if</span> (index == maxMissile) &#123;</span><br><span class="line">            gdDown[maxMissile++] = nums[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            gdDown[index] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span>[] gdUp = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">    <span class="type">int</span> <span class="variable">numSystems</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i += <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> lowerBound(gdUp, numSystems - <span class="number">1</span>, nums[i]);</span><br><span class="line">        <span class="keyword">if</span> (index == numSystems) &#123;</span><br><span class="line">            gdUp[numSystems++] = nums[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            gdUp[index] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    System.out.println(maxMissile + <span class="string">&quot;\n&quot;</span> + numSystems);       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到第一个大于该数（不管有没有找到，允许gd里的数重复）的位置</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">upperBound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> end, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> start + (end - start) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &lt;= target) &#123; </span><br><span class="line">            start = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            end = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到第一个大于（没找到，在这个位置插入）/等于（找到，在这个位置替换）该数的位置</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">lowerBound</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> end, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> start + (end - start) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] &gt;= target) &#123;</span><br><span class="line">            end = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            start = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="p1086-noip-2004-普及组-花生采摘"><a class="markdownIt-Anchor" href="#p1086-noip-2004-普及组-花生采摘"></a> P1086 [NOIP 2004 普及组] 花生采摘</h1><p>#模拟<br />这题是简单的模拟题，按照题目要求完成即可。不过有一些小细节需要注意：</p><ul><li>数组下标从0开始，但是坐标不能为0，否则会计算错误。<br />代码使用了TreeMap来自动排序所有的花生植株，所以看起来不太直观。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ... <span class="comment">// 处理输入</span></span><br><span class="line">    </span><br><span class="line">    findPeanut(map, M, N);</span><br><span class="line">    <span class="comment">// TreeMap升序排序，取当前Max要从最后取</span></span><br><span class="line">    Map.Entry&lt;Integer, Point&gt; pre = peanuts.pollLastEntry(); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">2</span> * pre.getValue().x + <span class="number">1</span> &gt; K) &#123; <span class="comment">// 往返路程 + 采摘的总消耗</span></span><br><span class="line">        System.out.println(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    K -= pre.getValue().x + <span class="number">1</span>; <span class="comment">// 进入花生田 + 摘花生，不返回的总消耗</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> pre.getKey();</span><br><span class="line">    peanuts.remove(pre.getKey());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        Map.Entry&lt;Integer, Point&gt; cur = peanuts.pollLastEntry();</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">null</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cost</span> <span class="operator">=</span> Math.abs(pre.getValue().x - cur.getValue().x) +</span><br><span class="line">                   Math.abs(pre.getValue().y - cur.getValue().y) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (cost + cur.getValue().x &gt; K) &#123; <span class="comment">// 摘花生 + 返回路边的总消耗</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        K -= cost;</span><br><span class="line">        cnt += cur.getKey();</span><br><span class="line">        peanuts.remove(pre.getKey());</span><br><span class="line">        pre = cur;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(cnt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录每株花生的数量和坐标</span></span><br><span class="line"><span class="keyword">static</span> TreeMap&lt;Integer, Point&gt; peanuts = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">findPeanut</span><span class="params">(<span class="type">int</span>[][] map, <span class="type">int</span> M, <span class="type">int</span> N)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; M; i += <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; N; j += <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                peanuts.put(map[i][j], <span class="keyword">new</span> <span class="title class_">Point</span>(i + <span class="number">1</span>, j + <span class="number">1</span>)); <span class="comment">// 注意，坐标从1开始</span></span><br><span class="line">                map[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;p1004-noip-2000-提高组-方格取数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#p1004-noip-2000-提高组-方格取数&quot;&gt;&lt;/a&gt; P1004 [NOIP 2000 提高组] 方格取数&lt;/h1&gt;
&lt;p&gt;#走两次dp&lt;br /&gt;
如果只走一次，这题是非常经典的DP。但是要走两次，就变得非常有难度。&lt;br /&gt;
首先，可以简单地推广：要走两次，dp就存四个下标：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;[][][][] dp = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;int&lt;/span&gt;[N][N][N][N];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们只需要遍历所有可能，并且比较四种走法（同下、同右、一下一右），取最大值就可以了。&lt;br /&gt;
注意，一个数只能取一次，需要一个判断防止重复取数。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;i1&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i1 &amp;lt; N; i1 += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;i2&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i2 &amp;lt; N; i2 += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;j1&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j1 &amp;lt; N; j1 += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;j2&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j2 &amp;lt; N; j2 += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; map[i1][j1];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (i2 != i1 &amp;amp;&amp;amp; j2 != j1) step += map[i2][j2];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dp[i1][j1][i2][j2] = &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    Math.max(dp[i1-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j1][i2-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j2], &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    Math.max(dp[i1-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j1][i2][j2-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    Math.max(dp[i1][j1-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][i2-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][j2], &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             dp[i1][j1-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][i2][j2-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]))) + step;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(dp[N-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][N-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][N-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][N-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然，4个循环时间复杂度太高了。我们可以用一个&lt;code&gt;k == i1 + j1 == i2 + j2&lt;/code&gt;来减少一重循环。&lt;br /&gt;
这个k利用得很巧妙，因为每次要么向下走，要么向右走，所以&lt;code&gt;k-1 == i-1 + j == i + j-1&lt;/code&gt;，全程使用&lt;code&gt;k-1&lt;/code&gt;就能代表所有情况。&lt;/p&gt;</summary>
    
    
    
    
    <category term="笔记" scheme="http://simuleite.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>InnoDB原理</title>
    <link href="http://simuleite.github.io/ComputerScience/%E7%9F%A5%E8%AF%86/InnoDB%E5%8E%9F%E7%90%86/"/>
    <id>http://simuleite.github.io/ComputerScience/%E7%9F%A5%E8%AF%86/InnoDB%E5%8E%9F%E7%90%86/</id>
    <published>2025-02-24T16:00:00.000Z</published>
    <updated>2025-03-15T05:48:10.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql体系结构"><a class="markdownIt-Anchor" href="#mysql体系结构"></a> Mysql体系结构</h1><h2 id="db与instance"><a class="markdownIt-Anchor" href="#db与instance"></a> DB与Instance</h2><p>DB：数据库可以是ibd文件、放在内存的文件，是物理操作系统文件或其他形式文件类型的集合。<br />Instance：Mysql数据库由后台线程及一个共享内存区组成。</p><blockquote><p>数据库实例才是真正操作数据库文件的。在集群情况下，可能存在一个DB被多个Instance使用的情况。</p></blockquote><p>Mysql被设计为单进程多线程，在OS上的表现是一个进程。</p><h2 id="插件式表存储引擎"><a class="markdownIt-Anchor" href="#插件式表存储引擎"></a> 插件式表存储引擎</h2><blockquote><p>存储引擎基于表，而不是DB。</p></blockquote><blockquote><p>存储引擎对开发人员透明。</p></blockquote><h1 id="索引原理"><a class="markdownIt-Anchor" href="#索引原理"></a> 索引原理</h1><p>MySQL使用的是B+树作为索引的数据结构</p><blockquote><p>B树是一个分支内<strong>按顺序</strong>存放多个节点数据的数据结构；而B+树在此基础上，在分支内只存储索引，只在叶子节点存储数据（这样每一层可以存储更多索引，减少层数），并且在叶节点之间用指针互相连接，提高访问效率。</p></blockquote><span id="more"></span><h2 id="引擎"><a class="markdownIt-Anchor" href="#引擎"></a> 引擎</h2><p>MyISAM，B+树存储的Data就是数据的地址（非聚集索引、稀疏索引）<br />InnoDB，直接存储数据（聚集索引）</p><h2 id="为什么innodb建议每张表必须建立主键并用自增整型"><a class="markdownIt-Anchor" href="#为什么innodb建议每张表必须建立主键并用自增整型"></a> 为什么InnoDB建议每张表必须建立主键，并用自增整型？</h2><p>ibd必须用B+树索引，而整型是天然的索引；否则ibd会自己维护一个唯一id行（隐藏的主键）。<br />因此UUID比较效率会比整型更低。<br />而自增则根本避免了重复，并且只在一端变化，已经有的数据无需做修改，减少了维持有序的成本。<br />如果不自增，而是随机添加，那么新增的数很可能会触发分裂、平衡，造成冗余索引。</p><h2 id="b树如何支持范围查询"><a class="markdownIt-Anchor" href="#b树如何支持范围查询"></a> B+树如何支持范围查询</h2><p>Hash结构的索引，不支持范围查询；而B+树只用找到两端，然后顺着指针拿到所有节点就好了（叶节点是双指针连接的，并且有序）。</p><h2 id="联合主键索引为什么是最左前缀原则"><a class="markdownIt-Anchor" href="#联合主键索引为什么是最左前缀原则"></a> 联合主键索引，为什么是最左前缀原则？</h2><p>最左前缀原则：不能跳过左边的索引，必须从最左边索引开始，逐步增加条件。<br />因为联合主键索引底层的B+树就是按照主键顺序排序的，会从左到右进行比较；如果跳过了左边的主键，那就找不到了，因为第二个主键不一定是排好序的！。<br />首先按照第一个主键排序，然后按照第二个主键排序。在同一个主键内，二级主键是有序的，但是跳出这个圈，就是无序的。</p><h2 id="索引优化原则"><a class="markdownIt-Anchor" href="#索引优化原则"></a> 索引优化原则</h2><h3 id="explain性能分析"><a class="markdownIt-Anchor" href="#explain性能分析"></a> explain性能分析</h3><p><code>explain extended</code>: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>o</mi><mi>w</mi><mi>s</mi><mo>∗</mo><mi>f</mi><mi>i</mi><mi>l</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi mathvariant="normal">/</mi><mn>100</mn></mrow><annotation encoding="application/x-tex">rows * filtered/100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mord">/</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span>可以估算出将要和explain中前一个表达式进行连接的行数。<br /><code>show warning</code>: Mysql的提示信息，可能会帮你优化。</p><h4 id="字段解释"><a class="markdownIt-Anchor" href="#字段解释"></a> 字段解释</h4><p>select_type</p><ul><li>Primary 最外层的select。</li><li>Subquery 不在from语句中，包含在select中的子查询。</li><li>Derived 包含在from语句中的子查询。派生表。<br />id</li><li>表示执行顺序，顺序越靠后优先级越高<br /><strong>type</strong><br />效率优先级 system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</li></ul><blockquote><p>一般来说range是及格线，最好达到ref</p></blockquote><ul><li>NULL mysql通过优化和底层原理，不访问表或索引就取到值。如求最小值，通过B+树直接拿到。</li><li>system, const system是const的特例，const表示常量查询。表只有一行，为const查询。只有一条元组匹配，为system查询。</li><li>eq_ref 主键关联查询，表有几行。</li><li>ref 使用非主键（不唯一）索引，表有很多行。使用普通索引或唯一索引的部分前缀。</li><li>range 范围查找，包括比较符号。</li><li>index 无查询条件，全选。扫描全索引就能拿到结果，一般扫描二级索引（Mysql优先选择同等条件下更小的索引）。</li><li>ALL 全表扫描。扫描聚集索引，比index更大</li></ul><h3 id="sql语句优化"><a class="markdownIt-Anchor" href="#sql语句优化"></a> sql语句优化</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 不走索引</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> your_table <span class="keyword">where</span> a <span class="operator">&gt;</span> cond1 <span class="keyword">and</span> b <span class="operator">=</span> cond2 <span class="keyword">and</span> c <span class="operator">=</span> cond3</span><br><span class="line"><span class="comment">-- 走索引</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> your_table <span class="keyword">where</span> a <span class="operator">=</span> cond1 <span class="keyword">and</span> b <span class="operator">&gt;</span> cond2 <span class="keyword">and</span> c <span class="operator">=</span> cond3</span><br></pre></td></tr></table></figure><p>第一张表，第一个索引就开始范围查询，sql会认为范围太大，<strong>不走索引</strong>。<br />第二张表，第二个索引才开始范围查询，在合理范围内，会走索引。</p><ul><li>尽量使用覆盖索引，这样会走索引</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 推荐，其中name和age都有索引</span></span><br><span class="line"><span class="keyword">select</span> name, age <span class="keyword">from</span> your_table <span class="keyword">where</span> <span class="keyword">condition</span></span><br><span class="line"><span class="comment">-- 不推荐</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> your_table <span class="keyword">where</span> <span class="keyword">condition</span></span><br></pre></td></tr></table></figure><ul><li>少用or或in；不对索引用函数；不让索引发生隐式转换</li><li>减少搜索范围；范围过大，mysql会认为全表扫描更快，从而不走索引</li><li><code>force index(your_index)</code> 强制索引（注意，不一定更快！可能更多回表）</li><li>试试用<code>like</code>代替范围查询</li></ul><h2 id="缓存"><a class="markdownIt-Anchor" href="#缓存"></a> 缓存</h2><p>Mysql8以后移除了缓存。</p><blockquote><p>Mysql缓存的本质是KV Map。然而，对于高频修改的数据，Map缓存下来的是<strong>脏数据</strong>，因此不实用。</p></blockquote><h2 id="索引下推"><a class="markdownIt-Anchor" href="#索引下推"></a> 索引下推</h2><p>在mysql5.6以后，每过滤一条数据，同时还会比较其他条件，只回表符合条件的主键，减少数据量。<br /><code>like</code>基本上会走索引下推。</p><h2 id="trace工具"><a class="markdownIt-Anchor" href="#trace工具"></a> Trace工具</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 开启trace</span></span><br><span class="line"><span class="keyword">set</span> session optmizer_trace<span class="operator">=</span>&quot;enabled=on&quot;,end_markers_in_json<span class="operator">=</span><span class="keyword">on</span>;</span><br><span class="line"><span class="comment">-- 执行你的语句后，执行下面语句查询TRACE即为sql执行情况</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> information_schema.OPTIMIZER_TRACE;</span><br></pre></td></tr></table></figure><p><code>rows_estimation: cost</code>就是扫描成本。<br /><code>considered_execution_plans</code>是最终考虑的执行计划。</p><h2 id="order-by与group-by"><a class="markdownIt-Anchor" href="#order-by与group-by"></a> Order by与Group by</h2><p><code>key_len</code>分析走了什么索引：</p><ul><li>int 4字节</li><li>char(n) n字节</li><li>varchar(n) n+2字节，其中2字节用于存储长度</li><li>null 允许为null，会再用1字节存储<br />根据上面知识，可以根据索引类型反推使用了什么索引。</li></ul><p><code>order by</code>不会走索引。只看前面<code>where</code>语句用到的索引</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * where a = cond1 and c = cond3 order by b;</span><br><span class="line">select * where a = cond1 orderby c;</span><br></pre></td></tr></table></figure><p><code>c</code>对应第三个索引。上面两条语句，第一条只走a索引，用b、c索引排序；第二条用a索引，不用索引排序，而是文件排序。因为跳过了索引b，c是无序存储的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * where a = cond1 order by b, c;</span><br><span class="line">select * where a = cond1 order by c, b;</span><br><span class="line">select * where a = cond1 and b = cond order by b, c;</span><br><span class="line">select * where a = cond1 order by b asc, c desc;</span><br></pre></td></tr></table></figure><p>上面第一条语句走a索引，会用bc排序，因为底层存储是有序的。第二条不走索引，因为顺序不对！<br />第三条会用ab索引，因为b条件是个常量，不需要orderby c，被mysql优化了；<br />第四条走a索引，不用bc排序，因为底层是升序排序，而desc变成降序了。（mysql8以后有降序索引支持）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * where a in (cond1.1, cond1.2) order by b, c;</span><br></pre></td></tr></table></figure><p>不走索引，filesort，因为多个查询条件，在需要orderby排序时相当于范围索引。</p><h2 id="orderby总结"><a class="markdownIt-Anchor" href="#orderby总结"></a> orderby总结</h2><ol><li>orderby按照最左前缀，或orderby与where子句结合且满足最左前缀时，会走索引。<br />groupby与orderby基本相同，实质也是先排序后分组。可以使用<code>order by null</code>禁用排序，加速过程。</li></ol><h2 id="filesort原理"><a class="markdownIt-Anchor" href="#filesort原理"></a> FileSort原理</h2><ul><li>单路排序：一次性取出满足条件的所有字段，然后在sort buffer中进行排序；trace可以看到sort_mode: &lt;sort_key, additional_key&gt;。</li><li>双路排序：回表排序，只用排序字段和行id在sort buffer排序，trace可以看到&lt;sort_key, rowid&gt;。占用空间会少一点，因为只用到了特定的排序字段。因为没有取出所有数据，排序完成后，还要拿id回表查询所有数据。</li></ul><p>Mysql有系统变量<code>max_length_for_sort_data</code>，默认1024Byte。如果大于它，用双路排序模式；小于则使用单路排序可以。</p><h2 id="如何设计索引"><a class="markdownIt-Anchor" href="#如何设计索引"></a> 如何设计索引</h2><h3 id="什么时候建索引"><a class="markdownIt-Anchor" href="#什么时候建索引"></a> 什么时候建索引</h3><p>不是建完表就想当然地建索引，而是后来根据用户使用最频繁的字段建索引。<br />在主体功能开发完后，把使用到的所有sql语句拉出来分析，然后建索引。</p><h3 id="联合索引尽量覆盖条件"><a class="markdownIt-Anchor" href="#联合索引尽量覆盖条件"></a> 联合索引尽量覆盖条件</h3><p>少建单值索引（联合索引可以过滤更多字段，而且sql一般只会用1个索引），设计1-3个联合索引包含sql的where、orderby、groupby字段，索引顺序满足sql语句的最左前缀原则。<br />对于unique，确保无重复的字段，可以建单值索引。</p><h3 id="小基字段不建索引"><a class="markdownIt-Anchor" href="#小基字段不建索引"></a> 小基字段不建索引</h3><p>例如枚举字段，一共就几个不同的值，建了索引，范围太大，还是需要全表扫描。</p><h3 id="长字符串用前缀索引"><a class="markdownIt-Anchor" href="#长字符串用前缀索引"></a> 长字符串用前缀索引</h3><p>尽量对占用空间小的列设计索引，如tinyint，也不占存储空间；<br />对于varchar(255)这样的字段，可以将每个值的前20个字符放在索引树中，如<code>KEY index(name(20), age)</code>。<br />但是注意，前缀索引只在where有效（而且需要回表），对于orderby、groupby还是要重新排序的。</p><h3 id="优先满足where而不是orderby"><a class="markdownIt-Anchor" href="#优先满足where而不是orderby"></a> 优先满足where，而不是orderby</h3><p>大多数情况我们会用where筛选出少量数据，然后再排序；这样效率更高。</p><h3 id="在控台识别慢sql针对性做索引优化"><a class="markdownIt-Anchor" href="#在控台识别慢sql针对性做索引优化"></a> 在控台识别慢sql，针对性做索引优化</h3><p>根据mysql慢查询日志（要手动设置，会影响性能），<code>long_query_time</code>默认是10秒钟</p><h3 id="范围查找放最后"><a class="markdownIt-Anchor" href="#范围查找放最后"></a> 范围查找放最后</h3><p>不放最后，那很多情况下索引不满足有序条件</p><h3 id="根据设计的索引反向优化sql"><a class="markdownIt-Anchor" href="#根据设计的索引反向优化sql"></a> 根据设计的索引反向优化sql</h3><p>比如有索引<code>province, city, sex, hobby, age</code><br />age索引不一定能用到，因为sex和hobby会过滤一批。但是我们可以把sex和hobby手动写sql为全选，这样就能走到age。注意，<strong>必须是基数小的情况才可以这么做</strong>。不过一般生产环境数据量都很大，这么做值得。<br />在比如统计最近一周的活跃用户，但是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from your_table where province = cond and sex in (&#x27;female&#x27;, &#x27;male&#x27;) and age &gt;= x and age &lt;= y and login_time &gt;= time</span><br></pre></td></tr></table></figure><p>这里login_time用不了索引。<br />可以设计一个标志，7天内是否登录，然后将这个标志作为索引字段，放age前面。<br />再根据其他高频场景建立辅助索引。</p><h3 id="读多写少可以多建索引写多就要少建"><a class="markdownIt-Anchor" href="#读多写少可以多建索引写多就要少建"></a> 读多写少可以多建索引，写多就要少建</h3><h2 id="分页索引优化"><a class="markdownIt-Anchor" href="#分页索引优化"></a> 分页索引优化</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> your_table limit <span class="number">90000</span>, <span class="number">5</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> your_table <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">90000</span> limit <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>第一条语句实际上会从1顺序找到90000，然后把前面的数据删除，所以会出现翻页到后面越来越慢的情况。<br />第二条语句就能利用索引。但是前提是主键必须是自增而且连续的，例如中间被删除断号了那就不行。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> your_table <span class="keyword">as</span> t <span class="keyword">inner</span> <span class="keyword">join</span> (<span class="keyword">select</span> id <span class="keyword">from</span> your_table <span class="keyword">order</span> <span class="keyword">by</span> name limit <span class="number">90000</span>, <span class="number">5</span>) <span class="keyword">as</span> tc <span class="keyword">on</span> t.id <span class="operator">=</span> tc.id</span><br></pre></td></tr></table></figure><ul><li>覆盖索引再回表：利用覆盖索引找出一个小的结果集，再回表，会尽可能地利用索引。</li></ul><h2 id="join表关联查询优化"><a class="markdownIt-Anchor" href="#join表关联查询优化"></a> Join表关联查询优化</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">inner</span> <span class="keyword">join</span> t2 <span class="keyword">on</span> t1.id <span class="operator">=</span> t2.id</span><br></pre></td></tr></table></figure><h3 id="nlj算法有索引"><a class="markdownIt-Anchor" href="#nlj算法有索引"></a> NLJ算法（有索引）</h3><p>Nested-Loop Join<br />一次一行地循环从驱动表中读取行，根据关联字段从被驱动表中取出满足条件的行，然后取合集。（磁盘扫描）<br />由于使用了索引，不需要全表扫描，扫描量较少。</p><ul><li>inner join：Mysql会自动优化，将更小的表作为驱动表，扫描更少的行数完成任务</li><li>left join：左表为驱动表</li><li>right join：右表为驱动表</li></ul><p>Extra没有出现<code>Using join buffer</code>一般就是使用NLJ算法，<strong>如果使用的条件没有建立索引，使用NLJ性能较低，mysql会选择使用BNL算法</strong>。</p><h3 id="bnl算法无索引"><a class="markdownIt-Anchor" href="#bnl算法无索引"></a> BNL算法（无索引）</h3><p>Block Nested-Loop Join<br />将驱动表的数据全部放入<code>join buffer</code>（这块空间在内存里面），然后将被驱动表每一行拿出来与<code>join buffer</code>比对。<br />这个过程中，两张表都会做全表扫描（磁盘扫描），然后在<code>join buffer</code>（内存）中比对；如果驱动表太大，要放2次，那么被驱动表也会被全表扫描2次！</p><p>比较上面两种算法，使用到join关联查询时，最好走索引。<br />尽量<strong>小表驱动大表</strong>，可以用<code>straight_join</code>中指定驱动表（只适用于inner join）；注意这里说的“小表”，是根据条件过滤出来数据量更少的表</p><h2 id="in与exist"><a class="markdownIt-Anchor" href="#in与exist"></a> in与exist</h2><blockquote><p>小表驱动大表</p></blockquote><h3 id="in子句内的查询会先执行"><a class="markdownIt-Anchor" href="#in子句内的查询会先执行"></a> in子句内的查询会先执行。</h3><p>当B表数据量小于A表，in优于exist。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> A <span class="keyword">where</span> if <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> B) </span><br><span class="line"><span class="comment">-- 先执行B表查询</span></span><br><span class="line"><span class="comment">-- 相当于</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">select</span> id <span class="keyword">from</span> B) &#123;</span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> A <span class="keyword">where</span> A.id <span class="operator">=</span> B.id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尽量避免in操作，把in的范围控制在1000以内。</p><h3 id="exists外层的语句会先执行"><a class="markdownIt-Anchor" href="#exists外层的语句会先执行"></a> exists外层的语句会先执行</h3><p>当A表数据量小于B表，exists优于in。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> A <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> B <span class="keyword">where</span> B.id <span class="operator">=</span> A.id)</span><br><span class="line"><span class="comment">-- 先执行A表查询</span></span><br><span class="line"><span class="comment">-- 相当于</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">select</span> id <span class="keyword">from</span> A) &#123;</span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> B <span class="keyword">where</span> B.id <span class="operator">=</span> A.id</span><br></pre></td></tr></table></figure><p>exists子查询有时候可以用join来代替。</p><h2 id="count"><a class="markdownIt-Anchor" href="#count"></a> count</h2><p>统计数据量：count(*)效率更高（有专门优化，而且会统计null行），其他方法有索引的、索引小的更快</p><h2 id="什么时候分库分表"><a class="markdownIt-Anchor" href="#什么时候分库分表"></a> 什么时候分库分表</h2><p>单表行数超过500万行/单表容量超过2GB</p><h2 id="索引规约"><a class="markdownIt-Anchor" href="#索引规约"></a> 索引规约</h2><ol><li>唯一特性字段，在数据库层面就用唯一索引，根本避免脏数据。</li><li>超过3张表不要用join；需要用到join，数据类型严格一致；多表查询，关联字段要有索引。（用Java做，Java集群可以提高性能，而MySQL不容易拓展）</li><li>varchar索引只建立20长度就可以了。</li><li>搜索，严禁左模糊、全模糊，如果需要可以调用搜索引擎（ES）</li></ol><h1 id="事务和锁"><a class="markdownIt-Anchor" href="#事务和锁"></a> 事务和锁</h1><h2 id="并发事务处理的问题"><a class="markdownIt-Anchor" href="#并发事务处理的问题"></a> 并发事务处理的问题</h2><ul><li>更新丢失：多个事务选择同一行，并基于最初始的值更新该行。最后的更新会覆盖之前的更新。</li><li>脏读：一个事务正在修改一条记录，此时另一个事务读取了未提交、未更新的数据。</li><li>不可重读：一个事务内部的相同查询语句在不同时刻读出的结果不一致（数据被改变/删除）。</li><li>幻读：一个事务按相同查询条件重新读取以前检索过的数据，却发现其他事务插入了新的符合条件的数据。</li></ul><h2 id="隔离级别"><a class="markdownIt-Anchor" href="#隔离级别"></a> 隔离级别</h2><p>通过设置隔离级别，可以避免上述问题</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交</td><td></td><td></td><td></td></tr><tr><td>读已提交</td><td>x</td><td></td><td></td></tr><tr><td>可重复读</td><td>x</td><td>x</td><td></td></tr><tr><td>可串行化</td><td>x</td><td>x</td><td>x</td></tr></tbody></table><p>然而隔离级别越高，对性能影响越大；实际上隔离就是使事务串行化，而不是并发。<br />mysql默认开启可重复读。此时，一个事务，从数据库读取的数据始终一致（实际值会变，只是select使用历史旧版本），但是更新值时不会出错（使用实际值，insert、update、delete使用当前版本）。使用了MVCC机制。<strong>然而，当我们在Java中使用这个读出来的历史版本计算，就会出问题</strong>.<br />在可串行化级别中，select语句会加写锁。</p><h2 id="锁"><a class="markdownIt-Anchor" href="#锁"></a> 锁</h2><ul><li>乐观锁：使用版本号比对（性能较好）</li><li>悲观锁<ul><li>读锁（Shared）：读操作可以同时进行不受影响</li><li>写锁（eXclusive）：当前写操作未完成，会阻断其他写锁、读锁</li></ul></li><li>表锁：锁住整张表，一般用于整表数据迁移，并发程度最低。</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">lock <span class="keyword">table</span> your_table read, your_table2 write;</span><br><span class="line"><span class="comment">-- 显示为1即加了锁</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">open</span> tables;</span><br><span class="line">unlock tables;</span><br></pre></td></tr></table></figure><ul><li>行锁：只锁一行数据，开销大；加锁慢，会出现死锁；并发程度高。</li></ul><h2 id="间隙锁-某些情况下解决幻读问题"><a class="markdownIt-Anchor" href="#间隙锁-某些情况下解决幻读问题"></a> 间隙锁 某些情况下解决幻读问题</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># id # name</span><br><span class="line">    <span class="number">1</span> name1</span><br><span class="line">    <span class="number">2</span> name2</span><br><span class="line">    <span class="number">10</span> name3</span><br><span class="line">    <span class="number">20</span> name4</span><br><span class="line"><span class="comment">-- 有(2, 10), (10, 20), (20, inf)三个区间</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;your_name&#x27;</span> whre id <span class="operator">&gt;</span> <span class="number">8</span> <span class="keyword">and</span> id <span class="operator">&lt;</span> <span class="number">18</span></span><br><span class="line"><span class="comment">-- (8-18)，覆盖了(2,10), (10, 20)两个区间，(2, 20)区间都会上写锁</span></span><br></pre></td></tr></table></figure><p>间隙锁只有在可重复读级别下才生效。</p><h2 id="临键锁"><a class="markdownIt-Anchor" href="#临键锁"></a> 临键锁</h2><p>临键锁（Next-key Locks）是行锁与间隙锁的结合。</p><h2 id="行锁分析"><a class="markdownIt-Anchor" href="#行锁分析"></a> 行锁分析</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> status <span class="keyword">like</span> <span class="string">&#x27;innodb_row_lock%&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><code>lock_time_avg</code>：平均等待时长</li><li><code>lock_waits</code>：等待次数</li><li><code>lock_time</code>：等待总时长</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看事务</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> INFORMATION_SCHEMA INNODB_TRX;</span><br><span class="line"><span class="comment">-- 释放锁</span></span><br><span class="line">kill <span class="operator">&lt;</span>trx_mysql_thread_id<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看锁</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> INFORMATION_SCHEMA INNODB_LOCKS;</span><br><span class="line"><span class="comment">-- 查看锁等待</span></span><br><span class="line">                                 INNODB_LOCK_WAITS;</span><br></pre></td></tr></table></figure><h2 id="锁优化总结"><a class="markdownIt-Anchor" href="#锁优化总结"></a> 锁优化总结</h2><ul><li>尽量让数据检索通过索引完成，避免行锁升级为表锁。</li><li>合理设计索引，缩小锁的范围</li><li>减少检索范围，避免间隙锁</li><li>控制事务大小，减少锁定资源量和时长，设计事务加锁的sql尽量放到最后执行</li><li>尽可能第级别事务隔离</li></ul><h1 id="mvcc"><a class="markdownIt-Anchor" href="#mvcc"></a> MVCC</h1><p>Multi-Version Concurrency Control多版本并发控制<br />Mysql读已提交和可重复读两个隔离级别实现了MVCC</p><h2 id="undo日志"><a class="markdownIt-Anchor" href="#undo日志"></a> undo日志</h2><p>一行数据被多个事务依次修改，每个日志修改成功，都会保留undo日志，用指针表串联</p><ul><li>事务id：只有第一条<strong>修改</strong>语句被执行，才会真正分配事务id（select不会）</li></ul><h2 id="read-view"><a class="markdownIt-Anchor" href="#read-view"></a> read-view</h2><p>事务开启后，执行任何查询sql时会生成当前事务一致性视图readview，这个值在事务结束前不会变化。<br />readview由<strong>未提交的事务id数组</strong>与<strong>已创建</strong>的最大事务id组成。</p><blockquote><p>事务里任何sql查询结果都需要从对应版本链最新数据开始，逐条与read-review做比对</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Trac10: </span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">update</span> col1 xxxx <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">Trac20:</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">update</span> col2 yyyy <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">Trac30:</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">update</span> name thename <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line">Trac(temp): <span class="comment">-- 只有update语句才会分配id</span></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="comment">-- 查询结果为thename </span></span><br><span class="line"><span class="comment">-- read-view: [10, 20]未提交id, 30已创建最大id</span></span><br><span class="line"><span class="comment">-- 此时，10前的id，都是已提交事务；20后的id，都是未提交事务；30后的事务，还没开始</span></span><br><span class="line"><span class="comment">-- 注意，已提交的事务30，不一定小于20</span></span><br><span class="line">Trac10:</span><br><span class="line"><span class="keyword">update</span> name namenew <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">Trac(temp):</span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="comment">-- 查询结果还是为thename，Trac10不可见</span></span><br><span class="line">Trac10:</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line">Trac(temp):</span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="comment">-- 查询结果为thename！因为read-review保持不变</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>已提交事务</th><th>未提交+已提交事务</th><th>未开始</th></tr></thead><tbody><tr><td>10之前</td><td>min_id-max_id</td><td>30之后</td></tr></tbody></table><p>版本链比对规则：</p><ol><li>行事务trx_id &lt; min_id（已提交），可见</li><li>trx_id &gt; max_id（未开始），不可见</li><li>trx_id在数组中（未提交），不可见。</li><li>trx_id = max_id或不属于数组（已提交），可见。</li></ol><p>读已提交，和可重复读的read-view的区别：<br />读已提交：每次查询都会生成最新的read-view，每次都取最新数据。</p><h1 id="mysql执行过程"><a class="markdownIt-Anchor" href="#mysql执行过程"></a> Mysql执行过程</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sql语句.update t set name=&quot;new_name&quot; where id = 1 -&gt; server层.连接器</span><br><span class="line">server层: &#123;</span><br><span class="line">    连接器 -&gt; 分析器 -&gt; 优化器 -&gt; 执行器</span><br><span class="line">    连接器 -&gt; 查询缓存</span><br><span class="line">    binlog文件</span><br><span class="line">&#125;</span><br><span class="line">server层.执行器 -&gt; InnoDB存储引擎</span><br><span class="line">InnoDB存储引擎 :&#123;</span><br><span class="line">    Buffer Pool缓存池</span><br><span class="line">    Redo Log Buffer</span><br><span class="line">    undo日志文件</span><br><span class="line">    redo日志文件</span><br><span class="line">&#125;</span><br><span class="line">ibd磁盘文件.page.name=old_name -&gt; InnoDB存储引擎.Buffer Pool缓存池: 1. 加载缓存数据（id为1的记录所在的page数据）</span><br><span class="line">InnoDB存储引擎.Buffer Pool缓存池 -&gt; InnoDB存储引擎.undo日志文件: 2. 写入更新前数据的旧值，便于回滚</span><br><span class="line">server层.执行器 -&gt; InnoDB存储引擎.Buffer Pool缓存池: 3. 更新内存数据old_name为new_name</span><br><span class="line">server层.执行器 -&gt; InnoDB存储引擎.Redo Log Buffer: 4. 写redo日志</span><br><span class="line">InnoDB存储引擎.Redo Log Buffer -&gt; InnoDB存储引擎.redo日志文件.name=new_name: 5. 准备提交事务，redo日志写入磁盘</span><br><span class="line">server层.执行器 -&gt; server层.binlog文件: 6. 准备提交事务，binlog日志写入磁盘</span><br><span class="line">server层.binlog文件 -&gt; InnoDB存储引擎.redo日志文件: 7. 写入commit标记到redo日志文件（保证redo与binlog数据一致），标志事务完成</span><br><span class="line">InnoDB存储引擎.Buffer Pool缓存池 -&gt; ibd磁盘文件: 通过IO线程，统一以page为单位写入磁盘</span><br></pre></td></tr></table></figure><p>这一套机制保证了读写性能：首先通过顺序IO（利用缓存局部性，性能高）将语句操作写入磁盘的日志文件，最后再通过IO线程通过随机IO，将数据以页为单位写入磁盘ibd。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;mysql体系结构&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#mysql体系结构&quot;&gt;&lt;/a&gt; Mysql体系结构&lt;/h1&gt;
&lt;h2 id=&quot;db与instance&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#db与instance&quot;&gt;&lt;/a&gt; DB与Instance&lt;/h2&gt;
&lt;p&gt;DB：数据库可以是ibd文件、放在内存的文件，是物理操作系统文件或其他形式文件类型的集合。&lt;br /&gt;
Instance：Mysql数据库由后台线程及一个共享内存区组成。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;数据库实例才是真正操作数据库文件的。在集群情况下，可能存在一个DB被多个Instance使用的情况。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Mysql被设计为单进程多线程，在OS上的表现是一个进程。&lt;/p&gt;
&lt;h2 id=&quot;插件式表存储引擎&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#插件式表存储引擎&quot;&gt;&lt;/a&gt; 插件式表存储引擎&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;存储引擎基于表，而不是DB。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;存储引擎对开发人员透明。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;索引原理&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#索引原理&quot;&gt;&lt;/a&gt; 索引原理&lt;/h1&gt;
&lt;p&gt;MySQL使用的是B+树作为索引的数据结构&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;B树是一个分支内&lt;strong&gt;按顺序&lt;/strong&gt;存放多个节点数据的数据结构；而B+树在此基础上，在分支内只存储索引，只在叶子节点存储数据（这样每一层可以存储更多索引，减少层数），并且在叶节点之间用指针互相连接，提高访问效率。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="知识" scheme="http://simuleite.github.io/tags/%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>MarsCode 错题本</title>
    <link href="http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/%E9%94%99%E9%A2%98%E6%9C%AC/MarsCode%20%E9%94%99%E9%A2%98%E6%9C%AC/"/>
    <id>http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/%E9%94%99%E9%A2%98%E6%9C%AC/MarsCode%20%E9%94%99%E9%A2%98%E6%9C%AC/</id>
    <published>2025-01-18T16:00:00.000Z</published>
    <updated>2025-02-21T14:14:04.248Z</updated>
    
    <content type="html"><![CDATA[<h1 id="51-和的逆运算"><a class="markdownIt-Anchor" href="#51-和的逆运算"></a> 51 和的逆运算</h1><p>#全排列<br />这题在给定的和<strong>不重复</strong>的情况下很简单：</p><ol><li>首先升序排序好数组sums，生成答案数组<code>nums[n]</code>。</li><li><code>nums[0] + nums[1]</code> 必然等于<code>sums[0]</code>（最小值），<code>nums[0] + nums[2]</code> 必然等于<code>sums[1]</code>（次小值）, … , <code>nums[n-2] + nums[n-1]</code> 必然等于<code>sums[lastIndex]</code>（最大值）。</li><li>可以反向推测出<code>nums[0] = (sums[0] + sums[1] - sums[n-1]) / 2</code>，论证看下方：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nums[n] = &#123;a, b, c, d, e&#125; 从小到大排列</span><br><span class="line">a + b = sums[0] (1) // 最小</span><br><span class="line">a + c = sums[1] (2)</span><br><span class="line">a + d = sums[2]</span><br><span class="line">a + e = sums[3]</span><br><span class="line">b + c = sums[4] (3)</span><br><span class="line">...</span><br><span class="line">(1) + (2) = 2a + (3)</span><br><span class="line">2a = sums[0] + sums[1] - sums[n-1] = (1) + (2) - (3)</span><br></pre></td></tr></table></figure><ol start="4"><li>得出了<code>nums[0]</code>，其他数字都可以用<code>nums[i] = sums[i-1] - nums[0]</code>推出来</li></ol><p>但是给定的和重复的情况下，上面的第2条就不成立了。例如测试用例3：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sums[] = &#123; 223, 224, 225, 225, 226, 226, 227, 227, 228, 229 &#125;</span><br><span class="line">nums[n] = &#123; 111, 112, 113, 114, 115 &#125;</span><br><span class="line">a + b = 223</span><br><span class="line">a + c = 224</span><br><span class="line">a + d = 225</span><br><span class="line">a + e = 226</span><br><span class="line">b + c = 225 // 打破了第2条假设，不是按升序排序！</span><br></pre></td></tr></table></figure><p>在给定的和有重复元素的情况下，我们再按照上面的步骤1排序好数组sums，算出来的<code>nums[0]</code>就是错误的，因为这个时候<code>b+c &lt; a+e</code>，<code>a+e</code>排到了<code>b+c</code>的位置，再套用步骤3的算法就不对了。<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mi>a</mi><mo>+</mo><mi>c</mi><mi mathvariant="normal">≠</mi><mn>2</mn><mi>a</mi><mo>+</mo><mi>a</mi><mo>+</mo><mi>e</mi></mrow><annotation encoding="application/x-tex">a + b + a + c \neq 2a + a + e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">e</span></span></span></span></p><p>综上所述，重新整理后我们会发现，排序数组不是目的。真正的目的是能够让数组符合步骤3的公式<code>nums[0] = (sums[0] + sums[1] - sums[n-1]) / 2</code>，让<code>b+c</code>能够正确地出现在<code>sums[n-1]</code>的位置。<br />可是，我们并没有原数组，怎么做的出来呢？</p><blockquote><p>数学家思维：给定一个有序的数组nums，其中元素按升序排列，一定存在一个有序两两和序列sums。</p></blockquote><p>找到这个有序两两和序列，就可以根据上面的算法反推出原来的数组。</p><p>我不知道有没有一种数学算法可以优雅地找到有序两两和序列sums，一举这个问题。但是全排列一定能找到这个sums。以下是第51题的全部代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> String ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">solution</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[] sums)</span> &#123;</span><br><span class="line">        ans = <span class="string">&quot;Impossible&quot;</span>;</span><br><span class="line">        fullArrange(sums, <span class="number">0</span>, n);</span><br><span class="line">        <span class="comment">// System.out.println(ans);</span></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[] sums)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        nums[<span class="number">0</span>] = (<span class="type">int</span>) Math.round((sums[<span class="number">0</span>] + sums[<span class="number">1</span>] - sums[n-<span class="number">1</span>]) / <span class="number">2.0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">            nums[i] = sums[i-<span class="number">1</span>] - nums[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, k = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; n; j += <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j] != sums[k++]) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num: nums) &#123;</span><br><span class="line">            result.append(num + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="keyword">new</span> <span class="title class_">String</span>(result.deleteCharAt(result.length()-<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全排列，确定sums第k位的值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fullArrange</span><span class="params">(<span class="type">int</span>[] sums, <span class="type">int</span> k, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (k == sums.length) &#123;</span><br><span class="line">            check(n, sums);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k, l = sums.length; i &lt; l; i += <span class="number">1</span>) &#123;</span><br><span class="line">            swap(sums, i, k);</span><br><span class="line">            fullArrange(sums, k + <span class="number">1</span>, n);</span><br><span class="line">            swap(sums, i, k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="454-最少时间收集rgb灯"><a class="markdownIt-Anchor" href="#454-最少时间收集rgb灯"></a> 454 最少时间收集RGB灯</h1><p>#滑动窗口<br />之前做过滑动窗口的题目，如最长不重复数组，但是没有理解滑动窗口的本质，遇到这题还是没有思路。</p><blockquote><p>滑动窗口的本质：给定一个数组，你需要遍历所有的子数组才能得到答案，但是并不需要每次都从头扫描。你需要的结果中，有一部分是始终存在的、重复的。</p></blockquote><p>例如这个RGB问题，最先想到的方法就是遍历所有的子数组，检查每个子数组是否包含RGB，然后求最短长度。<br />但是，扫描<code>RRGGGBR</code>，我们得到两个RGB，分别是<code>RGGGB</code>和<code>GBR</code>。可见，我们不需要重复扫描中间的3个G来得到最终结果。而是要确定开头和结尾，确定范围仅此而已。</p><p>滑动窗口就是双指针，确定开头与结尾。<br />而其中一个指针，结尾，是必定要遍历整个数组的，不然得不到答案。<br />那么，怎样确定开头呢？</p><blockquote><p>满足条件后，确定本次开头，并寻找下一个开头。</p></blockquote><ul><li>判断满足条件：在我们的题目里，可以维护一个Set，来检查是否找到了RGB三个字母。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (charSet.size() == <span class="number">3</span>) &#123; <span class="comment">// 满足条件</span></span><br><span class="line">    <span class="comment">// 1. 确认本次长度</span></span><br><span class="line">    <span class="comment">// 2. 从Set中移除第一个字母</span></span><br><span class="line">    <span class="comment">// 3. 确定下一个start</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>确定本次开头：三个字母找到后，我们需要做的是，找到第一个字母最后出现的位置，确认长度。<br />我们可以分别用<code>R, G, B</code>来记录字母最后下标。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;R&#x27;</span>) R = end;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;G&#x27;</span>) G = end;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;B&#x27;</span>) B = end;</span><br><span class="line"><span class="keyword">if</span> (charSet.size() == <span class="number">3</span>) &#123; <span class="comment">// 满足条件</span></span><br><span class="line">    <span class="comment">// 1. 确认本次长度</span></span><br><span class="line">    start = min(R, G, B); <span class="comment">// 第一个字母最后位置</span></span><br><span class="line">    length = Math.min(length, end - start);</span><br><span class="line">    <span class="comment">// 2. 从Set中移除第一个字母</span></span><br><span class="line">    charSet.remove(S.charAt(start));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>寻找下一个开头：下一个开头，就是第二个字母最后出现的位置。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">start = secondRGB(R, G, B);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">secondRGB</span><span class="params">(<span class="type">int</span> R, <span class="type">int</span> G, <span class="type">int</span> B)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = &#123;R, G, B&#125;; </span><br><span class="line">    Arrays.sort(arr); </span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是454全部代码（两个函数合并为一次数组排序）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">solution</span><span class="params">(<span class="type">int</span> N, String S)</span> &#123;</span><br><span class="line">        <span class="type">int</span> start, end;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        Set&lt;Character&gt; charSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> R, G, B;</span><br><span class="line">        R = G = B = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (start = end = <span class="number">0</span>; end &lt; N; end += <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> S.charAt(end);</span><br><span class="line">            charSet.add(ch);</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;R&#x27;</span>) R = end;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;G&#x27;</span>) G = end;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;B&#x27;</span>) B = end;</span><br><span class="line">            <span class="keyword">if</span> (charSet.size() == <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="type">int</span>[] charIndex = &#123;R, G, B&#125;;</span><br><span class="line">                Arrays.sort(charIndex);</span><br><span class="line">                start = charIndex[<span class="number">0</span>];</span><br><span class="line">                length = Math.min(length, end - start);</span><br><span class="line">                charSet.remove(S.charAt(start));</span><br><span class="line">                start = charIndex[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// System.out.println(length);</span></span><br><span class="line">        <span class="keyword">return</span> length == Integer.MAX_VALUE ? -<span class="number">1</span> : length;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(solution(<span class="number">5</span>, <span class="string">&quot;RRGGB&quot;</span>) == <span class="number">3</span>);</span><br><span class="line">        System.out.println(solution(<span class="number">4</span>, <span class="string">&quot;RRRR&quot;</span>) == -<span class="number">1</span>);</span><br><span class="line">        System.out.println(solution(<span class="number">6</span>, <span class="string">&quot;RGBRGB&quot;</span>) == <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;51-和的逆运算&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#51-和的逆运算&quot;&gt;&lt;/a&gt; 51 和的逆运算&lt;/h1&gt;
&lt;p&gt;#全排列&lt;br /&gt;
这题在给定的和&lt;strong&gt;不重复&lt;/strong&gt;的情况下很简单：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先升序排序好数组sums，生成答案数组&lt;code&gt;nums[n]&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nums[0] + nums[1]&lt;/code&gt; 必然等于&lt;code&gt;sums[0]&lt;/code&gt;（最小值），&lt;code&gt;nums[0] + nums[2]&lt;/code&gt; 必然等于&lt;code&gt;sums[1]&lt;/code&gt;（次小值）, … , &lt;code&gt;nums[n-2] + nums[n-1]&lt;/code&gt; 必然等于&lt;code&gt;sums[lastIndex]&lt;/code&gt;（最大值）。&lt;/li&gt;
&lt;li&gt;可以反向推测出&lt;code&gt;nums[0] = (sums[0] + sums[1] - sums[n-1]) / 2&lt;/code&gt;，论证看下方：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nums[n] = &amp;#123;a, b, c, d, e&amp;#125; 从小到大排列&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a + b = sums[0] (1) // 最小&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a + c = sums[1] (2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a + d = sums[2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a + e = sums[3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b + c = sums[4] (3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(1) + (2) = 2a + (3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2a = sums[0] + sums[1] - sums[n-1] = (1) + (2) - (3)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;得出了&lt;code&gt;nums[0]&lt;/code&gt;，其他数字都可以用&lt;code&gt;nums[i] = sums[i-1] - nums[0]&lt;/code&gt;推出来&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但是给定的和重复的情况下，上面的第2条就不成立了。例如测试用例3：&lt;/p&gt;</summary>
    
    
    
    
    <category term="笔记" scheme="http://simuleite.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Maven使用</title>
    <link href="http://simuleite.github.io/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/Maven%E4%BD%BF%E7%94%A8/"/>
    <id>http://simuleite.github.io/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/Maven%E4%BD%BF%E7%94%A8/</id>
    <published>2025-01-15T16:00:00.000Z</published>
    <updated>2025-04-15T02:24:14.658Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微服务"><a class="markdownIt-Anchor" href="#微服务"></a> 微服务</h1><p>非单体项目，可以用下面的脚本启动微服务。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取服务名称和额外参数</span></span><br><span class="line">SERVICE_NAME=$1</span><br><span class="line">shift  # 移除第一个参数（服务名），将剩余参数保存到 $@</span><br><span class="line">EXTRA_ARGS=&quot;$@&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查是否输入服务名称</span></span><br><span class="line">if [ -z &quot;$SERVICE_NAME&quot; ]; then</span><br><span class="line">  echo &quot;Usage: ./run.sh &lt;servicename|all&gt; [additional_maven_args]&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">定义运行单个服务的函数</span></span><br><span class="line">run_service() &#123;</span><br><span class="line">  local service=$1</span><br><span class="line">  local args=$2</span><br><span class="line">  echo &quot;Building and running $service with args: $args...&quot;</span><br><span class="line">  mvn clean install -pl $service -am</span><br><span class="line">  if [ &quot;$service&quot; == &quot;gateway/&quot; ]; then</span><br><span class="line">    echo &quot;Gateway starting...&quot;</span><br><span class="line">    mvn spring-boot:run -pl $service -Dreactor.netty.http.server.accessLogEnabled=true $args</span><br><span class="line">  else</span><br><span class="line">    mvn spring-boot:run -pl $service $args</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果输入 <span class="string">&quot;all&quot;</span>，运行所有服务（默认不传参）</span></span><br><span class="line">if [ &quot;$SERVICE_NAME&quot; == &quot;all&quot; ]; then</span><br><span class="line">  echo &quot;Building and running all services...&quot;</span><br><span class="line">  mvn clean install -pl &quot;!generator&quot;</span><br><span class="line">  for module in $(mvn help:evaluate -Dexpression=project.modules -q -DforceStdout | sed -e &#x27;s/&lt;[^&gt;]*&gt;//g&#x27; -e &#x27;s/\s*//g&#x27; | tr &#x27;,&#x27; &#x27;\n&#x27;); do</span><br><span class="line">    if [ &quot;$module&quot; != &quot;generator&quot; ]; then</span><br><span class="line">      echo &quot;Running $module...&quot;</span><br><span class="line">      mvn spring-boot:run -pl $module</span><br><span class="line">    fi</span><br><span class="line">  done</span><br><span class="line">else</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">运行指定的单个服务，并传递额外参数</span></span><br><span class="line">  run_service $SERVICE_NAME &quot;$EXTRA_ARGS&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>核心命令是这一条：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn spring-boot:run -pl $your_service</span><br></pre></td></tr></table></figure><p>想要增加JVM参数，指定端口可以加上</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-Dspring-boot.run.arguments=--server.port=$your_port</span><br></pre></td></tr></table></figure><h1 id="全局换源"><a class="markdownIt-Anchor" href="#全局换源"></a> 全局换源</h1><p>找到 <code>settings.xml</code> 文件：</p><ul><li>全局配置：位于 Maven 安装目录的 <code>conf</code> 文件夹下（例如<code>/usr/local/maven/conf/settings.xml</code>）。</li><li>用户配置：位于用户主目录下的 .m2 文件夹中（例如<code>~/.m2/settings.xml</code>）。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">  &lt;!-- 其他配置 --&gt;</span><br><span class="line">  &lt;mirrors&gt;</span><br><span class="line">    &lt;!-- 阿里云 Maven 镜像 --&gt;</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;aliyun-maven&lt;/id&gt;</span><br><span class="line">      &lt;name&gt;阿里云公共仓库&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;</span><br><span class="line">      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;!-- 指定替换中央仓库 --&gt;</span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line">    &lt;!-- 华为云 Maven 镜像 --&gt;</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;huaweicloud&lt;/id&gt;</span><br><span class="line">      &lt;name&gt;华为云 Maven&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;https://mirrors.huaweicloud.com/repository/maven/&lt;/url&gt;</span><br><span class="line">      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line">  &lt;/mirrors&gt;</span><br><span class="line">  &lt;!-- 其他配置 --&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;微服务&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#微服务&quot;&gt;&lt;/a&gt; 微服务&lt;/h1&gt;
&lt;p&gt;非单体项目，可以用下面的脚本启动微服务。&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    
    <category term="基本操作" scheme="http://simuleite.github.io/tags/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Eureka中间件</title>
    <link href="http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/%E4%B8%AD%E9%97%B4%E4%BB%B6/Eureka%E7%AC%94%E8%AE%B0/"/>
    <id>http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/%E4%B8%AD%E9%97%B4%E4%BB%B6/Eureka%E7%AC%94%E8%AE%B0/</id>
    <published>2025-01-03T16:00:00.000Z</published>
    <updated>2025-01-06T11:59:12.640Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注册中心"><a class="markdownIt-Anchor" href="#注册中心"></a> 注册中心</h1><p>Eureka能够自动注册并发现微服务，然后对服务的状态、信息进行集中管理。当我们需要获取其他服务的信息时，只需要向Eureka进行查询。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a: 微服务1</span><br><span class="line">b: 微服务2</span><br><span class="line">c: 微服务3</span><br><span class="line">E: Eureka注册中心</span><br><span class="line"></span><br><span class="line">a -&gt; E: 注册</span><br><span class="line">b -&gt; E: 注册</span><br><span class="line">c -&gt; E: 注册</span><br></pre></td></tr></table></figure><h1 id="依赖"><a class="markdownIt-Anchor" href="#依赖"></a> 依赖</h1><h2 id="父项目"><a class="markdownIt-Anchor" href="#父项目"></a> 父项目</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2024.0</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">    &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">    &lt;scope&gt;<span class="keyword">import</span>&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="eureka模块"><a class="markdownIt-Anchor" href="#eureka模块"></a> Eureka模块</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h2 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">registry-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">service-url:</span></span><br><span class="line">    <span class="attr">defaultZone:</span> <span class="string">http://yourhost:port/eureka</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注册服务"><a class="markdownIt-Anchor" href="#注册服务"></a> 注册服务</h1><p>首先在需要注册的微服务下导入Eureka依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后修改配置<code>appllication.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">yourservice</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">      <span class="comment"># 跟上面一样，需要指向Eureka服务端地址，这样才能进行注册</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://yourhost:port/eureka</span></span><br></pre></td></tr></table></figure><h1 id="服务发现"><a class="markdownIt-Anchor" href="#服务发现"></a> 服务发现</h1><h2 id="注册resttemplate"><a class="markdownIt-Anchor" href="#注册resttemplate"></a> 注册RestTemplate</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用spring-application-name代替url"><a class="markdownIt-Anchor" href="#使用spring-application-name代替url"></a> 使用spring-application-name代替URL</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> UserBorrowDetail <span class="title function_">getUserBorrowDetailByUid</span><span class="params">(<span class="type">int</span> uid)</span> &#123;</span><br><span class="line">    List&lt;Borrow&gt; borrow = borrowMapper.getBorrowByUid(uid);</span><br><span class="line">    <span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(<span class="string">&quot;http://userservice/user/&quot;</span>+uid, User.class);</span><br><span class="line">    List&lt;Book&gt; bookList = borrow</span><br><span class="line">            .stream()</span><br><span class="line">            .map(b -&gt; restTemplate.getForObject(<span class="string">&quot;http://bookservice/book/&quot;</span>+b.getBid(), Book.class))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserBorrowDetail</span>(user, bookList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="负载均衡"><a class="markdownIt-Anchor" href="#负载均衡"></a> 负载均衡</h3><p>同一个服务可以注册多个端口，Eureka会为同一服务的多个端口分别进行注册。<br />使用上面的代码，Eureka会自动地均衡分发请求到不同端口上。</p><blockquote><p>负载均衡保证了服务的安全性，只要不是所有端口的微服务都宕机，Eureka就能够分配请求到可用的端口。</p></blockquote><h1 id="eureka高可用集群"><a class="markdownIt-Anchor" href="#eureka高可用集群"></a> Eureka高可用集群</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E: Eureka高可用集群</span><br><span class="line">E: &#123;</span><br><span class="line">    E1: Eureka服务器1</span><br><span class="line">    E2: Eureka服务器2</span><br><span class="line">    E3: Eureka服务器3</span><br><span class="line"></span><br><span class="line">    E1 -&gt; E2</span><br><span class="line">    E2 -&gt; E3</span><br><span class="line">    E3 -&gt; E1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a: 微服务1</span><br><span class="line">b: 微服务2</span><br><span class="line">c: 微服务3</span><br><span class="line">a -&gt; E: 注册</span><br><span class="line">b -&gt; E: 注册</span><br><span class="line">c -&gt; E: 注册</span><br></pre></td></tr></table></figure><h2 id="编写多个applicationyml"><a class="markdownIt-Anchor" href="#编写多个applicationyml"></a> 编写多个application.yml</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application-01.yml</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8801</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eurekaserver</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">      <span class="comment"># 由于不支持多个localhost的Eureka服务器，但是又只有本地测试环境，所以就只能自定义主机名称了</span></span><br><span class="line">      <span class="comment"># 主机名称改为eureka01</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka01</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 去掉register-with-eureka选项，让Eureka服务器自己注册到其他Eureka服务器，这样才能相互启用</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">        <span class="comment"># 注意这里填写其他Eureka服务器的地址，不用写自己的</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka01:8802/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># application-02.yml</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8802</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eurekaserver</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka02</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka01:8801/eureka</span></span><br></pre></td></tr></table></figure><h2 id="微服务写入所有eureka服务器的地址"><a class="markdownIt-Anchor" href="#微服务写入所有eureka服务器的地址"></a> 微服务写入所有Eureka服务器的地址</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">        <span class="comment"># 将两个Eureka的地址都加入，这样就算有一个Eureka挂掉，也能完成注册</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8801/eureka,</span> <span class="string">http://localhost:8802/eureka</span></span><br></pre></td></tr></table></figure><h1 id="loadbalance-随机分配"><a class="markdownIt-Anchor" href="#loadbalance-随机分配"></a> LoadBalance 随机分配</h1><p>默认的LoadBalance是轮询模式，想修改为随机分配，需要修改<code>LoadBalancerConfig</code>（注意，不需要<code>@Configuration</code>注解）并在<code>BeanConfiguration</code>中启用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoadBalancerConfig</span> &#123;</span><br><span class="line">      <span class="comment">//将官方提供的 RandomLoadBalancer 注册为Bean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ReactorLoadBalancer&lt;ServiceInstance&gt; <span class="title function_">randomLoadBalancer</span><span class="params">(Environment environment, LoadBalancerClientFactory loadBalancerClientFactory)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> environment.getProperty(LoadBalancerClientFactory.PROPERTY_NAME);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomLoadBalancer</span>(loadBalancerClientFactory.getLazyProvider(name, ServiceInstanceListSupplier.class), name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@LoadBalancerClient(value = &quot;userservice&quot;,</span></span><br><span class="line"><span class="meta">                    configuration = LoadBalancerConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="openfeign-更方便的http客户端请求工具"><a class="markdownIt-Anchor" href="#openfeign-更方便的http客户端请求工具"></a> OpenFeign 更方便的HTTP客户端请求工具</h1><p>OpenFeign和RestTemplate有一样的功能，但是使用起来更加方便</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用方法与Mybatis非常类似。</p><ol><li>首先，启用OpenFeign</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SomeApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>接下来注册一个<code>interface</code></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;userservice&quot;)</span>   <span class="comment">// 声明为userservice服务的HTTP请求客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 路径保证和UserService微服务提供的一致即可</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/&#123;uid&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;uid&quot;)</span> <span class="type">int</span> uid)</span>;  <span class="comment">// 参数和返回值也保持一致</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>直接注入使用</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">UserClient userClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> UserBorrowDetail <span class="title function_">getUserBorrowDetailByUid</span><span class="params">(<span class="type">int</span> uid)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RestTemplate方法</span></span><br><span class="line">    <span class="type">RestTemplate</span> <span class="variable">template</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> template.getForObject(<span class="string">&quot;http://userservice/user/&quot;</span>+uid, User.class);</span><br><span class="line">    <span class="comment">// OpenFeign方法，更直观的方法调用</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userClient.getUserById(uid);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;注册中心&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#注册中心&quot;&gt;&lt;/a&gt; 注册中心&lt;/h1&gt;
&lt;p&gt;Eureka能够自动注册并发现微服务，然后对服务的状态、信息进行集中管理。当我们需要获取其他服务的信息时，只需要向Eureka进行查</summary>
      
    
    
    
    
    <category term="中间件" scheme="http://simuleite.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud Netflix笔记</title>
    <link href="http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/Spring/SpringCloud%20Netfilx%E7%AC%94%E8%AE%B0/"/>
    <id>http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/Spring/SpringCloud%20Netfilx%E7%AC%94%E8%AE%B0/</id>
    <published>2024-12-31T16:00:00.000Z</published>
    <updated>2025-03-15T05:54:39.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微服务"><a class="markdownIt-Anchor" href="#微服务"></a> 微服务</h1><p>微服务：解决接口越来越多，单体应用运行缓慢问题。</p><h1 id="踩坑记录"><a class="markdownIt-Anchor" href="#踩坑记录"></a> 踩坑记录</h1><h2 id="找不到mapper"><a class="markdownIt-Anchor" href="#找不到mapper"></a> 找不到Mapper</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">***************************</span><br><span class="line">APPLICATION FAILED TO START</span><br><span class="line">***************************</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Field deviceMapper in com.esagent.es.EsDataInit required a bean of type &#x27;com.example.mapper.YourMapper&#x27; that could not be found.</span><br><span class="line"></span><br><span class="line">The injection point has the following annotations:</span><br><span class="line">    - @org.springframework.beans.factory.annotation.Autowired(required=true)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Consider defining a bean of type &#x27;com.example.mapper.YourMapper&#x27; in your configuration.</span><br></pre></td></tr></table></figure><p>原因是mybatis版本有问题！</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 版本需要和其他依赖对上 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="服务间调用"><a class="markdownIt-Anchor" href="#服务间调用"></a> 服务间调用</h1><blockquote><p>一个服务只调用一张表。当一个服务需要调用其他表时，使用HTTP调用其他微服务。</p></blockquote><h2 id="commons"><a class="markdownIt-Anchor" href="#commons"></a> Commons</h2><p>新建一个commons模块，用于存放全局使用的Entity</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="resttemplate"><a class="markdownIt-Anchor" href="#resttemplate"></a> RestTemplate</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> UserBorrowDetail <span class="title function_">getUserBorrowDetailByUid</span><span class="params">(<span class="type">int</span> uid)</span> &#123;</span><br><span class="line">    List&lt;Borrow&gt; borrow = mapper.getBorrowsByUid(uid);</span><br><span class="line">    <span class="comment">//RestTemplate支持多种方式的远程调用</span></span><br><span class="line">    <span class="type">RestTemplate</span> <span class="variable">template</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    <span class="comment">//这里通过调用getForObject来请求其他服务，并将结果自动进行封装</span></span><br><span class="line">    <span class="comment">//获取User信息</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> template.getForObject(<span class="string">&quot;http://localhost:8082/user/&quot;</span>+uid, User.class);</span><br><span class="line">    <span class="comment">//获取每一本书的详细信息</span></span><br><span class="line">    List&lt;Book&gt; bookList = borrow</span><br><span class="line">            .stream()</span><br><span class="line">            .map(b -&gt; template.getForObject(<span class="string">&quot;http://localhost:8080/book/&quot;</span>+b.getBid(), Book.class))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserBorrowDetail</span>(user, bookList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="eureka-注册中心"><a class="markdownIt-Anchor" href="#eureka-注册中心"></a> Eureka 注册中心</h1><p>像上面这样直接调用微服务URL的方法是非常紧耦合的代码。Eureka可以帮我们解决这个问题。</p><blockquote><p><a href="../../%E4%B8%AD%E9%97%B4%E4%BB%B6/Eureka%E7%AC%94%E8%AE%B0.md">Eureka能够自动注册并发现微服务，然后对服务的状态、信息进行集中管理。当我们需要获取其他服务的信息时，只需要向Eureka进行查询。</a></p></blockquote><h2 id="添加依赖"><a class="markdownIt-Anchor" href="#添加依赖"></a> 添加依赖</h2><ul><li>父工程</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2024.0</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">    &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">    &lt;scope&gt;<span class="keyword">import</span>&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>Eureka模块</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h1 id="hystrix-服务熔断已弃用"><a class="markdownIt-Anchor" href="#hystrix-服务熔断已弃用"></a> Hystrix 服务熔断（已弃用）</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">direction: right</span><br><span class="line">服务1 -&gt; 服务2: 请求</span><br><span class="line">服务2 -&gt; 服务3: 请求</span><br><span class="line">服务3 -&gt; 服务4: 请求</span><br><span class="line">服务4 -&gt; 服务5: 故障 &#123;</span><br><span class="line">    style.stroke: red</span><br><span class="line">&#125;</span><br><span class="line">服务5.style.stroke-dash: 4</span><br><span class="line">服务5.style.stroke: red</span><br></pre></td></tr></table></figure><h2 id="服务降级"><a class="markdownIt-Anchor" href="#服务降级"></a> 服务降级</h2><p>当某个微服务宕机时，可以通过Hystrix返回备选方案。</p><h2 id="服务熔断"><a class="markdownIt-Anchor" href="#服务熔断"></a> 服务熔断</h2><p>当某个微服务过长时间没有响应，开启熔断器，直接不调用微服务的方法，只调用降级的服务。重新等待一段时间后，才继续尝试调用微服务方法，并根据响应情况关闭熔断器。</p><h1 id="openfeign-服务降级"><a class="markdownIt-Anchor" href="#openfeign-服务降级"></a> OpenFeign 服务降级</h1><blockquote><p><a href="../../%E4%B8%AD%E9%97%B4%E4%BB%B6/Eureka%E7%AC%94%E8%AE%B0.md#OpenFeign%20%E6%9B%B4%E6%96%B9%E4%BE%BF%E7%9A%84HTTP%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AF%B7%E6%B1%82%E5%B7%A5%E5%85%B7">OpenFeign 更方便的HTTP客户端请求工具</a></p></blockquote><p>实现一个<code>FallBackClient</code>类，并继承<code>Client</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>   <span class="comment">// 注意，需要将其注册为Bean，Feign才能自动注入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFallbackClient</span> <span class="keyword">implements</span> <span class="title class_">UserClient</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> uid)</span> &#123;   <span class="comment">// 这里我们自行对其进行实现，并返回我们的替代方案</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(<span class="string">&quot;我是替代方案&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Client</code>中指定fallback参数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fallback参数指定为我们刚刚编写的实现类</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;userservice&quot;, fallback = UserFallbackClient.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/&#123;uid&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;uid&quot;)</span> <span class="type">int</span> uid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，在配置文件中开启熔断支持</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">    <span class="attr">circuitbreaker:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="gateway-网关"><a class="markdownIt-Anchor" href="#gateway-网关"></a> Gateway 网关</h1><blockquote><p>并不是所有的微服务都需要直接暴露给外部调用。使用网关隔离内外网、转发微服务请求，并实现负载均衡。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Gateway &lt;-&gt; Internet</span><br><span class="line">Eureka -&gt; Gateway: 查询服务列表</span><br><span class="line">Internet.shape: cloud</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Gateway -&gt; 微服务1</span><br><span class="line">多个实例: &#123;</span><br><span class="line">    微服务2-1 &lt;-&gt; 微服务2-2</span><br><span class="line">&#125;</span><br><span class="line">Gateway -&gt; 多个实例: 负载均衡</span><br><span class="line"></span><br><span class="line">微服务1 -&gt; Eureka: 注册</span><br><span class="line">多个实例 -&gt; Eureka: 注册</span><br></pre></td></tr></table></figure><h2 id="gateway-server模块"><a class="markdownIt-Anchor" href="#gateway-server模块"></a> gateway-server模块</h2><p>依赖项</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>路由配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">gateway-port</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:eureka-port-1/eureka,</span> <span class="string">http://localhost:eureka-port-2/eureka</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">        <span class="comment"># 配置路由，注意这里是个列表，每一项都包含了很多信息</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">borrow-service</span>   <span class="comment"># 路由名称</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://borrowservice</span>  <span class="comment"># 路由的地址，lb表示使用负载均衡到微服务，也可以使用http正常转发</span></span><br><span class="line">        <span class="attr">predicates:</span> <span class="comment"># 路由规则，断言什么请求会被路由</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/borrow/**</span>  <span class="comment"># 只要是访问的这个路径，一律都被路由到上面指定的服务</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">book-service</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://bookservice</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/book/**</span></span><br><span class="line">          <span class="attr">filters:</span> <span class="comment"># 添加过滤器</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestHeader=Header,</span> <span class="string">HeaderContent</span></span><br><span class="line">            <span class="comment"># 添加请求头信息</span></span><br></pre></td></tr></table></figure><h1 id="config-配置中心"><a class="markdownIt-Anchor" href="#config-配置中心"></a> Config 配置中心</h1><p>Spring Cloud Config可以在云端集中地管理所有环境中应用程序的外部配置。</p><h2 id="服务端配置"><a class="markdownIt-Anchor" href="#服务端配置"></a> 服务端配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8700</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">configserver</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">            <span class="comment"># 远程仓库地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://git.../config-repo</span></span><br><span class="line">          <span class="comment"># 默认分支设定为远程分支的名称</span></span><br><span class="line">          <span class="attr">default-label:</span> <span class="string">main</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:eureka-port-1/eureka,</span> <span class="string">http://localhost:eureka-port-1/eureka</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ConfigApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件命名规则</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;服务名称&#125;-&#123;环境&#125;.yml</span><br></pre></td></tr></table></figure><p>根据网址即可访问配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://your-host:your-port/&#123;服务名称&#125;/&#123;环境&#125;/&#123;分支名称&#125;</span><br></pre></td></tr></table></figure><h2 id="客户端配置"><a class="markdownIt-Anchor" href="#客户端配置"></a> 客户端配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># boostrap.yml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="comment"># 名称，其实就是文件名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">bookservice</span></span><br><span class="line">      <span class="comment"># 配置服务器的地址</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:8700</span></span><br><span class="line">      <span class="comment"># 环境</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">prod</span></span><br><span class="line">      <span class="comment"># 分支</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><h1 id="微服务cap原则"><a class="markdownIt-Anchor" href="#微服务cap原则"></a> 微服务CAP原则</h1><blockquote><p>Consistency、Availability、Partition-Tolerance 三者不可同时保证，最多只能保证两个。</p></blockquote><ul><li>Consistency 一致性：在分布式系统中，所有数据备份在同一时刻都是同样的最新值。</li><li>Availability 可用性：系统非故障节点收到每个请求都必须回应。熔断和降级就是维持可用性。</li><li>Parition-Tolerance 分区容错性：分布式系统中，节点之间的网络可能因为故障导致不连通。需要容忍这些意外情况。</li></ul><p>高容忍性，将数据存放在多个节点，复制次数增加，一致性难以保证；<br />高一致性，更新所有节点数据所需的时间变长，可用性会降低。</p><h2 id="ac-可用性-一致性"><a class="markdownIt-Anchor" href="#ac-可用性-一致性"></a> AC 可用性 + 一致性</h2><p>高可用性和高一致性，意味着某个节点数据更新后，需要尽可能快地同步数据到其他节点，对网络要求非常高。在实际情况下，网络不可靠，容易丢包。最好的办法就是违反分布式系统的概念，将数据集中存放。</p><h2 id="cp-一致性-分区容错性"><a class="markdownIt-Anchor" href="#cp-一致性-分区容错性"></a> CP 一致性 + 分区容错性</h2><p>高一致性，意味着某个节点数据更新后，需要完全同步给其他节点；高分区容错性，意味着我们将容忍网络的不可靠问题，网络出现卡顿也继续传输。因此服务会在一段时间内完全失效，可用性无法保证。</p><h2 id="ap-可用性-分区容错性"><a class="markdownIt-Anchor" href="#ap-可用性-分区容错性"></a> AP 可用性 + 分区容错性</h2><p>高可用性和高分区容错性，意味着保证服务可用，而放弃节点数据的高度统一，使数据在不一致的情况下进行响应。<br />虽然这种办法拿不到最新的数据，但是只要数据同步在后台继续运行，在某个时刻一定能够成功同步数据，实现最终的一致性。</p><blockquote><p>AP是实际上最能被接受的方案。</p></blockquote><p>例如Eureka集群就使用了AP方案，在一台服务器宕机的情况下立刻切换另外一台服务器，保证可用性，即使这台服务器的数据可能不是最新数据。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;微服务&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#微服务&quot;&gt;&lt;/a&gt; 微服务&lt;/h1&gt;
&lt;p&gt;微服务：解决接口越来越多，单体应用运行缓慢问题。&lt;/p&gt;
&lt;h1 id=&quot;踩坑记录&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#踩坑记录&quot;&gt;&lt;/a&gt; 踩坑记录&lt;/h1&gt;
&lt;h2 id=&quot;找不到mapper&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#找不到mapper&quot;&gt;&lt;/a&gt; 找不到Mapper&lt;/h2&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;***************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;APPLICATION FAILED TO START&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***************************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Description:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Field deviceMapper in com.esagent.es.EsDataInit required a bean of type &amp;#x27;com.example.mapper.YourMapper&amp;#x27; that could not be found.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;The injection point has the following annotations:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - @org.springframework.beans.factory.annotation.Autowired(required=true)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Action:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Consider defining a bean of type &amp;#x27;com.example.mapper.YourMapper&amp;#x27; in your configuration.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;原因是mybatis版本有问题！&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependencyManagement&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.mybatis.spring.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;mybatis-spring-boot-starter&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.0.4&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 版本需要和其他依赖对上 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependencyManagement&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="笔记" scheme="http://simuleite.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Spring" scheme="http://simuleite.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>前后端分离</title>
    <link href="http://simuleite.github.io/ComputerScience/%E7%9F%A5%E8%AF%86/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/"/>
    <id>http://simuleite.github.io/ComputerScience/%E7%9F%A5%E8%AF%86/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB/</id>
    <published>2024-12-26T16:00:00.000Z</published>
    <updated>2025-03-15T05:56:55.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="10-session"><a class="markdownIt-Anchor" href="#10-session"></a> 1.0 Session</h1><p>有状态：用户请求接口 -&gt; <strong>从Session中读取用户信息</strong> -&gt; 根据当前的用户来处理业务 -&gt; 返回</p><p>缺点：<strong>不支持分布式</strong></p><h1 id="20-token"><a class="markdownIt-Anchor" href="#20-token"></a> 2.0 Token</h1><p>无状态：用户携带Token请求接口 -&gt; <strong>从请求中获取用户信息</strong> -&gt; 根据当前的用户来处理业务 -&gt; 返回</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>工具类</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;</span><br><span class="line">      <span class="comment">//Jwt秘钥</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;abcdefghijklmn&quot;</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 根据用户信息创建Jwt令牌</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJwt</span><span class="params">(UserDetails user)</span>&#123;</span><br><span class="line">        <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(key);</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">        calendar.add(Calendar.SECOND, <span class="number">3600</span> * <span class="number">24</span> * <span class="number">7</span>);</span><br><span class="line">        <span class="keyword">return</span> JWT.create()</span><br><span class="line">                .withClaim(<span class="string">&quot;name&quot;</span>, user.getUsername())  <span class="comment">// 配置JWT自定义信息</span></span><br><span class="line">                .withClaim(<span class="string">&quot;authorities&quot;</span>, user.getAuthorities().stream().map(GrantedAuthority::getAuthority).toList())</span><br><span class="line">                .withExpiresAt(calendar.getTime())  <span class="comment">// 设置过期时间</span></span><br><span class="line">                .withIssuedAt(now)    <span class="comment">// 设置创建创建时间</span></span><br><span class="line">                .sign(algorithm);   <span class="comment">// 最终签名</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 根据Jwt验证并解析用户信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserDetails <span class="title function_">resolveJwt</span><span class="params">(String token)</span>&#123;</span><br><span class="line">        <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(key);</span><br><span class="line">        <span class="type">JWTVerifier</span> <span class="variable">jwtVerifier</span> <span class="operator">=</span> JWT.require(algorithm).build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">DecodedJWT</span> <span class="variable">verify</span> <span class="operator">=</span> jwtVerifier.verify(token);  <span class="comment">// 对JWT令牌进行验证，看看是否被修改</span></span><br><span class="line">            Map&lt;String, Claim&gt; claims = verify.getClaims();  <span class="comment">// 获取令牌中内容</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().after(claims.get(<span class="string">&quot;exp&quot;</span>).asDate())) <span class="comment">// 如果是过期令牌则返回null</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                  <span class="comment">// 重新组装为UserDetails对象，包括用户名、授权信息等</span></span><br><span class="line">                <span class="keyword">return</span> User</span><br><span class="line">                        .withUsername(claims.get(<span class="string">&quot;name&quot;</span>).asString())</span><br><span class="line">                        .password(<span class="string">&quot;&quot;</span>)</span><br><span class="line">                        .authorities(claims.get(<span class="string">&quot;authorities&quot;</span>).asArray(String.class))</span><br><span class="line">                        .build();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTVerificationException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Filter</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;  </span><br><span class="line"><span class="comment">// 继承OncePerRequestFilter表示每次请求过滤一次，用于快速编写JWT校验规则</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">          <span class="comment">// 首先从Header中取出JWT</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">authorization</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">          <span class="comment">// 判断是否包含JWT且格式正确</span></span><br><span class="line">        <span class="keyword">if</span> (authorization != <span class="literal">null</span> &amp;&amp; authorization.startsWith(<span class="string">&quot;Bearer &quot;</span>)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> authorization.substring(<span class="number">7</span>);    </span><br><span class="line">              <span class="comment">// 开始解析成UserDetails对象，如果得到的是null说明解析失败，JWT有问题</span></span><br><span class="line">            <span class="type">UserDetails</span> <span class="variable">user</span> <span class="operator">=</span> JwtUtils.resolveJwt(token);</span><br><span class="line">            <span class="keyword">if</span>(user != <span class="literal">null</span>) &#123;</span><br><span class="line">                  <span class="comment">// 验证没有问题，那么就可以开始创建Authentication了，这里我们跟默认情况保持一致</span></span><br><span class="line">                  <span class="comment">// 使用UsernamePasswordAuthenticationToken作为实体，填写相关用户信息进去</span></span><br><span class="line">                <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authentication</span> <span class="operator">=</span></span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(user, <span class="literal">null</span>, user.getAuthorities());</span><br><span class="line">                authentication.setDetails(<span class="keyword">new</span> <span class="title class_">WebAuthenticationDetailsSource</span>().buildDetails(request));</span><br><span class="line">                  <span class="comment">// 然后直接把配置好的Authentication塞给SecurityContext表示已经完成验证</span></span><br><span class="line">                SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">          <span class="comment">// 最后放行，继续下一个过滤器</span></span><br><span class="line">          <span class="comment">// 可能各位小伙伴会好奇，要是没验证成功不是应该拦截吗？这个其实没有关系的</span></span><br><span class="line">          <span class="comment">// 因为如果没有验证失败上面是不会给SecurityContext设置Authentication的，后面直接就被拦截掉了</span></span><br><span class="line">          <span class="comment">// 而且有可能用户发起的是用户名密码登录请求，这种情况也要放行的，不然怎么登录，所以说直接放行就好</span></span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Security修改为无状态</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将Session管理创建策略改成无状态，这样SpringSecurity就不会创建会话了，也不会采用之前那套机制记录用户，因为现在我们可以直接从JWT中获取信息</span></span><br><span class="line">.sessionManagement(conf -&gt; &#123;</span><br><span class="line">    conf.sessionCreationPolicy(SessionCreationPolicy.STATELESS);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 添加我们用于处理JWT的过滤器到Security过滤器链中，注意要放在UsernamePasswordAuthenticationFilter之前</span></span><br><span class="line">.addFilterBefore(<span class="keyword">new</span> <span class="title class_">JwtAuthenticationFilter</span>(), UsernamePasswordAuthenticationFilter.class)</span><br></pre></td></tr></table></figure><h2 id="jwt退出登录"><a class="markdownIt-Anchor" href="#jwt退出登录"></a> JWT退出登录</h2><p>采用黑名单方案。一台服务器存储JWT黑名单，共享给所有微服务。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JWT.create()</span><br><span class="line">    <span class="comment">// 额外添加一个UUID用于记录黑名单，将其作为JWT的ID属性jti</span></span><br><span class="line">    .withJWTId(UUID.randomUUID().toString())</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;    </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HashSet&lt;String&gt; blackList = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 加入黑名单方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">invalidate</span><span class="params">(String token)</span>&#123;</span><br><span class="line">        <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(key);</span><br><span class="line">        <span class="type">JWTVerifier</span> <span class="variable">jwtVerifier</span> <span class="operator">=</span> JWT.require(algorithm).build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">DecodedJWT</span> <span class="variable">verify</span> <span class="operator">=</span> jwtVerifier.verify(token);</span><br><span class="line">            Map&lt;String, Claim&gt; claims = verify.getClaims();</span><br><span class="line">              <span class="comment">//取出UUID丢进黑名单中</span></span><br><span class="line">            <span class="keyword">return</span> blackList.add(verify.getId());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTVerificationException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserDetails <span class="title function_">resolveJwt</span><span class="params">(String token)</span>&#123;</span><br><span class="line">        <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(key);</span><br><span class="line">        <span class="type">JWTVerifier</span> <span class="variable">jwtVerifier</span> <span class="operator">=</span> JWT.require(algorithm).build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">DecodedJWT</span> <span class="variable">verify</span> <span class="operator">=</span> jwtVerifier.verify(token);</span><br><span class="line">            <span class="comment">// 判断是否存在于黑名单中，如果存在，则返回null表示失效</span></span><br><span class="line">            <span class="keyword">if</span>(blackList.contains(verify.getId()))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            Map&lt;String, Claim&gt; claims = verify.getClaims();</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().after(claims.get(<span class="string">&quot;exp&quot;</span>).asDate()))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> User</span><br><span class="line">                    .withUsername(claims.get(<span class="string">&quot;name&quot;</span>).asString())</span><br><span class="line">                    .password(<span class="string">&quot;&quot;</span>)</span><br><span class="line">                    .authorities(claims.get(<span class="string">&quot;authorities&quot;</span>).asArray(String.class))</span><br><span class="line">                    .build();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTVerificationException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;10-session&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#10-session&quot;&gt;&lt;/a&gt; 1.0 Session&lt;/h1&gt;
&lt;p&gt;有状态：用户请求接口 -&amp;gt; &lt;strong&gt;从Session中读取用户信息&lt;/stron</summary>
      
    
    
    
    
    <category term="知识" scheme="http://simuleite.github.io/tags/%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>scp使用</title>
    <link href="http://simuleite.github.io/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/scp%E4%BD%BF%E7%94%A8/"/>
    <id>http://simuleite.github.io/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/scp%E4%BD%BF%E7%94%A8/</id>
    <published>2024-12-24T16:00:00.000Z</published>
    <updated>2025-04-14T12:24:12.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="上传文件"><a class="markdownIt-Anchor" href="#上传文件"></a> 上传文件</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp ./upload/path/file.postfix user@host.com:/path/to/file</span><br><span class="line">scp -P &lt;port&gt; -i &lt;key&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件夹</span></span><br><span class="line">scp -r ./upload/path/folder user@host.com:/path/to/folder</span><br></pre></td></tr></table></figure><h1 id="下载文件"><a class="markdownIt-Anchor" href="#下载文件"></a> 下载文件</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp user@host.com:/path/to/file.postfix ./download/path</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件夹</span></span><br><span class="line">scp -r user@host.com:/path/to/folader ./download/path</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;上传文件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#上传文件&quot;&gt;&lt;/a&gt; 上传文件&lt;/h1&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;spa</summary>
      
    
    
    
    
    <category term="基本操作" scheme="http://simuleite.github.io/tags/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot常用框架</title>
    <link href="http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/Spring/SpringBoot%E5%B8%B8%E7%94%A8%E6%A1%86%E6%9E%B6/"/>
    <id>http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/Spring/SpringBoot%E5%B8%B8%E7%94%A8%E6%A1%86%E6%9E%B6/</id>
    <published>2024-12-23T16:00:00.000Z</published>
    <updated>2025-01-05T02:06:15.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springboot-mail-邮箱验证码"><a class="markdownIt-Anchor" href="#springboot-mail-邮箱验证码"></a> SpringBoot Mail 邮箱验证码</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">your.SMTP.host</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">your_server_email@email.com</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">your_passowrd</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">JavaMailSender sender;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/verification-email&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">sendVerificationEmail</span><span class="params">(<span class="meta">@RequestParam</span> String targetEmail,</span></span><br><span class="line"><span class="params">                                    HttpSession session)</span> &#123;</span><br><span class="line">        <span class="type">SimpleMailMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMailMessage</span>();</span><br><span class="line">        message.setSubject(EMAIL_TITLE);</span><br><span class="line">        <span class="type">int</span> <span class="variable">vCode</span> <span class="operator">=</span> getVerificationCode();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;vcode&quot;</span>, vCode);</span><br><span class="line">        session.setAttribute(<span class="string">&quot;uemail&quot;</span>, email);</span><br><span class="line"></span><br><span class="line">        message.setText(EMAIL_CONTEXT + code);</span><br><span class="line">        message.setTo(targetEmail);</span><br><span class="line">        message.setFrom(EMAIL_SERVEREMAIL); <span class="comment">// 与配置文件中的保持一致</span></span><br><span class="line"></span><br><span class="line">        sender.send(message);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;发送成功&quot;</span>; <span class="comment">// 前端弹窗可以接受此参数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(<span class="meta">@RequestParam</span> String username,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestParam</span> String email,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestParam</span> String code,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestParam</span> String password,</span></span><br><span class="line"><span class="params">                       HttpSession session)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sessionCode</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;vcode&quot;</span>).toString;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sessionEmail</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;uemail&quot;</span>).toString;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sessionCode == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;验证码为空&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!sessionCode.equals(code)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;验证码错误！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!sessionEmail.equals(email)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;请获取验证码&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="springboot-validation-接口参数校验"><a class="markdownIt-Anchor" href="#springboot-validation-接口参数校验"></a> SpringBoot Validation 接口参数校验</h1><h2 id="validation"><a class="markdownIt-Anchor" href="#validation"></a> Validation</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="方法1参数前注解"><a class="markdownIt-Anchor" href="#方法1参数前注解"></a> 方法1：参数前注解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Validation</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeController</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/submit&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">submit</span><span class="params">(<span class="meta">@Length(min = 3)</span> String username, <span class="meta">@Length(min = 8)</span> String password)</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法2entity注解"><a class="markdownIt-Anchor" href="#方法2entity注解"></a> 方法2：Entity注解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeEntity</span> &#123;</span><br><span class="line">    <span class="meta">@Length(min = 3)</span></span><br><span class="line">    String username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Validation</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeController</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/submit&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">submit</span><span class="params">(<span class="meta">@Valid</span> String username, <span class="meta">@Valid</span> String password)</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="swagger-自动接口文档"><a class="markdownIt-Anchor" href="#swagger-自动接口文档"></a> Swagger 自动接口文档</h1><h2 id="springdoc"><a class="markdownIt-Anchor" href="#springdoc"></a> SpringDoc</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springdoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问<code>localhost/swagger-ui/index.html</code>即可查看文档。</p><h2 id="添加文档说明"><a class="markdownIt-Anchor" href="#添加文档说明"></a> 添加文档说明</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> OpenAPI <span class="title function_">springDocOpenAPI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OpenAPI</span>().info(<span class="keyword">new</span> <span class="title class_">Info</span>()</span><br><span class="line">                        .title(<span class="string">&quot;Title of your Document&quot;</span>)</span><br><span class="line">                        .description(<span class="string">&quot;Description of your Document&quot;</span>)</span><br><span class="line">                        .version(<span class="string">&quot;Version&quot;</span>)   <span class="comment">// 当前API版本</span></span><br><span class="line">                        .license(<span class="keyword">new</span> <span class="title class_">License</span>().name(<span class="string">&quot;License Name&quot;</span>)</span><br><span class="line">                                .url(<span class="string">&quot;https://your.url&quot;</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用@Tag注解来添加Controller描述信息</span></span><br><span class="line"><span class="meta">@Tag(name = &quot;XX功能相关&quot;, description = &quot;包括 ... 等操作。&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeController</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@ApiResponses(&#123;</span></span><br><span class="line"><span class="meta">           @ApiResponse(responseCode = &quot;200&quot;, description = &quot;测试成功&quot;),</span></span><br><span class="line"><span class="meta">           @ApiResponse(responseCode = &quot;500&quot;, description = &quot;测试失败&quot;)   // 不同返回状态码描述</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;请求用户数据测试接口&quot;)</span>   <span class="comment">// 接口功能描述</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="comment">// 请求参数描述和样例</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@Parameter(description = &quot;测试文本数据&quot;, example = &quot;KFCvivo50&quot;)</span> <span class="meta">@RequestParam</span> String text)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用@Hidden忽略接口</span></span><br><span class="line">    <span class="meta">@Hidden</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">helperMethod</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Schema(description = &quot;用户信息实体类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Schema(description = &quot;用户编号&quot;)</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="meta">@Schema(description = &quot;用户名称&quot;)</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="meta">@Schema(description = &quot;用户邮箱&quot;)</span></span><br><span class="line">    String email;</span><br><span class="line">    <span class="meta">@Schema(description = &quot;用户密码&quot;)</span></span><br><span class="line">    String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成环境一键关闭接口文档"><a class="markdownIt-Anchor" href="#生成环境一键关闭接口文档"></a> 生成环境一键关闭接口文档</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">springdoc:</span></span><br><span class="line">  <span class="attr">api-docs:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h1 id="jpa"><a class="markdownIt-Anchor" href="#jpa"></a> JPA</h1><blockquote><p>优点：不用手写SQL<br />缺点：使用Hibernate重量级框架；完全屏蔽了底层SQL显示，对后期优化不友好；方法名太长</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="实体类注解映射数据表"><a class="markdownIt-Anchor" href="#实体类注解映射数据表"></a> 实体类注解映射数据表</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span> <span class="comment">// 表示这个类是一个实体类</span></span><br><span class="line"><span class="meta">@Table(name = &quot;your_table_name&quot;)</span> <span class="comment">// 对应的数据库中表名称</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="comment">// 生成策略，这里配置为自增</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;)</span>    <span class="comment">// 对应表中id这一列</span></span><br><span class="line">    <span class="meta">@Id</span>     <span class="comment">// 此属性为主键</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;username&quot;)</span>   <span class="comment">// 对应表中username这一列</span></span><br><span class="line">    String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;password&quot;)</span>   <span class="comment">// 对应表中password这一列</span></span><br><span class="line">    String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用repository帮你编写sql"><a class="markdownIt-Anchor" href="#使用repository帮你编写sql"></a> 使用Repository帮你编写sql</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Account, Integer&gt; &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line">AccountRepository repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>();</span><br><span class="line">    account.setUsername(<span class="string">&quot;小红&quot;</span>);</span><br><span class="line">    account.setPassword(<span class="string">&quot;1234567&quot;</span>);</span><br><span class="line">    System.out.println(repository.save(account).getId());   </span><br><span class="line"><span class="comment">// 使用save来快速插入数据，并且会返回插入的对象，如果存在自增ID，对象的自增id属性会自动被赋值，这就很方便了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="根据方法名自动匹配sql"><a class="markdownIt-Anchor" href="#根据方法名自动匹配sql"></a> 根据方法名自动匹配sql</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Account, Integer&gt; &#123;</span><br><span class="line">    <span class="comment">// 模糊匹配用户名</span></span><br><span class="line">    List&lt;Account&gt; <span class="title function_">findAllByUsernameLike</span><span class="params">(String input)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实体类关联外键"><a class="markdownIt-Anchor" href="#实体类关联外键"></a> 实体类关联外键</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span> <span class="comment">// 表示这个类是一个实体类</span></span><br><span class="line"><span class="meta">@Table(name = &quot;your_table_name&quot;)</span> <span class="comment">// 对应的数据库中表名称</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="comment">// 生成策略，这里配置为自增</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;)</span>    <span class="comment">// 对应表中id这一列</span></span><br><span class="line">    <span class="meta">@Id</span>     <span class="comment">// 此属性为主键</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;username&quot;)</span>   <span class="comment">// 对应表中username这一列</span></span><br><span class="line">    String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;password&quot;)</span>   <span class="comment">// 对应表中password这一列</span></span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JoinColumn(name = &quot;foreign_column_name&quot;)</span>   <span class="comment">// 指定存储外键的字段名称</span></span><br><span class="line">    <span class="meta">@OneToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)</span>    <span class="comment">// 声明为一对一关系</span></span><br><span class="line">    <span class="comment">// LAZY 懒加载（需要时才加载）</span></span><br><span class="line">    <span class="comment">// cascade 级联操作</span></span><br><span class="line">    AccountDetail detail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jpql-自定义-sql"><a class="markdownIt-Anchor" href="#jpql-自定义-sql"></a> JPQL 自定义 SQL</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;Account, Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span> <span class="comment">// DML操作需要事务环境，可以不在这里声明，但是调用时一定要处于事务环境下</span></span><br><span class="line">        <span class="meta">@Modifying</span> <span class="comment">// 表示这是DML操作</span></span><br><span class="line">    <span class="comment">/* 使用实体类 */</span></span><br><span class="line">    <span class="meta">@Query(&quot;update Account set password = ?2 where id = ?1&quot;)</span></span><br><span class="line">    <span class="comment">// 这里操作的是一个实体类对应的表，参数使用?代表，后面接第n个参数</span></span><br><span class="line">    <span class="comment">/* 使用原生写法 */</span></span><br><span class="line">    <span class="meta">@Query(value = &quot;update users set password = :pwd where username = :name&quot;, nativeQuery = true)</span> </span><br><span class="line">    <span class="comment">// 使用原生SQL，和Mybatis一样，这里使用 :名称 表示参数，当然也可以继续用上面那种方式。</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updatePasswordByUsername</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String username, //我们可以使用<span class="meta">@Param</span>指定名称</span></span><br><span class="line"><span class="params">                                 <span class="meta">@Param(&quot;pwd&quot;)</span> String newPassword)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="mybatisplus"><a class="markdownIt-Anchor" href="#mybatisplus"></a> MyBatisPlus</h1><blockquote><p>是国内开发的用于增强MyBatis的<strong>非侵入型</strong>框架。相当于JPA+MyBatis。</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="映射实体类继承basemapper"><a class="markdownIt-Anchor" href="#映射实体类继承basemapper"></a> 映射实体类，继承BaseMapper</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span>  <span class="comment">//对应的表名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span>   <span class="comment">//对应的主键</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="meta">@TableField(&quot;name&quot;)</span>   <span class="comment">//对应的字段</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="meta">@TableField(&quot;email&quot;)</span></span><br><span class="line">    String email;</span><br><span class="line">    <span class="meta">@TableField(&quot;password&quot;)</span></span><br><span class="line">    String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">      <span class="comment">// 使用方式与JPA极其相似，同样是继承一个基础的模版Mapper</span></span><br><span class="line">      <span class="comment">// 这个模版里面提供了预设的大量方法直接使用，跟JPA如出一辙</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂条件wrapper"><a class="markdownIt-Anchor" href="#复杂条件wrapper"></a> 复杂条件Wrapper</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();    <span class="comment">// 复杂查询可以使用QueryWrapper来完成</span></span><br><span class="line">wrapper</span><br><span class="line">    .select(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;email&quot;</span>, <span class="string">&quot;password&quot;</span>)    <span class="comment">// 可以自定义选择哪些字段</span></span><br><span class="line">    .ge(<span class="string">&quot;id&quot;</span>, <span class="number">2</span>)                 <span class="comment">// 选择判断id大于等于1的所有数据</span></span><br><span class="line">    .orderByDesc(<span class="string">&quot;id&quot;</span>);   <span class="comment">// 根据id字段进行降序排序</span></span><br><span class="line">System.out.println(mapper.selectList(wrapper));   <span class="comment">// Mapper同样支持使用QueryWrapper进行查询</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="打印输出"><a class="markdownIt-Anchor" href="#打印输出"></a> 打印输出</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><h2 id="iservice"><a class="markdownIt-Anchor" href="#iservice"></a> IService</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">      <span class="comment">// 除了继承模版，我们也可以把它当成普通Service添加自己需要的方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Service</span>   <span class="comment">// 需要继承ServiceImpl才能实现那些默认的CRUD方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="根据数据库生成代码"><a class="markdownIt-Anchor" href="#根据数据库生成代码"></a> 根据数据库生成代码</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    FastAutoGenerator</span><br><span class="line">            .create(<span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>.Builder(dataSource))</span><br><span class="line">            .globalConfig(builder -&gt; &#123;</span><br><span class="line">                builder.author(<span class="string">&quot;author&quot;</span>);              <span class="comment">// 作者信息，一会会变成注释</span></span><br><span class="line">                builder.commentDate(<span class="string">&quot;YY-MM-DD&quot;</span>);  <span class="comment">// 日期信息，一会会变成注释</span></span><br><span class="line">                builder.outputDir(<span class="string">&quot;src/main/java&quot;</span>); <span class="comment">// 输出目录设置为当前项目的目录</span></span><br><span class="line">            &#125;)</span><br><span class="line">            </span><br><span class="line">            .packageConfig(builder -&gt; builder.parent(<span class="string">&quot;com.example&quot;</span>))</span><br><span class="line">            .strategyConfig(builder -&gt; &#123;</span><br><span class="line">                <span class="comment">// 设置为所有Mapper添加@Mapper注解</span></span><br><span class="line">                builder</span><br><span class="line">                        .mapperBuilder()</span><br><span class="line">                        .mapperAnnotation(Mapper.class)</span><br><span class="line">                        .build();</span><br><span class="line">                &#125;)</span><br><span class="line">            .execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;springboot-mail-邮箱验证码&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#springboot-mail-邮箱验证码&quot;&gt;&lt;/a&gt; SpringBoot Mail 邮箱验证码&lt;/h1&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-mail&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spring:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;mail:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;host:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;your.SMTP.host&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;username:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;your_server_email@email.com&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;password:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;your_passowrd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Resource&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JavaMailSender sender;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@PostMapping(&amp;quot;/verification-email&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title function_&quot;&gt;sendVerificationEmail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;meta&quot;&gt;@RequestParam&lt;/span&gt; String targetEmail,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;                                    HttpSession session)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;SimpleMailMessage&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;SimpleMailMessage&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        message.setSubject(EMAIL_TITLE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;vCode&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; getVerificationCode();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        session.setAttribute(&lt;span class=&quot;string&quot;&gt;&amp;quot;vcode&amp;quot;&lt;/span&gt;, vCode);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        session.setAttribute(&lt;span class=&quot;string&quot;&gt;&amp;quot;uemail&amp;quot;&lt;/span&gt;, email);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        message.setText(EMAIL_CONTEXT + code);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        message.setTo(targetEmail);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        message.setFrom(EMAIL_SERVEREMAIL); &lt;span class=&quot;comment&quot;&gt;// 与配置文件中的保持一致&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sender.send(message);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;发送成功&amp;quot;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 前端弹窗可以接受此参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@PostMapping(&amp;quot;/register&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title function_&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;meta&quot;&gt;@RequestParam&lt;/span&gt; String username,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;                       &lt;span class=&quot;meta&quot;&gt;@RequestParam&lt;/span&gt; String email,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;                       &lt;span class=&quot;meta&quot;&gt;@RequestParam&lt;/span&gt; String code,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;                       &lt;span class=&quot;meta&quot;&gt;@RequestParam&lt;/span&gt; String password,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;                       HttpSession session)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;sessionCode&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; session.getAttribute(&lt;span class=&quot;string&quot;&gt;&amp;quot;vcode&amp;quot;&lt;/span&gt;).toString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;sessionEmail&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; session.getAttribute(&lt;span class=&quot;string&quot;&gt;&amp;quot;uemail&amp;quot;&lt;/span&gt;).toString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (sessionCode == &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;验证码为空&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!sessionCode.equals(code)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;验证码错误！&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!sessionEmail.equals(email)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;请获取验证码&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="笔记" scheme="http://simuleite.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Spring" scheme="http://simuleite.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot笔记</title>
    <link href="http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/Spring/SpringBoot%E7%AC%94%E8%AE%B0/"/>
    <id>http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/Spring/SpringBoot%E7%AC%94%E8%AE%B0/</id>
    <published>2024-12-20T16:00:00.000Z</published>
    <updated>2025-01-04T02:49:41.337Z</updated>
    
    <content type="html"><![CDATA[<h1 id="applicationproperties"><a class="markdownIt-Anchor" href="#applicationproperties"></a> application.properties</h1><h2 id="property形式"><a class="markdownIt-Anchor" href="#property形式"></a> Property形式</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">80 // 端口号</span></span><br><span class="line"><span class="attr">aruge.arugement</span>=<span class="string">value</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;&#123;argue.argument&#125;&quot;)</span></span><br><span class="line">String argu;</span><br></pre></td></tr></table></figure><h2 id="yaml形式"><a class="markdownIt-Anchor" href="#yaml形式"></a> YAML形式</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db_name</span></span><br><span class="line">        <span class="attr">username:</span></span><br><span class="line">        <span class="attr">password:</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.Driver</span></span><br><span class="line">    <span class="attr">mvc:</span></span><br><span class="line">        <span class="attr">static-path-pattern:</span> <span class="string">/static/**</span></span><br><span class="line">    <span class="attr">security:</span></span><br><span class="line">        <span class="attr">filter:</span></span><br><span class="line">            <span class="attr">order:</span> <span class="number">-100</span> <span class="comment"># Spring Security Filter 优先级</span></span><br><span class="line">        <span class="attr">user:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">            <span class="attr">password:</span> <span class="string">&#x27;Abc123.&#x27;</span></span><br><span class="line">            <span class="attr">roles:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">admin</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">user</span></span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="package"><a class="markdownIt-Anchor" href="#package"></a> Package</h1><h2 id="jar"><a class="markdownIt-Anchor" href="#jar"></a> JAR</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn package</span><br><span class="line">java -jar yourProj.jar</span><br></pre></td></tr></table></figure><h1 id="war"><a class="markdownIt-Anchor" href="#war"></a> WAR</h1><ol><li>排除SpringBoot内嵌Tomcat</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用exclusion排除 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>添加Servlet依赖</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>将打包方式修改为WAR</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>修改主类Application</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> <span class="keyword">extends</span> <span class="title class_">SpringBootServletInitializer</span> &#123;  <span class="comment">//继承专用的初始化器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//重写configure方法，完成启动类配置</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> SpringApplicationBuilder <span class="title function_">configure</span><span class="params">(SpringApplicationBuilder builder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> builder.sources(DemoApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>打包</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure><h2 id="graalvm-native-exe"><a class="markdownIt-Anchor" href="#graalvm-native-exe"></a> GraalVM Native EXE</h2><blockquote><p>[!WARNING]<br />Mybatis目前不支持Native-Image</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn -Pnative -DskipTests native:compile</span><br></pre></td></tr></table></figure><h1 id="slf4j"><a class="markdownIt-Anchor" href="#slf4j"></a> SLF4J</h1><p>Simple Logging <strong>Facade</strong> for Java</p><p>日志门面，如Slf4j，是把不同的日志系统的实现进行了具体的抽象化。最终日志的格式、记录级别、输出方式等都要通过接口绑定的具体的日志系统，如log4j、jul来实现。</p><h1 id="测试-生成环境隔离"><a class="markdownIt-Anchor" href="#测试-生成环境隔离"></a> 测试-生成环境隔离</h1><p>SpringBoot只会读取<code>application.yml</code>或<code>application.properties</code>，可以在文件中指定使用不同的配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">profiles:</span></span><br><span class="line">        <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>然后编写一份<code>application-dev.yml</code></p><h2 id="maven独立打包环境配置"><a class="markdownIt-Anchor" href="#maven独立打包环境配置"></a> Maven独立打包环境配置</h2><blockquote><p>[!Info]<br />切换配置文件后，一定要刷新！</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--分别设置开发，生产环境--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开发环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 打包 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">environment</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 生产环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 不打包 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>false<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">environment</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--排除配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--先排除所有的配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--使用通配符，当然可以定义多个exclude标签进行排除--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>application*.yml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--根据激活条件引入打包所需的配置和文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入所需环境的配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>application.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--根据maven选择环境导入配置文件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>application-$&#123;environment&#125;.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">&#x27;@environment@&#x27;</span>  <span class="comment"># 匹配maven激活的环境</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;applicationproperties&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#applicationproperties&quot;&gt;&lt;/a&gt; application.properties&lt;/h1&gt;
&lt;h2 id=&quot;property形式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#property形式&quot;&gt;&lt;/a&gt; Property形式&lt;/h2&gt;
&lt;figure class=&quot;highlight properties&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;server.port&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;80 // 端口号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;aruge.arugement&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Value(&amp;quot;&amp;#123;argue.argument&amp;#125;&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String argu;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;yaml形式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#yaml形式&quot;&gt;&lt;/a&gt; YAML形式&lt;/h2&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;server:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spring:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;datasource:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;url:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;jdbc:mysql://localhost:3306/db_name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;username:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;password:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;driver-class-name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;com.mysql.cj.Driver&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;mvc:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;static-path-pattern:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/static/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;security:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;filter:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;order:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-100&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Spring Security Filter 优先级&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;user:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;admin&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;password:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;Abc123.&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;roles:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;admin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;user&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="笔记" scheme="http://simuleite.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Spring" scheme="http://simuleite.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringSecurity笔记</title>
    <link href="http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/Spring/SpringSecurity%E7%AC%94%E8%AE%B0/"/>
    <id>http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/Spring/SpringSecurity%E7%AC%94%E8%AE%B0/</id>
    <published>2024-12-04T16:00:00.000Z</published>
    <updated>2025-01-04T02:49:55.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-security-初始化"><a class="markdownIt-Anchor" href="#spring-security-初始化"></a> Spring Security 初始化</h1><ol><li>导入依赖</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建<code>SecurityInitializer</code></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.init</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityInitializer</span> <span class="keyword">extends</span> <span class="title class_">AbstractSecurityWebApplicationInitializer</span> &#123;</span><br><span class="line">    <span class="comment">//不用重写任何内容</span></span><br><span class="line">      <span class="comment">//这里实际上会自动注册一个Filter，SpringSecurity底层就是依靠N个过滤器实现的，我们之后再探讨</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>创建配置类</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.config</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span>   <span class="comment">//开启WebSecurity相关功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> &#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><code>MainInitializer</code>添加配置文件</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;MainConfiguration.class, SecurityConfiguration.class&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="post表单认证"><a class="markdownIt-Anchor" href="#post表单认证"></a> Post表单认证</h1><p>在POST请求中需要携带页面中的csrfToken，否则一律进行拦截操作</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">th:id</span>=<span class="string">&quot;$&#123;_csrf.getParameterName()&#125;&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;_csrf.token&#125;&quot;</span> <span class="attr">hidden</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="密码加密"><a class="markdownIt-Anchor" href="#密码加密"></a> 密码加密</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> &#123;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">//将BCryptPasswordEncoder直接注册为Bean，Security会自动进行选择</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">encoder.encode(yourPassword);</span><br></pre></td></tr></table></figure><h1 id="关闭csfr"><a class="markdownIt-Anchor" href="#关闭csfr"></a> 关闭CSFR</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> http</span><br><span class="line">                .csfr(conf -&gt; &#123;</span><br><span class="line">                    <span class="comment">// 关闭CSFR</span></span><br><span class="line">                    conf.disable();</span><br><span class="line">                &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自定义登录页"><a class="markdownIt-Anchor" href="#自定义登录页"></a> 自定义登录页</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> http</span><br><span class="line">                <span class="comment">// 验证请求拦截和放行配置</span></span><br><span class="line">                .authorizeHttpRequests(auth -&gt; &#123;</span><br><span class="line">                    <span class="comment">// 将所有请求全部拦截，一律需要验证</span></span><br><span class="line">                    auth.anyRequest().authenticated();    </span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">// 表单登录相关配置</span></span><br><span class="line">                .formLogin(conf -&gt; &#123;</span><br><span class="line">                    conf.loginPage(<span class="string">&quot;/login&quot;</span>);   <span class="comment">// 将登录页设置为我们自己的登录页面</span></span><br><span class="line">                    conf.loginProcessingUrl(<span class="string">&quot;/doLogin&quot;</span>); <span class="comment">// 登录表单提交的地址，可以自定义</span></span><br><span class="line">                    conf.defaultSuccessUrl(<span class="string">&quot;/&quot;</span>);   <span class="comment">// 登录成功后跳转的页面</span></span><br><span class="line">                    conf.permitAll();    <span class="comment">// 将登录相关的地址放行，否则未登录的用户无法进入登录界面</span></span><br><span class="line">                      <span class="comment">// 用户名和密码的表单字段名称</span></span><br><span class="line">                    conf.usernameParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">                    conf.passwordParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">// 退出登录</span></span><br><span class="line">                .logout(conf -&gt; &#123;</span><br><span class="line">                    ...</span><br><span class="line">                &#125;)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="记住密码"><a class="markdownIt-Anchor" href="#记住密码"></a> 记住密码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityFilterChain <span class="title function_">filterChain</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> http</span><br><span class="line">                .rememberMe(conf -&gt; &#123;</span><br><span class="line">                    conf.alwaysRemember(<span class="literal">false</span>);</span><br><span class="line">                &#125;)</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;spring-security-初始化&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#spring-security-初始化&quot;&gt;&lt;/a&gt; Spring Security 初始化&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;导入依赖&lt;/li&gt;
&lt;/ol&gt;</summary>
      
    
    
    
    
    <category term="笔记" scheme="http://simuleite.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Spring" scheme="http://simuleite.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC笔记</title>
    <link href="http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/Spring/SpringMVC%E7%AC%94%E8%AE%B0/"/>
    <id>http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/Spring/SpringMVC%E7%AC%94%E8%AE%B0/</id>
    <published>2024-12-03T16:00:00.000Z</published>
    <updated>2025-01-04T02:49:51.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mvc"><a class="markdownIt-Anchor" href="#mvc"></a> MVC</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="controller"><a class="markdownIt-Anchor" href="#controller"></a> Controller</h1><h2 id="页面"><a class="markdownIt-Anchor" href="#页面"></a> 页面</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>   <span class="comment">//直接添加注解即可</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index&quot;)</span>   <span class="comment">//直接填写访问路径</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        modelAndView.getModel().put(<span class="string">&quot;arg&quot;</span>, <span class="string">&quot;value&quot;</span>);   <span class="comment">//将name传递给Model</span></span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">          <span class="comment">//返回后会经过视图解析器进行处理</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/index&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(Model model)</span>&#123;  <span class="comment">//这里不仅仅可以是Model，还可以是Map、ModelMap</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;arg&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="重定向"><a class="markdownIt-Anchor" href="#重定向"></a> 重定向</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:page&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="请求转发"><a class="markdownIt-Anchor" href="#请求转发"></a> 请求转发</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:home&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="bean的web作用域"><a class="markdownIt-Anchor" href="#bean的web作用域"></a> Bean的Web作用域</h1><p>Bean的作用域：</p><ol><li>Singleton</li><li>Prototype</li><li>Request HTTP请求产生新实例，结束后Bean消失</li><li>Session 每一个会话</li><li>Global Session</li></ol><h1 id="restful"><a class="markdownIt-Anchor" href="#restful"></a> RESTFul</h1><blockquote><p>一种设计风格。RESTful风格的设计允许将参数通过URL拼接传到服务端。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/mvc/index/13579</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/index/&#123;str&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(<span class="meta">@PathVariable</span> String str)</span> &#123;</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文件上传"><a class="markdownIt-Anchor" href="#文件上传"></a> 文件上传</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainInitializer</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">customizeRegistration</span><span class="params">(ServletRegistration.Dynamic registration)</span> &#123;</span><br><span class="line">          <span class="comment">// 直接通过registration配置Multipart相关配置，必须配置临时上传路径，建议选择方便打开的</span></span><br><span class="line">        <span class="comment">// 同样可以设置其他属性：maxFileSize, maxRequestSize, fileSizeThreshold</span></span><br><span class="line">        registration.setMultipartConfig(<span class="keyword">new</span> <span class="title class_">MultipartConfigElement</span>(<span class="string">&quot;/path/to/save&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller模板</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/upload&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestParam</span> MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">fileObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;filename.png&quot;</span>);</span><br><span class="line">    file.transferTo(fileObj);</span><br><span class="line">    System.out.println(<span class="string">&quot;用户上传的文件已保存到：&quot;</span>+fileObj.getAbsolutePath());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;文件上传成功！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端模板</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;upload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mvc&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#mvc&quot;&gt;&lt;/a&gt; MVC&lt;/h1&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla</summary>
      
    
    
    
    
    <category term="笔记" scheme="http://simuleite.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Spring" scheme="http://simuleite.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb笔记</title>
    <link href="http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/JavaWeb%E7%AC%94%E8%AE%B0/"/>
    <id>http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/JavaWeb%E7%AC%94%E8%AE%B0/</id>
    <published>2024-11-27T16:00:00.000Z</published>
    <updated>2025-01-08T02:02:19.175Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tomcat"><a class="markdownIt-Anchor" href="#tomcat"></a> Tomcat</h1><h2 id="jre报错"><a class="markdownIt-Anchor" href="#jre报错"></a> JRE报错</h2><p>一般教程会让我们配置<code>JAVA_HOME</code>和<code>JRE_HOME</code>，然后启动Tomcat；<br />然而，在JDK9以后，就不默认包含JRE了。<br />此时，我们使用命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jlink --module-path jmods --add-modules java.desktop --output jre</span><br></pre></td></tr></table></figure><p>生成一个JRE后，启动Tomcat，就会报错：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">WARNING: Unknown module: java.rmi specified to --add-opens</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: java/util/logging/Logger</span><br><span class="line">    at org.apache.juli.logging.DirectJDKLog.&lt;init&gt;(DirectJDKLog.java:61)</span><br><span class="line">    at org.apache.juli.logging.DirectJDKLog.getInstance(DirectJDKLog.java:181)</span><br><span class="line">    at org.apache.juli.logging.LogFactory.getInstance(LogFactory.java:133)</span><br><span class="line">    at org.apache.juli.logging.LogFactory.getInstance(LogFactory.java:156)</span><br><span class="line">    at org.apache.juli.logging.LogFactory.getLog(LogFactory.java:211)</span><br><span class="line">    at org.apache.catalina.startup.Bootstrap.&lt;clinit&gt;(Bootstrap.java:49)</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: java.util.logging.Logger</span><br><span class="line">    at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)</span><br><span class="line">    at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)</span><br><span class="line">    at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:525)</span><br><span class="line">    ... 6 more</span><br></pre></td></tr></table></figure><p>这时候，只需要把jre文件和<code>JRE_HOME</code>环境变量删除，Tomcat就能正常启动</p><span id="more"></span><h1 id="cookies"><a class="markdownIt-Anchor" href="#cookies"></a> Cookies</h1><h2 id="remember-me"><a class="markdownIt-Anchor" href="#remember-me"></a> Remember-me</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;记住密码&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember-me&quot;</span>&gt;</span></span><br><span class="line">        记住密码</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Post请求的表单数据</span></span><br><span class="line">Map&lt;String, String[]&gt; reqMap = req.getParameterMap();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(map.containsKey(<span class="string">&quot;remember-me&quot;</span>))&#123;   <span class="comment">//若勾选了勾选框，那么会此表单信息</span></span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">cookie_username</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">    cookie_username.setMaxAge(<span class="number">30</span>);</span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">cookie_password</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;password&quot;</span>, password);</span><br><span class="line">    cookie_password.setMaxAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    resp.addCookie(cookie_username);</span><br><span class="line">    resp.addCookie(cookie_password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    Cookie[] cookies = req.getCookies();</span><br><span class="line">    <span class="keyword">if</span>(cookies != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">            <span class="keyword">if</span>(cookie.getName().equals(<span class="string">&quot;username&quot;</span>)) username = cookie.getValue();</span><br><span class="line">            <span class="keyword">if</span>(cookie.getName().equals(<span class="string">&quot;password&quot;</span>)) password = cookie.getValue();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(username != <span class="literal">null</span> &amp;&amp; password != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 登陆校验</span></span><br><span class="line">            <span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession(<span class="literal">true</span>))&#123;</span><br><span class="line">                <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">                <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.getUser(username, password);</span><br><span class="line">                <span class="keyword">if</span>(user != <span class="literal">null</span>)&#123;</span><br><span class="line">                    resp.sendRedirect(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;   <span class="comment">// 直接返回</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    req.getRequestDispatcher(<span class="string">&quot;/&quot;</span>).forward(req, resp);   <span class="comment">// 正常情况还是转发给默认的Servlet帮我们返回静态页面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="session"><a class="markdownIt-Anchor" href="#session"></a> Session</h2><blockquote><p>Session基于Cookies实现。Session使我们能够辨别不同用户的会话。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line"></span><br><span class="line">session.setAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="servlet"><a class="markdownIt-Anchor" href="#servlet"></a> Servlet</h1><p>一个Servlet的生命周期为：</p><ul><li>首先执行构造方法完成 Servlet 初始化</li><li>Servlet 初始化后调用 <code>init ()</code> 方法。</li><li>Servlet 调用 <code>service()</code> 方法来处理客户端的请求。</li><li>Servlet 销毁前调用 <code>destroy()</code> 方法。</li><li>最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</li></ul><blockquote><p>Servlet 用于动态网页响应，使后端数据能够与前端通信。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    doGet(req, resp) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="上传文件"><a class="markdownIt-Anchor" href="#上传文件"></a> 上传文件</h2><p><a href="http://xn--commons-oc6k521z.io">使用commons.io</a></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>前端表单设置<code>multipart</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- multipart 传文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;file&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;test-file&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后端定义Post方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MultipartConfig</span> <span class="comment">// 文件传输注解</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/file&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">FileOutputStream</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;/Users/nagocoler/Documents/IdeaProjects/WebTest/test.png&quot;</span>))&#123;</span><br><span class="line">            <span class="type">Part</span> <span class="variable">part</span> <span class="operator">=</span> req.getPart(<span class="string">&quot;test-file&quot;</span>);</span><br><span class="line">            IOUtils.copy(part.getInputStream(), stream);</span><br><span class="line">            resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;文件上传成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="context"><a class="markdownIt-Anchor" href="#context"></a> Context</h2><blockquote><p>ServeletContext属于整个Web应用程序，全局唯一</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ServeltContext</span> <span class="variable">context</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">context.setAttribute(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="filter"><a class="markdownIt-Anchor" href="#filter"></a> Filter</h1><blockquote><p>Filter相当于在所有访问前加了一堵墙，来自浏览器的所有访问请求都会首先经过Filter。</p></blockquote><p>只有Filter允许通过的请求，才可以顺利到达Servlet。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFileter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(req, resp, chain)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        chain.doFilter(req, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;tomcat&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#tomcat&quot;&gt;&lt;/a&gt; Tomcat&lt;/h1&gt;
&lt;h2 id=&quot;jre报错&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#jre报错&quot;&gt;&lt;/a&gt; JRE报错&lt;/h2&gt;
&lt;p&gt;一般教程会让我们配置&lt;code&gt;JAVA_HOME&lt;/code&gt;和&lt;code&gt;JRE_HOME&lt;/code&gt;，然后启动Tomcat；&lt;br /&gt;
然而，在JDK9以后，就不默认包含JRE了。&lt;br /&gt;
此时，我们使用命令&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;jlink --module-path jmods --add-modules java.desktop --output jre&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;生成一个JRE后，启动Tomcat，就会报错：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;WARNING: Unknown module: java.rmi specified to --add-opens&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Exception in thread &amp;quot;main&amp;quot; java.lang.NoClassDefFoundError: java/util/logging/Logger&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at org.apache.juli.logging.DirectJDKLog.&amp;lt;init&amp;gt;(DirectJDKLog.java:61)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at org.apache.juli.logging.DirectJDKLog.getInstance(DirectJDKLog.java:181)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at org.apache.juli.logging.LogFactory.getInstance(LogFactory.java:133)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at org.apache.juli.logging.LogFactory.getInstance(LogFactory.java:156)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at org.apache.juli.logging.LogFactory.getLog(LogFactory.java:211)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at org.apache.catalina.startup.Bootstrap.&amp;lt;clinit&amp;gt;(Bootstrap.java:49)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Caused by: java.lang.ClassNotFoundException: java.util.logging.Logger&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:525)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ... 6 more&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这时候，只需要把jre文件和&lt;code&gt;JRE_HOME&lt;/code&gt;环境变量删除，Tomcat就能正常启动&lt;/p&gt;</summary>
    
    
    
    
    <category term="笔记" scheme="http://simuleite.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis使用</title>
    <link href="http://simuleite.github.io/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/Mybatis%E4%BD%BF%E7%94%A8/"/>
    <id>http://simuleite.github.io/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/Mybatis%E4%BD%BF%E7%94%A8/</id>
    <published>2024-11-22T16:00:00.000Z</published>
    <updated>2025-01-05T02:09:08.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mybatis-configxml"><a class="markdownIt-Anchor" href="#mybatis-configxml"></a> mybatis-config.xml</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span> <span class="comment">&lt;!-- 设置环境 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;驱动类（含包名）&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;数据库连接URL&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;用户名&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;密码&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="util"><a class="markdownIt-Anchor" href="#util"></a> Util</h1><p>一般只需要创建一次，所以创建一个工具类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在类加载时就进行创建</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一个新的会话</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> autoCommit 是否开启自动提交（跟JDBC是一样的，如果不自动提交，则会变成事务操作）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SqlSession对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSession</span><span class="params">(<span class="type">boolean</span> autoCommit)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession(autoCommit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>在其他函数里直接使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> MybatisUtil.getSession(<span class="literal">true</span>)) &#123;</span><br><span class="line">    session.selectOne(<span class="string">&quot;id&quot;</span>, argu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="mapper"><a class="markdownIt-Anchor" href="#mapper"></a> Mapper</h1><h2 id="原始方法"><a class="markdownIt-Anchor" href="#原始方法"></a> 原始方法</h2><ol><li>在<code>mybatis-config.xml</code>中添加</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:mappers/TestMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    这里用的是url，也可以使用其他类型，我们会在后面讲解    --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>定义<code>TestMapper.xml</code></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.test.mapper.TestMapper&quot;</span>&gt;</span> <span class="comment">&lt;!-- 命名空间指明mapper接口名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudent&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.test.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- id：函数名；resultType：返回类型 --&gt;</span></span><br><span class="line">        select * from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectOneStudent&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.test.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- id：函数名；resultType：返回类型 --&gt;</span></span><br><span class="line">        select * from student where sid = #&#123;sid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;mybatis-config.xml&quot;</span>)); <span class="comment">// config 文件路径</span></span><br><span class="line">    <span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>))&#123;</span><br><span class="line">        List&lt;Student&gt; student = sqlSession.selectList(<span class="string">&quot;selectStudent&quot;</span>); <span class="comment">// xml id</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu3</span> <span class="operator">=</span> sqlSession.selectOne(<span class="string">&quot;selectOneStudent&quot;</span>, <span class="number">3</span>); <span class="comment">// 传参</span></span><br><span class="line">        student.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口方法"><a class="markdownIt-Anchor" href="#接口方法"></a> 接口方法</h2><ol><li>在<code>mybatis-config.xml</code>中添加</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/test/mapper/TestMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>定义<code>TestMapper.xml</code>和接口<code>TestMapper.java</code></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestMapper</span> &#123;</span><br><span class="line">    List&lt;Student&gt; <span class="title function_">selectStudent</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-2"><a class="markdownIt-Anchor" href="#使用-2"></a> 使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtil.getSession(<span class="literal">true</span>))&#123;</span><br><span class="line">        <span class="type">TestMapper</span> <span class="variable">testMapper</span> <span class="operator">=</span> sqlSession.getMapper(TestMapper.class);</span><br><span class="line">        List&lt;Student&gt; student = testMapper.selectStudent(); <span class="comment">// 已经定义好了类型</span></span><br><span class="line">        student.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解方法"><a class="markdownIt-Anchor" href="#注解方法"></a> 注解方法</h2><ol><li>在<code>mybatis-config.xml</code>中添加</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.test.mapper.TestMapper&quot;</span>/&gt;</span> </span><br><span class="line">    // 单个java class</span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">package</span>=<span class="string">&quot;com.test.mapper&quot;</span>/&gt;</span> </span><br><span class="line">    // 整个包</span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用-3"><a class="markdownIt-Anchor" href="#使用-3"></a> 使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">        @Result(id = true, column = &quot;id&quot;, property = &quot;sid&quot;, </span></span><br><span class="line"><span class="meta">                one = @One(select = &quot;method&quot;)),</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from student&quot;)</span> <span class="comment">// 注解</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">selectStudent</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from student where sid = #&#123;s&#125;, bid = #&#123;book.bid&#125;&quot;)</span></span><br><span class="line">    Student <span class="title function_">selectStudentBySid</span><span class="params">(<span class="meta">@Param(&quot;s&quot;)</span> <span class="type">int</span> sid, <span class="meta">@Param(&quot;book&quot;)</span> Book book)</span> <span class="comment">// 标明变量</span></span><br><span class="line"></span><br><span class="line">    Type <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="动态sql"><a class="markdownIt-Anchor" href="#动态sql"></a> <a href="https://mybatis.org/mybatis-3/dynamic-sql.html">动态SQL</a></h1><h2 id="if"><a class="markdownIt-Anchor" href="#if"></a> if</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;argu == value&quot;</span>&gt;</span></span><br><span class="line">    // your sql query.</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;mybatis-configxml&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#mybatis-configxml&quot;&gt;&lt;/a&gt; mybatis-config.xml&lt;/h1&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?xml version=&lt;span class=&quot;string&quot;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; encoding=&lt;span class=&quot;string&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt; ?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE &lt;span class=&quot;keyword&quot;&gt;configuration&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;PUBLIC&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;-//mybatis.org//DTD Config 3.0//EN&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;quot;http://mybatis.org/dtd/mybatis-3-config.dtd&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;environments&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;default&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;development&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;environment&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;development&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 设置环境 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;transactionManager&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;JDBC&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dataSource&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;POOLED&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;driver&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;$&amp;#123;驱动类（含包名）&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;url&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;$&amp;#123;数据库连接URL&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;username&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;$&amp;#123;用户名&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;$&amp;#123;密码&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dataSource&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;environment&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;environments&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;util&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#util&quot;&gt;&lt;/a&gt; Util&lt;/h1&gt;
&lt;p&gt;一般只需要创建一次，所以创建一个工具类&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;MybatisUtil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//在类加载时就进行创建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; SqlSessionFactory sqlSessionFactory;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sqlSessionFactory = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;SqlSessionFactoryBuilder&lt;/span&gt;().build(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;FileInputStream&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;mybatis-config.xml&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (FileNotFoundException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 获取一个新的会话&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; autoCommit 是否开启自动提交（跟JDBC是一样的，如果不自动提交，则会变成事务操作）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; SqlSession对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; SqlSession &lt;span class=&quot;title function_&quot;&gt;getSession&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; autoCommit)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sqlSessionFactory.openSession(autoCommit);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="基本操作" scheme="http://simuleite.github.io/tags/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
</feed>
