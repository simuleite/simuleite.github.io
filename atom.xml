<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SMULET&#39;s BLOG</title>
  
  
  <link href="http://simuleite.github.io/atom.xml" rel="self"/>
  
  <link href="http://simuleite.github.io/"/>
  <updated>2024-10-17T02:17:21.002Z</updated>
  <id>http://simuleite.github.io/</id>
  
  <author>
    <name>SIMULEITE</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode100 错题本</title>
    <link href="http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/LeetCode100%20%E9%94%99%E9%A2%98%E6%9C%AC/"/>
    <id>http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/LeetCode100%20%E9%94%99%E9%A2%98%E6%9C%AC/</id>
    <published>2024-09-30T16:00:00.000Z</published>
    <updated>2024-10-17T02:17:21.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hash"><a class="markdownIt-Anchor" href="#hash"></a> Hash</h1><h1 id="字母异位词"><a class="markdownIt-Anchor" href="#字母异位词"></a> 字母异位词</h1><p>排序每一个单词，就知道是不是异位词。</p><h2 id="两数之和"><a class="markdownIt-Anchor" href="#两数之和"></a> 两数之和</h2><p>从数组中，找到<code>nums[i] + nums[j] == target</code>，并返回<code>&#123; i, j &#125;</code>。<br />思路是双重循环，遍历每一个元素，求和是否为target。<br />然而，双重循环需要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的复杂度。因此，可以使用一张表，使用<code>containsKey</code>方法识别是否存在当前i的<code>target - nums[i]</code>，即可减少一重循环。</p><h3 id="关键思想"><a class="markdownIt-Anchor" href="#关键思想"></a> 关键思想</h3><p>用Map高效率查找，减少一重循环。</p><h2 id="最长连续序列"><a class="markdownIt-Anchor" href="#最长连续序列"></a> 最长连续序列</h2><p>从乱序数组中，找到最长连续（数组中不一定连续）的序列。要求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>。<br />首先用数组的值存入哈希表，然后遍历数组，判断<code>map.constains(curNum++)</code>。<br />然而，即使这样还是效率不够高。</p><p>优化</p><ol><li>中间值不进入循环，序列开始值才进入，使用<code>!contains(curNum - 1)</code>判断是否为序列开始值</li><li>去重，不要哈希表，不需要键值对，使用哈希Set，只存储值。</li></ol><h3 id="关键思想-2"><a class="markdownIt-Anchor" href="#关键思想-2"></a> 关键思想</h3><p>去重；不处理中间值</p><h1 id="stack"><a class="markdownIt-Anchor" href="#stack"></a> Stack</h1><h2 id="每日温度"><a class="markdownIt-Anchor" href="#每日温度"></a> 每日温度</h2><p>给一个长度为N的每日温度数组，返回一个数组，记录每一天距离下次升温的天数。</p><p>可以用双重循环，找到比当前温度大的那一天，但是这样效率太低。</p><p>优化：<br />使用栈，存取没有找到升温日的index，找到升温日后，一次性处理完，减少一重循环。</p><h3 id="关键思想-3"><a class="markdownIt-Anchor" href="#关键思想-3"></a> 关键思想</h3><p>使用栈存储未处理的值，找到升温日后一次性处理，减少重复动作。</p><h1 id="list"><a class="markdownIt-Anchor" href="#list"></a> List</h1><h2 id="链表排序"><a class="markdownIt-Anchor" href="#链表排序"></a> 链表排序</h2><p>链表的两种排序方法：插入排序和归并排序。<br />其中，归并排序需要用双指针来找到mid节点。</p><p>注意，链表交换时，不要把<code>temp</code>设置成a或b的引用<code>temp = a/b;</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(ListNode a, ListNode b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a.val; <span class="comment">// 或构造一个新的ListNode，否则就是在操作引用</span></span><br><span class="line">    a.val = b.val;</span><br><span class="line">    b.val = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，快指针的写法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这样可能访问不到fast.next</span></span><br><span class="line"><span class="keyword">if</span> (fast.next != end) fast = fast.next;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="keyword">if</span> (fast != end) fast = fast.next;</span><br></pre></td></tr></table></figure><p>注意，链表的归并排序，不需要一个个赋值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (head1 != <span class="literal">null</span> &amp;&amp; head2 != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (head1.val &lt; head2.val) &#123;</span><br><span class="line">        p.next = head1;</span><br><span class="line">        head1 = head1.next;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        p.next = head2;</span><br><span class="line">        head2 = head2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    p = p.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (head1 != <span class="literal">null</span>) &#123;</span><br><span class="line">    p.next = head1; <span class="comment">// 不需要循环</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (head2 != <span class="literal">null</span>) &#123;</span><br><span class="line">    p.next = head2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，终止条件要熔断有序的链表</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (head.next == end) &#123;</span><br><span class="line">    head.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="删除倒数第n个节点"><a class="markdownIt-Anchor" href="#删除倒数第n个节点"></a> 删除倒数第N个节点</h1><p>24.10.11<br />使用双指针，p2比p1快N个节点，遍历，<code>p2 == null</code>时，p1为要删除的节点</p><h1 id="tree"><a class="markdownIt-Anchor" href="#tree"></a> Tree</h1><h2 id="对称树"><a class="markdownIt-Anchor" href="#对称树"></a> 对称树</h2><p>使用递归解决。对称遍历到两棵树的底部(null)，仍然没有出现不相等的情况，即为对称树。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">checkNode</span><span class="params">(TreeNode left, TreeNode right)</span> &#123;</span><br><span class="line">    <span class="comment">// condition</span></span><br><span class="line">    <span class="keyword">return</span> checkNode(left.left, right.right) &amp;&amp;</span><br><span class="line">           checkNode(left.right, right.left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最大深度"><a class="markdownIt-Anchor" href="#最大深度"></a> 最大深度</h2><p>获得每一个节点的最大深度，root再比较left与right的深度，取最大值即可。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> max(maxDepth(root.left), maxDepth(root.right)) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最长直径"><a class="markdownIt-Anchor" href="#最长直径"></a> 最长直径</h2><p>获取每个节点左右节点的最大深度之和，最大值即为二叉树的最长直径。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> longestDiameter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">maxDepthCache</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 使用缓存</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> maxDepthCache(root.left);</span><br><span class="line">    <span class="type">int</span> <span class="variable">R</span> <span class="operator">=</span> maxDepthCache(root.right);</span><br><span class="line">    longestDiameter = max(longestDiameter, L + R + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> max(L, R) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">diameterOfBinaryTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    longestDiameter = <span class="number">1</span>;</span><br><span class="line">    maxDepthCache(root);</span><br><span class="line">    <span class="keyword">return</span> longestDiameter - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="反转二叉树"><a class="markdownIt-Anchor" href="#反转二叉树"></a> 反转二叉树</h1><p>翻转每一个节点。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> invertTree(root.left);</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> invertTree(root.right);</span><br><span class="line">    root.left = right;</span><br><span class="line">    root.right = left;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="双指针"><a class="markdownIt-Anchor" href="#双指针"></a> 双指针</h1><h2 id="移动0"><a class="markdownIt-Anchor" href="#移动0"></a> 移动0</h2><p>两个指针，<code>i, j</code>，j左边是排序好的数，i用于遍历。<br />遇到非0的数，交换i与j。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hash&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#hash&quot;&gt;&lt;/a&gt; Hash&lt;/h1&gt;
&lt;h1 id=&quot;字母异位词&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#字母异位词&quot;&gt;&lt;/a&gt; 字母异位词&lt;</summary>
      
    
    
    
    
    <category term="笔记" scheme="http://simuleite.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>AI爱外卖</title>
    <link href="http://simuleite.github.io/ComputerScience/%E9%A1%B9%E7%9B%AE/AI%E7%88%B1%E5%A4%96%E5%8D%96/"/>
    <id>http://simuleite.github.io/ComputerScience/%E9%A1%B9%E7%9B%AE/AI%E7%88%B1%E5%A4%96%E5%8D%96/</id>
    <published>2024-09-20T16:00:00.000Z</published>
    <updated>2024-10-09T12:03:43.578Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目心得"><a class="markdownIt-Anchor" href="#项目心得"></a> 项目心得</h1><h2 id="24109"><a class="markdownIt-Anchor" href="#24109"></a> 24.10.9</h2><p>将AliOss换成本地存储。可是一直插入不成功，使用Swagger调试，甚至数据库什么都接受不到！非常诡异的BUG<br />原来，是导入了错误的RequestBody，导致前端提交的表单怎么都接受不到！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入了错误的包</span></span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.parameters.RequestBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br></pre></td></tr></table></figure><h1 id="nginx"><a class="markdownIt-Anchor" href="#nginx"></a> Nginx</h1><h2 id="反向代理"><a class="markdownIt-Anchor" href="#反向代理"></a> 反向代理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        # 反向代理,处理管理端发送的请求</span><br><span class="line">        location /api/ &#123;</span><br><span class="line">            # localhost/api/abc转发到下面admin/abc</span><br><span class="line">            proxy_pass   http://localhost:8080/admin/;</span><br><span class="line">            #proxy_pass   http://webservers/admin/;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好处：</p><ul><li>不会暴露服务器，服务器可以安全放在内网，由nginx转发、缓存。</li></ul><h2 id="负载均衡"><a class="markdownIt-Anchor" href="#负载均衡"></a> 负载均衡</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream webservers&#123;</span><br><span class="line">      # 服务器组，按权重分配</span><br><span class="line">      server 127.0.0.1:8080 weight=90 ;</span><br><span class="line">      server 127.0.0.1:8088 weight=10 ;</span><br><span class="line">      # ip_hash 根据ip分配</span><br><span class="line">      # least_conn 分配到最少链接的服务器</span><br><span class="line">      # url_hash 根据url分配</span><br><span class="line">      # fair 分配到响应时间最短的服务器</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        </span><br><span class="line">        # 反向代理,处理管理端发送的请求</span><br><span class="line">        location /api/ &#123;</span><br><span class="line">            # 负载均衡</span><br><span class="line">            proxy_pass   http://webservers/admin/;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="swagger"><a class="markdownIt-Anchor" href="#swagger"></a> Swagger</h1><blockquote><p>Knife4j：Java MVC框架集成Swagger</p></blockquote><p>API接口文档生成、测试</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;项目心得&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#项目心得&quot;&gt;&lt;/a&gt; 项目心得&lt;/h1&gt;
&lt;h2 id=&quot;24109&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#24109&quot;&gt;&lt;/a&gt; 24.10.</summary>
      
    
    
    
    
    <category term="项目" scheme="http://simuleite.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>DNS Over Https</title>
    <link href="http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/DNS%20Over%20Https/"/>
    <id>http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/DNS%20Over%20Https/</id>
    <published>2024-09-09T16:00:00.000Z</published>
    <updated>2024-09-10T11:25:58.299Z</updated>
    
    <content type="html"><![CDATA[<h1 id="windows"><a class="markdownIt-Anchor" href="#windows"></a> Windows</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">模板</span></span><br><span class="line">netsh dns add encryption server=&lt;IP Address&gt; dohtemplate=&lt;DOH Template&gt; autoupgrade=yes udpfallback=no</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">腾讯</span></span><br><span class="line">netsh dns add encryption server=1.12.12.12 dohtemplate=https://doh.pub/dns-query autoupgrade=yes udpfallback=no</span><br><span class="line"></span><br><span class="line">netsh dns add encryption server=120.53.53.53 dohtemplate=https://doh.360.cn/dns-query autoupgrade=yes udpfallback=no</span><br></pre></td></tr></table></figure><p>查看DoH模板：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netsh dns show encryption</span></span><br><span class="line"></span><br><span class="line">223.5.5.5 加密设置</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">DNS-over-HTTPS 模板     : https://dns.alidns.com/dns-query</span><br><span class="line">自动升级                : yes</span><br><span class="line">UDP 回退                : no</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;windows&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#windows&quot;&gt;&lt;/a&gt; Windows&lt;/h1&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;</summary>
      
    
    
    
    
    <category term="笔记" scheme="http://simuleite.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>CS61B sp18</title>
    <link href="http://simuleite.github.io/ComputerScience/%E8%AF%BE%E7%A8%8B/CS61B%20sp18/"/>
    <id>http://simuleite.github.io/ComputerScience/%E8%AF%BE%E7%A8%8B/CS61B%20sp18/</id>
    <published>2024-08-20T16:00:00.000Z</published>
    <updated>2024-09-30T03:01:12.088Z</updated>
    
    <content type="html"><![CDATA[<h1 id="gradescope-autograder"><a class="markdownIt-Anchor" href="#gradescope-autograder"></a> Gradescope Autograder</h1><h2 id="spring-2018"><a class="markdownIt-Anchor" href="#spring-2018"></a> <a href="https://sp18.datastructur.es/">Spring 2018</a></h2><p>44个Assn，偏向数据结构<br />邀请码：<code>MNXYKX</code><br />学校：<code>UC Berkeley</code><br />直接输入，不要选择<code>2U-UC Berkeley</code>，否则将提示<code>COURSE ENTRY CODE IS INVALID</code></p><h2 id="spring-2021"><a class="markdownIt-Anchor" href="#spring-2021"></a> <a href="https://sp21.datastructur.es/">Spring 2021</a></h2><p>19个Assn，偏向软件工程<br />邀请码：<code>MB7ZPY</code></p><h1 id="文章收录"><a class="markdownIt-Anchor" href="#文章收录"></a> 文章收录</h1><p><a href="https://mathwithbaddrawings.com/2015/04/08/the-math-ceiling-wheres-your-cognitive-breaking-point/">The Law of the Broken Futon</a> 浮沙筑高台法则</p><blockquote><p>“Since I’m fine now, can’t I add that missing piece later, when it’s actually needed?” Sometimes, yes. But it’s much harder.<br />Adding the missing piece later means waiting until the damage is already underway, and hellishly difficult to undo.</p></blockquote><p><a href="https://henrikwarne.com/2014/09/04/a-response-to-why-most-unit-testing-is-waste/">A Response to “Why Most Unit Testing is Waste”</a></p><blockquote><p>(Unit Tests) They are based on <em>programmers’ fantasies about how the function should work</em>. But programmers break down requirements into smaller components all the time – this is how you program. Sometimes there are misunderstandings, but that is the exception, not the rule, in my opinion.</p></blockquote><h1 id="21-mystery-of-java-restore"><a class="markdownIt-Anchor" href="#21-mystery-of-java-restore"></a> 2.1 Mystery of Java Restore</h1><blockquote><p>When instantiate an Object, <code>obj = new Object()</code>, <code>obj</code> <strong>stores the address</strong> of the Object, not the specific data struction.</p></blockquote><p>(That is why all type of variables create memory boxes of 64 bits. It is just the memory of the address.)</p><p>Therefore, When we use <code>obj2 = obj</code>, Java simply copy the addr of <code>obj</code> and assign it to <code>obj2</code> (They are pointing to the same Object), that is why when we change <code>obj2.weight</code> it effects <code>obj.weight</code> too.</p><span id="more"></span><h1 id="22-sllist"><a class="markdownIt-Anchor" href="#22-sllist"></a> 2.2 SLList</h1><h2 id="static"><a class="markdownIt-Anchor" href="#static"></a> Static</h2><blockquote><p>if you don’t use any instance members of the outer class, make the nested class static.</p></blockquote><h2 id="overloaded"><a class="markdownIt-Anchor" href="#overloaded"></a> Overloaded</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Share the same name but have different parameters.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">(IntNode p)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (p.next == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + size(p.next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> size(first);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="sentinel-node"><a class="markdownIt-Anchor" href="#sentinel-node"></a> Sentinel Node</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">SLList</span><span class="params">()</span> &#123;</span><br><span class="line">    first = <span class="literal">null</span>;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">        addFirst(x);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// This solution works, but special case code like that shown above should be avoided when necessary.</span></span><br><span class="line">    <span class="type">IntNode</span> <span class="variable">p</span> <span class="operator">=</span> first;</span><br><span class="line">    <span class="keyword">while</span> (p.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    p.next = <span class="keyword">new</span> <span class="title class_">IntNode</span>(x, <span class="literal">null</span>);</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>We can do this by creating a special node that is always there, which we will call a <strong>sentinel node</strong>. The sentinel node will hold a value, which we won’t care about.</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">IntNode</span> <span class="variable">p</span> <span class="operator">=</span> sentinel;</span><br><span class="line">    <span class="keyword">while</span> (p.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    p.next = <span class="keyword">new</span> <span class="title class_">IntNode</span>(x, <span class="literal">null</span>);</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="30-testing"><a class="markdownIt-Anchor" href="#30-testing"></a> 3.0 Testing</h1><h2 id="the-operator"><a class="markdownIt-Anchor" href="#the-operator"></a> The <code>==</code> operator</h2><blockquote><p><code>==</code> operator simply compares the literal bits in the memory boxes. (e.g., for objects it only compares their address.)</p></blockquote><h2 id="private-recursive-helper"><a class="markdownIt-Anchor" href="#private-recursive-helper"></a> Private Recursive Helper</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Sorts strings destructively starting from item start. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(String[] x, <span class="type">int</span> start)</span> &#123; </span><br><span class="line">   <span class="type">int</span> <span class="variable">smallestIndex</span> <span class="operator">=</span> findSmallest(x);</span><br><span class="line">   swap(x, start, smallestIndex);</span><br><span class="line">   sort(x, start + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Sorts strings destructively. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(String[] x)</span> &#123; </span><br><span class="line">   sort(x, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>This approach is quite common when trying to use recursion on a data structure that is not inherently recursive, e.g. arrays.</p></blockquote><h2 id="junit"><a class="markdownIt-Anchor" href="#junit"></a> JUnit</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// your test code</span></span><br><span class="line">    assertEquals(actual, expected);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="autograder-vs-junit"><a class="markdownIt-Anchor" href="#autograder-vs-junit"></a> Autograder vs JUnit</h2><p>Rely on an Autograder, there is plenty of time that you’re not in control of neither your workflow or your code.</p><h2 id="test-driven-development-tdd"><a class="markdownIt-Anchor" href="#test-driven-development-tdd"></a> Test-Driven Development (TDD)</h2><p>TDD is a development process in which we write tests for code before writing the code itself. The steps are as follows:</p><ol><li>Identify a new feature.</li><li>Write a unit test for that feature.</li><li>Run the test. It should fail.</li><li>Write code that passes the test. Yay!</li><li>Optional: refactor code to make it faster, cleaner, etc. Except now we have a reference to tests that should pass.</li></ol><blockquote><p>You should <strong>definitely write tests but only when they might be useful!</strong></p></blockquote><h1 id="41-overload"><a class="markdownIt-Anchor" href="#41-overload"></a> 4.1 Overload</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">longest</span><span class="params">(SLList&lt;String&gt; list)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">longest</span><span class="params">(AList&lt;String&gt; list)</span>;</span><br></pre></td></tr></table></figure><p>Java will choose the right method according to the parameter you pass in.</p><blockquote><p>However, it is ugly, repetitive and hard to maintain.</p></blockquote><h2 id="override"><a class="markdownIt-Anchor" href="#override"></a> @Override</h2><blockquote><p>Override is something like a proofreader. It will remind you when you make a typo and named method in error.</p></blockquote><h1 id="42-interface"><a class="markdownIt-Anchor" href="#42-interface"></a> 4.2 Interface</h1><p>Summary:</p><ul><li>All methods must be public.</li><li>All variables must be public static final.</li><li>Cannot be instantiated</li><li>All methods are by default abstract unless specified to be <code>default</code></li><li>Can implement more than one interface per class</li></ul><h2 id="default"><a class="markdownIt-Anchor" href="#default"></a> Default</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Use `default` to define a method in `interface`</span></span><br><span class="line"><span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// your code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="extends"><a class="markdownIt-Anchor" href="#extends"></a> Extends</h2><blockquote><p>The <code>extends</code> keyword defines “is-a”.</p></blockquote><blockquote><p>By using the <code>extends</code> keyword, subclasses inherit all <strong>members</strong> of the parent class. “Members” includes:</p></blockquote><ol><li>All instance and static variables</li><li>All methods</li><li>All nested classes</li></ol><blockquote><p>Note that constructors are not inherited, and private members cannot be directly accessed by subclasses.</p></blockquote><h3 id="subclass-constructor"><a class="markdownIt-Anchor" href="#subclass-constructor"></a> Subclass Constructor</h3><p>A subclass is firstly its parentclass. Using the <code>super</code> keyword.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">VengefulSLList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    deletedItems = <span class="keyword">new</span> <span class="title class_">SLList</span>&lt;Item&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Or, if we choose not to, Java will automatically make a call to the superclass’s <em>no-argument</em> constructor for us.</p><h2 id="compile-time-error"><a class="markdownIt-Anchor" href="#compile-time-error"></a> Compile-time Error</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">VengefulSLList&lt;Integer&gt; vsl = <span class="keyword">new</span> <span class="title class_">VengefulSLList</span>&lt;Integer&gt;(<span class="number">9</span>);</span><br><span class="line">SLList&lt;Integer&gt; sl = vsl;</span><br><span class="line"></span><br><span class="line">sl.addLast(<span class="number">50</span>);</span><br><span class="line">sl.removeLast();</span><br><span class="line"></span><br><span class="line">sl.printLostItems(); <span class="comment">// 会出错</span></span><br><span class="line">VengefulSLList&lt;Integer&gt; vsl2 = sl; <span class="comment">// 会出错</span></span><br></pre></td></tr></table></figure><p>尽管运行时sl是动态的<code>VengefulSLList</code>类型，Java编译器将对象看作静态类型；<code>SLList</code>没有<code>printLostItems</code>方法，因此会报错；最后一句也是一样。</p><h1 id="43-polymorphism"><a class="markdownIt-Anchor" href="#43-polymorphism"></a> 4.3 Polymorphism</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OurComparable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> OurComparable <span class="title function_">max</span><span class="params">(OurComparable[] items)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxDex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; items.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> items[i].compareTo(items[maxDex]);</span><br><span class="line">            <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                maxDex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> items[maxDex];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">uddaDog</span> <span class="operator">=</span> (Dog) o;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.size - uddaDog.size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用多态，就可以写出一个统一的max()方法，而不需要考虑各个类的数据结构</p><h1 id="final"><a class="markdownIt-Anchor" href="#final"></a> Final</h1><blockquote><p>The <code>final</code> keyword prevents the variable from being changed after its first assignment.</p></blockquote><p>Notice: it doesn’t work for reference!</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> ArrayDeque&lt;String&gt;() deque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;String&gt;();</span><br></pre></td></tr></table></figure><p>deque不可改变，然而deque指向的ArrayDeque可变</p><h1 id="specific-generic-types"><a class="markdownIt-Anchor" href="#specific-generic-types"></a> Specific Generic Types</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;K <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;K&gt;, V&gt; K <span class="title function_">maxKey</span><span class="params">(Map61B&lt;K, V&gt; map)</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The <code>K extends Comparable&lt;K&gt;</code> means keys must implement the comparable interface and can be compared to other K’s.</p></blockquote><h1 id="arrayset"><a class="markdownIt-Anchor" href="#arrayset"></a> ArraySet</h1><blockquote><p>注意Set的add()方法需要检查是否已包含元素。</p></blockquote><h1 id="iterator"><a class="markdownIt-Anchor" href="#iterator"></a> Iterator</h1><p>For code on the right to work:</p><ol><li>Compiler checks that Lists have a method called iterator() that returns an  Iterator&lt;Integer&gt;.</li><li>Then, compiler checks that Iterators have:<ul><li>hasNext()</li><li>next()</li></ul></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArraySet</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;T&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArraySetIterator</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ArraySetIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> wizPos;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ArraySetIterator</span><span class="params">()</span> &#123;</span><br><span class="line">            wizPos = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> wizPos &lt; size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> T <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">T</span> <span class="variable">returnItem</span> <span class="operator">=</span> items[wizPos];</span><br><span class="line">            wizPos += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> returnItem;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="the-philosophy-of-exceptions"><a class="markdownIt-Anchor" href="#the-philosophy-of-exceptions"></a> The Philosophy of Exceptions</h1><blockquote><p>Exceptions keep error handling separate from the rest of the program.</p></blockquote><p>Program without exceptions:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (theFileIsOpen) &#123;</span><br><span class="line">    determine its size;</span><br><span class="line">    <span class="keyword">if</span> (gotTheFileLength) &#123;</span><br><span class="line">        allocate that much memory;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> error(<span class="string">&quot;fileLengthError&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Program with exceptions:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    open the file;</span><br><span class="line">    determine its size;</span><br><span class="line">    allocate that much memory;</span><br><span class="line">    read the file into memory;</span><br><span class="line">    close the file;</span><br><span class="line">&#125; <span class="keyword">catch</span> (fileOpenFailed) &#123;</span><br><span class="line">    doSomething;</span><br></pre></td></tr></table></figure><h1 id="exceptions-catch-and-specify"><a class="markdownIt-Anchor" href="#exceptions-catch-and-specify"></a> Exceptions: Catch and Specify</h1><blockquote><p><strong>Catch</strong> the error when you can handle the problem there. Keep it from escaping!</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        gulgate();</span><br><span class="line">    &#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Averted!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Specify</strong> the error when someone else should handle the error. Make sure the caller knows the method is dangerous!</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    gulgate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="abstract"><a class="markdownIt-Anchor" href="#abstract"></a> Abstract</h1><blockquote><p>If an implementing class fails to implement any abstract methods inherited from an interface, then that class must be declared abstract.</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractBoundedQueue</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* the method must be defined with the abstract keyword </span></span><br><span class="line"><span class="comment">     * and without an implementation (without braces, and </span></span><br><span class="line"><span class="comment">     * followed by a semicolon) </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">moveTo</span><span class="params">(<span class="type">double</span> deltaX, <span class="type">double</span> deltaY)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="package"><a class="markdownIt-Anchor" href="#package"></a> Package</h1><blockquote><p>It is very possible that with all the code in this world, you would create classes that share names with those from a different project.</p></blockquote><blockquote><p>the <strong>package</strong> — a namespace that organizes classes and interfaces.<br />naming convention: package name starts with the website address, backwards.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.joshh.animal // joshh.com</span><br></pre></td></tr></table></figure><h1 id="jar"><a class="markdownIt-Anchor" href="#jar"></a> JAR</h1><blockquote><p>JAR files are just like zip files.<br />JAR files do not keep your code safe, and thus you should not share your .jar files of your projects with other students.</p></blockquote><h1 id="access-control"><a class="markdownIt-Anchor" href="#access-control"></a> Access Control</h1><ul><li><code>private</code>: Only the given class can access. Subclass cannot.</li><li><code>package private</code>: Only the class from the same package can access.</li><li><code>protected</code>: the same package or subclass can access.</li></ul><h1 id="encapsulation"><a class="markdownIt-Anchor" href="#encapsulation"></a> Encapsulation</h1><blockquote><p>A module is said to be encapsulated if its implementation is completely hidden, and it can be accessed only through a documented interface.</p></blockquote><h1 id="delegation"><a class="markdownIt-Anchor" href="#delegation"></a> Delegation</h1><blockquote><p>Extension tends to be used when you know what is going on in the parent class.</p></blockquote><blockquote><p>Delegation is when you do not want to consider your current class to be a version of the class that you are pulling the method from.</p></blockquote><h1 id="assn"><a class="markdownIt-Anchor" href="#assn"></a> Assn</h1><h2 id="proj0"><a class="markdownIt-Anchor" href="#proj0"></a> Proj0</h2><blockquote><p>[!NOTE]<br />注意严格按照讲义要求编程，不要有讲义以外的函数或方法，否则Gradescope OJ会扣掉API的10分！</p></blockquote><p>计算<code>ForceExertedByX/Y</code>，不要使用<code>Math.abs()</code>或者<code>a &lt; 0 ? -a : a</code>来通过本地测试，否则OJ会报错。力的方向（正负）需要根据行星的相对位置来定。</p><h2 id="proj1"><a class="markdownIt-Anchor" href="#proj1"></a> Proj1</h2><ul><li>注意构造空的Deque时，确保哨兵正确指向自己。</li><li>add()需要更改4个指针的方向。修改指针指向时，注意备份原指针指向位置。</li><li>对于循环Deque，注意print()的迭代条件。</li><li>remove()方法需要检查isEmpty()，否则不应该执行。</li><li>get()方法，index从0开始，LinkedList和ArrayList的对应关系是一样的。</li></ul><h3 id="array-deque"><a class="markdownIt-Anchor" href="#array-deque"></a> Array Deque</h3><ul><li>先设计，再编码。好好想想要设计怎样的ArrayDeque。分离传入index和实际index。</li><li>取模！！！一定要注意<code>-1 % size = -1</code>是取余数，<code>Math.floorMod(-1, size) = size-1</code>才是取模！（当Gradescope出现index=-1一般就是取模问题）</li><li><code>addFirst()</code>后调用<code>removeLast()</code>时，size变回0，但是没有调整下标的话head和end不会连在一起（错误状态）</li><li>考虑<code>resize()</code>的实现方法。浮点数运算比整数运算慢很多！</li></ul><h2 id="proj2"><a class="markdownIt-Anchor" href="#proj2"></a> Proj2</h2><p>思路：在房间旁边画房间，并在房间重合边缘处打洞，实现迷宫。</p><ol><li>首先设计<code>Room.java</code>，内置画一个房间，在房间旁边生成房间的方法。<br />稀里糊涂地生成了不错的迷宫出来。但是不好打洞！</li></ol><h1 id="hw2"><a class="markdownIt-Anchor" href="#hw2"></a> HW2</h1><p>蒙特卡罗渗透实验。原理是使用集合连接打通的节点，检查是否从top到bottom都连通了，连通了即渗透成功。<br />因此使用集合UF时，可以生成N*N+2个节点，作为top节点和bottom节点。但是这样做会导致倒灌(backwash)，可以创建两个UF，一个有bottom，另一个没有。一个用于检查是否渗透，另一个用于检查isFull。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;gradescope-autograder&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#gradescope-autograder&quot;&gt;&lt;/a&gt; Gradescope Autograder&lt;/h1&gt;
&lt;h2 id=&quot;spring-2018&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#spring-2018&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://sp18.datastructur.es/&quot;&gt;Spring 2018&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;44个Assn，偏向数据结构&lt;br /&gt;
邀请码：&lt;code&gt;MNXYKX&lt;/code&gt;&lt;br /&gt;
学校：&lt;code&gt;UC Berkeley&lt;/code&gt;&lt;br /&gt;
直接输入，不要选择&lt;code&gt;2U-UC Berkeley&lt;/code&gt;，否则将提示&lt;code&gt;COURSE ENTRY CODE IS INVALID&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;spring-2021&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#spring-2021&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://sp21.datastructur.es/&quot;&gt;Spring 2021&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;19个Assn，偏向软件工程&lt;br /&gt;
邀请码：&lt;code&gt;MB7ZPY&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;文章收录&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#文章收录&quot;&gt;&lt;/a&gt; 文章收录&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://mathwithbaddrawings.com/2015/04/08/the-math-ceiling-wheres-your-cognitive-breaking-point/&quot;&gt;The Law of the Broken Futon&lt;/a&gt; 浮沙筑高台法则&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Since I’m fine now, can’t I add that missing piece later, when it’s actually needed?” Sometimes, yes. But it’s much harder.&lt;br /&gt;
Adding the missing piece later means waiting until the damage is already underway, and hellishly difficult to undo.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://henrikwarne.com/2014/09/04/a-response-to-why-most-unit-testing-is-waste/&quot;&gt;A Response to “Why Most Unit Testing is Waste”&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(Unit Tests) They are based on &lt;em&gt;programmers’ fantasies about how the function should work&lt;/em&gt;. But programmers break down requirements into smaller components all the time – this is how you program. Sometimes there are misunderstandings, but that is the exception, not the rule, in my opinion.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;21-mystery-of-java-restore&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#21-mystery-of-java-restore&quot;&gt;&lt;/a&gt; 2.1 Mystery of Java Restore&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;When instantiate an Object, &lt;code&gt;obj = new Object()&lt;/code&gt;, &lt;code&gt;obj&lt;/code&gt; &lt;strong&gt;stores the address&lt;/strong&gt; of the Object, not the specific data struction.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(That is why all type of variables create memory boxes of 64 bits. It is just the memory of the address.)&lt;/p&gt;
&lt;p&gt;Therefore, When we use &lt;code&gt;obj2 = obj&lt;/code&gt;, Java simply copy the addr of &lt;code&gt;obj&lt;/code&gt; and assign it to &lt;code&gt;obj2&lt;/code&gt; (They are pointing to the same Object), that is why when we change &lt;code&gt;obj2.weight&lt;/code&gt; it effects &lt;code&gt;obj.weight&lt;/code&gt; too.&lt;/p&gt;</summary>
    
    
    
    
    <category term="课程" scheme="http://simuleite.github.io/tags/%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Listary使用</title>
    <link href="http://simuleite.github.io/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/Listary%E4%BD%BF%E7%94%A8/"/>
    <id>http://simuleite.github.io/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/Listary%E4%BD%BF%E7%94%A8/</id>
    <published>2024-08-15T16:00:00.000Z</published>
    <updated>2024-08-16T12:08:33.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络搜索"><a class="markdownIt-Anchor" href="#网络搜索"></a> 网络搜索</h1><table><thead><tr><th>网站</th><th>URL</th><th>备注</th></tr></thead><tbody><tr><td>哔哩哔哩</td><td><a href="https://search.bilibili.com/all?keyword=%7Bquery%7D">https://search.bilibili.com/all?keyword={query}</a></td><td></td></tr><tr><td>知乎</td><td><a href="https://www.zhihu.com/search?type=content&amp;q=%7Bquery%7D">https://www.zhihu.com/search?type=content&amp;q={query}</a></td><td></td></tr><tr><td>百度贴吧</td><td><a href="https://tieba.baidu.com/f?ie=utf-8&amp;kw=%7Bquery%7D&amp;fr=search">https://tieba.baidu.com/f?ie=utf-8&amp;kw={query}&amp;fr=search</a></td><td>优先搜索吧名</td></tr><tr><td>小红书</td><td><a href="https://www.xiaohongshu.com/search_result?keyword=%7Bquery%7D&amp;source=web_search_result_notes">https://www.xiaohongshu.com/search_result?keyword={query}&amp;source=web_search_result_notes</a></td><td>需要登录</td></tr><tr><td>淘宝</td><td><a href="https://s.taobao.com/search?q=%7Bquery%7D&amp;commend=all&amp;search_type=item&amp;sourceId=tb.index&amp;ie=utf8">https://s.taobao.com/search?q={query}&amp;commend=all&amp;search_type=item&amp;sourceId=tb.index&amp;ie=utf8</a></td><td></td></tr><tr><td>京东</td><td><a href="https://search.jd.com/Search?keyword=%7Bquery%7D&amp;enc=utf-8">https://search.jd.com/Search?keyword={query}&amp;enc=utf-8</a></td><td></td></tr><tr><td>Yandex</td><td><a href="https://yandex.com/search/?text=%7Bquery%7D">https://yandex.com/search/?text={query}</a></td><td></td></tr><tr><td>GitHub</td><td><a href="https://github.com/search?q=%7Bquery%7D&amp;type=repositories">https://github.com/search?q={query}&amp;type=repositories</a></td><td></td></tr><tr><td>tldr</td><td><a href="https://tldr.inbrowser.app/pages/common/%7Bquery%7D">https://tldr.inbrowser.app/pages/common/{query}</a></td><td>mannual查Linux命令</td></tr><tr><td>必应翻译</td><td><a href="https://cn.bing.com/translator?ref=TThis&amp;text=%7Bquery%7D&amp;from=en&amp;to=zh-Hant">https://cn.bing.com/translator?ref=TThis&amp;text={query}&amp;from=en&amp;to=zh-Hant</a></td><td>英译中</td></tr><tr><td>DeepL翻译</td><td><a href="https://www.deepl.com/translator#en/zh/%7Bquery%7D">https://www.deepl.com/translator#en/zh/{query}</a></td><td>英译中</td></tr></tbody></table><ul><li>有时候站内搜索没有搜索引擎准确，可以使用搜索引擎过滤网站<br />过滤站点：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://&lt;ENGINE.URL&gt;/search?text=site%3A&lt;SITE.URL&gt;%20&#123;query&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;网络搜索&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#网络搜索&quot;&gt;&lt;/a&gt; 网络搜索&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;网站&lt;/th&gt;
&lt;th&gt;URL&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/the</summary>
      
    
    
    
    
    <category term="基本操作" scheme="http://simuleite.github.io/tags/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Spring Framework</title>
    <link href="http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/Spring%20Framework/"/>
    <id>http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/Spring%20Framework/</id>
    <published>2024-08-10T16:00:00.000Z</published>
    <updated>2024-09-07T03:17:23.133Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pomxml-更换-maven-源"><a class="markdownIt-Anchor" href="#pomxml-更换-maven-源"></a> Pom.xml 更换 Maven 源</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.quoters<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quoters-incorporated<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>quoters-incorporated<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>REST service to support the guides<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>gturnquist<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Greg Turnquist<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span>gturnquist at vmware.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">organization</span>&gt;</span>VMware, Inc.<span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">roles</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span>Project Lead<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">roles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">organization</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>VMware, Inc.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://spring.io<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Apache License, Version 2.0<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://www.apache.org/licenses/LICENSE-2.0<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">comments</span>&gt;</span></span><br><span class="line">                Copyright 2011 the original author or authors.</span><br><span class="line"></span><br><span class="line">                Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">                you may not use this file except in compliance with the License.</span><br><span class="line">                You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">                https://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">                Unless required by applicable law or agreed to in writing, software</span><br><span class="line">                distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">                WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or</span><br><span class="line">                implied.</span><br><span class="line">                See the License for the specific language governing permissions and</span><br><span class="line">                limitations under the License.</span><br><span class="line">            <span class="tag">&lt;/<span class="name">comments</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置阿里云仓库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun-repos<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun-repos<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="tight-coupling-紧耦合"><a class="markdownIt-Anchor" href="#tight-coupling-紧耦合"></a> Tight Coupling 紧耦合</h1><p>在Spring框架以前，使用排序算法需要将算法实例化</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComplexBusinessService</span> &#123;</span><br><span class="line">  <span class="type">SortAlgorithm</span> <span class="variable">sortAlgorithm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BubbleSortAlgorithm</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSortAlgorithm</span> <span class="keyword">implements</span> <span class="title class_">SortAlgorithm</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Good code has loose coupling.</p></blockquote><p>移除依赖项的实例化可以移除紧耦合</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComplexBusinessService</span> &#123;</span><br><span class="line">  SortAlgorithm sortAlgorithm; <span class="comment">// = new BubbleSortAlgorithm();</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">ComplexBusinessService</span><span class="params">(SortAlgorithm sortAlgorithm)</span> &#123; <span class="comment">// 创建构造函数</span></span><br><span class="line">      <span class="built_in">this</span>.sortAlgorithm = sortAlgorithm;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> classBubbleSortAlgorithm <span class="keyword">implements</span> <span class="title class_">SortAlgorithm</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Spring Framework instantiates objects and populates the dependencies.</p></blockquote><span id="more"></span><h1 id="component"><a class="markdownIt-Anchor" href="#component"></a> @Component</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">// 告诉Spring管理这两个类的实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComplexBusinessService</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span> <span class="comment">// 告诉Spring这是依赖项</span></span><br><span class="line">  SortAlgorithm sortAlgorithm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSortAlgorithm</span> <span class="keyword">implements</span> <span class="title class_">SortAlgorithm</span> &#123;...&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Spring的工作：</span></span><br><span class="line"><span class="type">SortAlgorithm</span> <span class="variable">sortAlgorithm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BubbleSortAlgorithm</span>();</span><br><span class="line"><span class="type">ComplexBusinessService</span> <span class="variable">businessService</span> <span class="operator">=</span></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">ComplexBusinessService</span>(sortAlgorithm);</span><br></pre></td></tr></table></figure><h1 id="dependency-injection"><a class="markdownIt-Anchor" href="#dependency-injection"></a> Dependency Injection</h1><p>Spring理解你放在类顶部的不同注释，它确保它管理的所有对象的实例都是使用正确填充的依赖项创建的。</p><h1 id="术语"><a class="markdownIt-Anchor" href="#术语"></a> 术语</h1><ul><li>Beans：Spring管理的不同对象</li><li>Autowiring：Spring识别依赖关系、它的匹配项并填充的过程。</li><li>Dependency Injection：将算法作为依赖项注入到复杂业务中。</li><li>Inversion Of Control：从需要依赖关系的类中获取Control，并将框架控制权交给Spring</li><li>IOC Container</li><li>Application Context：创建和管理所有Bean的上下文。典型的IOC容器。</li></ul><h1 id="beans"><a class="markdownIt-Anchor" href="#beans"></a> Beans</h1><ul><li>What are the beans? <code>@Component</code></li><li>What are the dependencies of a bean? <code>@Autowired</code></li><li>Where to search for beans? <code>SpringApplication</code><br />Features:</li><li>Singleton: One instance per Spring Context</li><li>Prototype: New bean whenever requested <code>@Scope(&quot;prototype&quot;)/ @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</code></li><li>request: One bean per HTTP request</li><li>session: One bean per HTTP session</li></ul><h1 id="primary"><a class="markdownIt-Anchor" href="#primary"></a> @Primary</h1><blockquote><p>If you have two components on the class path of the same type then use @Primary.</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// It also decides which Algo to use.</span></span><br><span class="line"><span class="keyword">private</span> SortAlgorithm bubbleSortAlgorithm;</span><br><span class="line"><span class="comment">// However, if quickSortAlgorithm is marked as @Primary, then @Primary has higher priority.</span></span><br></pre></td></tr></table></figure><h1 id="qualifier"><a class="markdownIt-Anchor" href="#qualifier"></a> @Qualifier</h1><blockquote><p>Use @Qualifier(“name”) to name and choose the algo you want to use.</p></blockquote><p>However, use name is much clearer than use @Qualifier. @Qualifier is more likely a rename tool.</p><h1 id="constructorsetter-injection"><a class="markdownIt-Anchor" href="#constructorsetter-injection"></a> Constructor/Setter Injection</h1><blockquote><p>All mandatory(necessary) dependencies should be autowired using Constructor Injection. Other(Optional) was recommended to use Setter Injection.</p></blockquote><h1 id="modularity-of-spring"><a class="markdownIt-Anchor" href="#modularity-of-spring"></a> Modularity of Spring</h1><blockquote><p>One of the important things about Spring is that it’s not one big framework. Spring is built in a very modular way. It enables you to use specific models.</p></blockquote><h1 id="why-spring-popular"><a class="markdownIt-Anchor" href="#why-spring-popular"></a> Why Spring popular</h1><ol><li>With porperly usage of Dependency Injection, we are able to write test unit easily.</li><li>No plumbing(not core) code. 在内部写好了许多Exceptions，使用Spring的程序员几乎不需要自己写Exception Handling。</li><li>Modularity.(Flexible to other framework)</li><li>Stay up with the trends. like Spring Cloud.</li></ol><h1 id="eclipse-skill"><a class="markdownIt-Anchor" href="#eclipse-skill"></a> Eclipse Skill</h1><p><code>&lt;Ctrl+Space&gt;</code> Auto Completion<br /><code>&lt;Ctrl+1&gt;</code> File Operation<br /><code>&lt;C-S-L&gt;</code> List Shortcuts<br /><code>&lt;C-S-R&gt;</code> Resource Finding<br /><code>&lt;C-S-T&gt;</code> Type Finding<br /><code>F3</code> Goto Declaration<br /><code>F4</code> Type Hierarchy<br /><code>&lt;A-S-S&gt;</code> Code Generation</p><h1 id="maven"><a class="markdownIt-Anchor" href="#maven"></a> Maven</h1><p>Convention over Configuration<br /><code>mvn compile</code>: Compile source files<br /><code>mvn test compile</code>mvn clean<code>: Delete target directory</code>mvn test<code>: Run unit tests</code>mvn package<code>: Create a jar</code>mvn help:effective-pom<code></code>mvn dependency:tree`</p><h1 id="gradle"><a class="markdownIt-Anchor" href="#gradle"></a> Gradle</h1><p>Cross-platform: C/C++, JavaScript, Python…<br />Completely Programmable<br />Deliver Faster(Cache)</p><h1 id="dao-data-accessed-object"><a class="markdownIt-Anchor" href="#dao-data-accessed-object"></a> DAO: Data Accessed Object</h1><h1 id="servlet"><a class="markdownIt-Anchor" href="#servlet"></a> Servlet</h1><blockquote><p>A very simple Java class which can take request in, and can take respond back with a  response.</p></blockquote><ol><li>extends javax.servlet.http.HttpServlet</li><li>@WebServlet(urlPatterns = “/login.do”)</li><li>doGet(HttpServletRequest request, HttpServletResponse response) throws IOException</li></ol><h1 id="实践"><a class="markdownIt-Anchor" href="#实践"></a> 实践</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/login.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, </span></span><br><span class="line"><span class="params">            HttpServletResponse response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/webapp/your/path/to/login.jsp&quot;</span>).forward(request, response);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- /pom.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.in28minutes<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>in28Minutes-first-webapp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaee-web-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">showWarnings</span>&gt;</span>true<span class="tag">&lt;/<span class="name">showWarnings</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">contextReloadable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">contextReloadable</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- webapp/WEB-INF/web.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">version</span>=<span class="string">&quot;3.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>To do List<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.do<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span> <span class="comment">&lt;!-- 首页默认后缀名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务</span></span><br><span class="line">mvn tomcat7:run</span><br></pre></td></tr></table></figure><h2 id="passing-parameters"><a class="markdownIt-Anchor" href="#passing-parameters"></a> Passing Parameters</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://your.site?parameter=value&amp;param2=value</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">param</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;parameter&quot;</span>);</span><br><span class="line">request.setAttribute(<span class="string">&quot;parameter&quot;</span>, param);</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  Hello, $&#123;param&#125;! &lt;!-- Expression Language --&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="scriptlet-java-code-in-jsp"><a class="markdownIt-Anchor" href="#scriptlet-java-code-in-jsp"></a> Scriptlet: Java Code in JSP</h2><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">java.util.<span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Date();</span><br><span class="line">%&gt;</span><br><span class="line">&lt;div&gt;Current date is &lt;%=date%&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><blockquote><p>JSP is a view. It should only show Information. There shouldn’t have any business logic.</p></blockquote><h2 id="disadvantage-of-get"><a class="markdownIt-Anchor" href="#disadvantage-of-get"></a> Disadvantage of GET</h2><blockquote><p>Any router can see the URL. Never use GET to pass your password. It’s unsecure and it is the reason why there is POST.</p></blockquote><h2 id="post"><a class="markdownIt-Anchor" href="#post"></a> POST</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login.do&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  Enter your name </span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> /&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Login&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserValidationService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserValidationService</span>();</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">          HttpServletResponse response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">      </span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isUserValid</span> <span class="operator">=</span> service.isUserValid(name, password);</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">if</span> (isUserValid) &#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">            request.setAttribute(<span class="string">&quot;password&quot;</span>, password);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/WEB-INF/views/welcome.jsp&quot;</span>).forward(request, response);  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;errMsg&quot;</span>, <span class="string">&quot;Invalid Credentials!&quot;</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;WEB-INF/views/login.jsp&quot;</span>).forward(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserValidationService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isUserValid</span><span class="params">(String user, String password)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (user.equals(<span class="string">&quot;account&quot;</span>) &amp;&amp; password.equals(<span class="string">&quot;password&quot;</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="spring-mvc"><a class="markdownIt-Anchor" href="#spring-mvc"></a> Spring MVC</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="controller"><a class="markdownIt-Anchor" href="#controller"></a> Controller</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/login&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="model"><a class="markdownIt-Anchor" href="#model"></a> Model</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/login&quot;, method = RequestMethod.POST)</span> <span class="comment">// Only handle POST</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">handleLoginRequest</span><span class="params">(<span class="meta">@RequestParam</span> String name,</span></span><br><span class="line"><span class="params">  <span class="meta">@RequestParam</span> String password, ModelMap model)</span> &#123;</span><br><span class="line">    model.put(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">    model.put(<span class="string">&quot;password&quot;</span>, password); <span class="comment">// request.setAttribute(&quot;password&quot;, password);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;welcome&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;pomxml-更换-maven-源&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#pomxml-更换-maven-源&quot;&gt;&lt;/a&gt; Pom.xml 更换 Maven 源&lt;/h1&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?xml version=&lt;span class=&quot;string&quot;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; encoding=&lt;span class=&quot;string&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;modelVersion&lt;/span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;modelVersion&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.quoters&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;quoters-incorporated&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;packaging&lt;/span&gt;&amp;gt;&lt;/span&gt;jar&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;packaging&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;quoters-incorporated&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;description&lt;/span&gt;&amp;gt;&lt;/span&gt;REST service to support the guides&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;description&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;developers&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;developer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;gturnquist&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;Greg Turnquist&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;email&lt;/span&gt;&amp;gt;&lt;/span&gt;gturnquist at vmware.com&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;email&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;organization&lt;/span&gt;&amp;gt;&lt;/span&gt;VMware, Inc.&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;organization&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;roles&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;role&lt;/span&gt;&amp;gt;&lt;/span&gt;Project Lead&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;role&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;roles&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;developer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;developers&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;organization&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;VMware, Inc.&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;url&lt;/span&gt;&amp;gt;&lt;/span&gt;https://spring.io&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;url&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;organization&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;licenses&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;license&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;Apache License, Version 2.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;url&lt;/span&gt;&amp;gt;&lt;/span&gt;https://www.apache.org/licenses/LICENSE-2.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;url&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;comments&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Copyright 2011 the original author or authors.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                you may not use this file except in compliance with the License.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                You may obtain a copy of the License at&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                https://www.apache.org/licenses/LICENSE-2.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Unless required by applicable law or agreed to in writing, software&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                distributed under the License is distributed on an &amp;quot;AS IS&amp;quot; BASIS,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                implied.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                See the License for the specific language governing permissions and&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                limitations under the License.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;comments&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;license&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;licenses&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;parent&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.7.5&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;relativePath&lt;/span&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- lookup parent from repository --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;parent&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;project.build.sourceEncoding&lt;/span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;project.build.sourceEncoding&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;project.reporting.outputEncoding&lt;/span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;project.reporting.outputEncoding&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;java.version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;java.version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-data-jpa&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.h2database&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;h2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;runtime&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;test&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 配置阿里云仓库 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;repositories&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;repository&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;aliyun-repos&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;url&lt;/span&gt;&amp;gt;&lt;/span&gt;https://maven.aliyun.com/repository/public&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;url&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;releases&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;enabled&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;enabled&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;releases&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;snapshots&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;enabled&lt;/span&gt;&amp;gt;&lt;/span&gt;false&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;enabled&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;snapshots&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;repository&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;repositories&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;pluginRepositories&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;pluginRepository&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;aliyun-repos&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;id&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;url&lt;/span&gt;&amp;gt;&lt;/span&gt;https://maven.aliyun.com/repository/public&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;url&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;releases&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;enabled&lt;/span&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;enabled&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;releases&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;snapshots&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;enabled&lt;/span&gt;&amp;gt;&lt;/span&gt;false&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;enabled&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;snapshots&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;pluginRepository&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;pluginRepositories&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;project&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;tight-coupling-紧耦合&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#tight-coupling-紧耦合&quot;&gt;&lt;/a&gt; Tight Coupling 紧耦合&lt;/h1&gt;
&lt;p&gt;在Spring框架以前，使用排序算法需要将算法实例化&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;ComplexBusinessService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;SortAlgorithm&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;sortAlgorithm&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;BubbleSortAlgorithm&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;BubbleSortAlgorithm&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;SortAlgorithm&lt;/span&gt; &amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;Good code has loose coupling.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;移除依赖项的实例化可以移除紧耦合&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;ComplexBusinessService&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  SortAlgorithm sortAlgorithm; &lt;span class=&quot;comment&quot;&gt;// = new BubbleSortAlgorithm();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;ComplexBusinessService&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(SortAlgorithm sortAlgorithm)&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 创建构造函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.sortAlgorithm = sortAlgorithm;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; classBubbleSortAlgorithm &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;SortAlgorithm&lt;/span&gt; &amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;Spring Framework instantiates objects and populates the dependencies.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="笔记" scheme="http://simuleite.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>OS 操作系统</title>
    <link href="http://simuleite.github.io/ComputerScience/%E8%AF%BE%E7%A8%8B/OS%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>http://simuleite.github.io/ComputerScience/%E8%AF%BE%E7%A8%8B/OS%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</id>
    <published>2024-08-06T16:00:00.000Z</published>
    <updated>2024-10-06T08:24:22.296Z</updated>
    
    <content type="html"><![CDATA[<h1 id="chapter3-操作系统结构"><a class="markdownIt-Anchor" href="#chapter3-操作系统结构"></a> Chapter3 操作系统结构</h1><h2 id="复杂度管理方法-malh"><a class="markdownIt-Anchor" href="#复杂度管理方法-malh"></a> 复杂度管理方法 M.A.L.H</h2><p>Modularity: 模块化，分而治之<br />Abstraction: 抽象，接口与实现分离，遵循宽进严出原则。例如虚拟内存、文件系统</p><blockquote><p>对于大型系统，只有模块化和抽象，可能导致划分模块太多，交互关系复杂，因此还需要引入分层和层次结构控制复杂度。</p></blockquote><p>Layering: 分层，每个层级是一套完整机制。通常一个模块只能与本层和上下层交互，不能跨层。例如OSI、TCP/IP<br />Hierarchy: 层次结构，大的子系统由多个小的子系统组织成。即同级模块的分层</p><blockquote><p>宽进严出原则：容忍各种输入（包括恶意输入），严格控制模块的对外输出</p></blockquote><h2 id="微内核"><a class="markdownIt-Anchor" href="#微内核"></a> 微内核</h2><p>宏内核架构：单点bug使整个系统崩溃。<br />微内核：解耦单个功能/模块（如文件系统、设备驱动）作为独立服务隔离运行，使内核成为一个最小功能集。</p><blockquote><p>微内核架构服务隔离，单点出问题系统不会崩溃</p></blockquote><blockquote><p>内核态部分，称为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>μ</mi><mi>k</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>e</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">\mu kernel</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">μ</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span></p></blockquote><p>微内核优势：</p><ol><li>弹性硬件拓展能力</li><li>硬件异构实现</li><li>功能安全</li><li>信息安全</li><li>时延确定</li></ol><blockquote><p>现代操作系统特征：1）虚拟内存；2）用户态、内核态隔离。</p></blockquote><span id="more"></span><h3 id="抽象的缺点"><a class="markdownIt-Anchor" href="#抽象的缺点"></a> 抽象的缺点</h3><ol><li>过度抽象会损失性能（原则：abstract but don’t hide power)</li><li>通用的抽象对数据库、Web服务器来说不是最优抽象。（软件比操作系统更了解如何使用抽象来使用硬件资源）</li></ol><h2 id="外核-exokernel"><a class="markdownIt-Anchor" href="#外核-exokernel"></a> 外核 Exokernel</h2><p>外核将硬件资源抽象为LibOS，按需最小化调用</p><blockquote><p>外核的缺点：LibOS针对应用定制，不通用、复用差（增大内存开销）</p></blockquote><blockquote><p>开源的缺点：开放设备驱动源码会透露实现细节</p></blockquote><h2 id="策略与机制"><a class="markdownIt-Anchor" href="#策略与机制"></a> 策略与机制</h2><blockquote><p>重要的操作系统设计原则：分离 policy 与 mechanism</p></blockquote><p>policy：做什么。就像房子。例如什么用户、什么权限<br />mechanism：怎么做。就像盖房子的砖块。例如输入处理、桌面加载</p><h1 id="chapter4-内存管理"><a class="markdownIt-Anchor" href="#chapter4-内存管理"></a> Chapter4 内存管理</h1><h2 id="虚拟内存"><a class="markdownIt-Anchor" href="#虚拟内存"></a> 虚拟内存</h2><p>两种内存管理</p><ol><li>一个程序占用全部内存。程序切换时，将内存的数据写入硬盘（写入慢）</li><li>程序共享内存。无需频繁写入硬盘（问题：隔离性、地址不连续）<br />方法2更好，于是催生了虚拟内存这个中间层来解决隔离性和地址不连续的问题。</li></ol><blockquote><p>有了虚拟内存技术，程序连续地存储在硬盘里，通过页表映射的方式高效使用内存。</p></blockquote><h2 id="内存分段与分页"><a class="markdownIt-Anchor" href="#内存分段与分页"></a> 内存分段与分页</h2><p>分段：早期内存划分成大小不一样的段。缺点是容易产生内存碎片，不能充分利用内存资源。<br />分页：按规格划分内存和硬盘，任意虚拟页可以被映射到物理页。</p><h2 id="多级页表"><a class="markdownIt-Anchor" href="#多级页表"></a> 多级页表</h2><p>如果每个程序只维护1张页表，那么每张页表的大小将会是3千万GB！</p><blockquote><p>单级页表每一项都要存在：因为整个页表必须连续，没有用到的页也预留着。</p></blockquote><h2 id="tlb-translation-buffer"><a class="markdownIt-Anchor" href="#tlb-translation-buffer"></a> TLB Translation Buffer</h2><p>TLB缓存了虚拟页与物理页的映射关系。<br />其中，每项TLB有一个标签（ASID/PCID）来区别不同的程序，切换程序时只需要刷新那个程序的页表，无需全部刷新。</p><blockquote><p>页表切换时，操作系统需要主动刷新TLB。</p></blockquote><h2 id="换页与缺页"><a class="markdownIt-Anchor" href="#换页与缺页"></a> 换页与缺页</h2><p>打开PS，占用2G内存；打开游戏，占用3G内存。一共占用5G内存，却可以在总共4G的电脑上运行。</p><blockquote><p>换页：物理内存容量不够，将物理页写入磁盘，并回收资源。</p></blockquote><blockquote><p>缺页异常：内存找不到页，从磁盘找到对应页，写入内存。</p></blockquote><blockquote><p>预取：预测即将被访问的页，提前换入内存，减少不命中。</p></blockquote><blockquote><p>按需页分配：程序申请内存，只标记不换入，等到缺页异常再换入，提高利用率。</p></blockquote><h2 id="工作集模型"><a class="markdownIt-Anchor" href="#工作集模型"></a> 工作集模型</h2><p>将程序使用的内存页集合共同保持在物理页中，避免颠簸，优先换出非工作集的物理页。<br />原理：时钟算法。通过定时比较当前内存页与上次检测结果的访问位，判断出哪些内存是当前工作集。</p><h2 id="写时拷贝"><a class="markdownIt-Anchor" href="#写时拷贝"></a> 写时拷贝</h2><p>对于两个程序共用的物理页，只在内存保留1份数据，只读地映射到页表。当其中一个程序对共享部分修改时，再拷贝一份可读写的数据（由异常处理完成操作）来完成修改。</p><h2 id="内存去重"><a class="markdownIt-Anchor" href="#内存去重"></a> 内存去重</h2><p>操作系统定期扫描内存中的相同内容，只保留其中一份。缺点是修改时需要写时拷贝，加大了时延。</p><blockquote><p>针对内存去重的攻击：伪造数据，如果被去重了（表现为时延变长）就说明内存中存在相同的数据。</p></blockquote><h2 id="大页"><a class="markdownIt-Anchor" href="#大页"></a> 大页</h2><blockquote><p>TLB中翻译每个内存页要占用1个TLB缓存项。使用大页来解决缓存不够用的问题，提高命中率。大页的大小可以是2MB到1GB（普通页仅为4KB）。</p></blockquote><h2 id="物理内存分配与管理"><a class="markdownIt-Anchor" href="#物理内存分配与管理"></a> 物理内存分配与管理</h2><blockquote><p>内存碎片：无法被利用的内存。</p></blockquote><blockquote><p>外部碎片：有足够的内存却不是连续的，无法被分配使用。解决方法是按规格切分并分配内存。</p></blockquote><blockquote><p>内部碎片：切分并分配内存后（解决外部碎片），每块内存都没有被充分使用。</p></blockquote><h3 id="伙伴系统"><a class="markdownIt-Anchor" href="#伙伴系统"></a> 伙伴系统</h3><p>物理内存分块，每块由<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>个（1，2，4，8）物理页构成。2块相同大小的块为<strong>伙伴</strong>，可以合并成大一号的块；大块也可以分裂出2个小一号的伙伴块。</p><blockquote><p>伙伴系统：一个块被释放后，<strong>自动寻找伙伴块向上合并</strong>成大块，直到没有伙伴块为止。</p></blockquote><h3 id="slab分配器"><a class="markdownIt-Anchor" href="#slab分配器"></a> SLAB分配器</h3><p>伙伴系统最小分配4KB，然而许多服务只需要几十、几百B，SLAB用于分配这些小内存。<br />SLAB后来被改进成SLUB；还有一个最小开销、用于嵌入式的SLOB，这三者共称“SLAB分配器”。</p><blockquote><p>SLUB：2^n Byte(3\leq n \textless 12) 的伙伴系统。有2个指针，partial指向一块空闲内存slab，current指向slab中的空闲块。</p></blockquote><h3 id="软件着色软件方案"><a class="markdownIt-Anchor" href="#软件着色软件方案"></a> 软件着色（软件方案）</h3><blockquote><p>对放到不同位置的物理页标记不同颜色。对于连续虚拟内存，优先分别到不同颜色的位置，避免不命中。</p></blockquote><h1 id="chapter5-进程与线程"><a class="markdownIt-Anchor" href="#chapter5-进程与线程"></a> Chapter5 进程与线程</h1><blockquote><p>进程：每个进程对应一个运行中的程序。</p></blockquote><p>有了进程的抽象，应用程序再运行时仿佛独占了整个CPU。</p><blockquote><p>上下文切换：通过保存/回复进程的运行状态（上下文），使进程可以暂停、切换、恢复，实现CPU资源共享。</p></blockquote><blockquote><p>操作系统为每个进程提供独立虚拟地址空间（页表）。</p></blockquote><blockquote><p>线程：更轻量的执行单元，解决进程间数据不易共享、通信开销问题。</p></blockquote><blockquote><p>纤程：允许上下文在用户态而非内核态切换，再次减小开销。</p></blockquote><h2 id="进程"><a class="markdownIt-Anchor" href="#进程"></a> 进程</h2><table><thead><tr><th>名称</th><th>状态</th></tr></thead><tbody><tr><td>new</td><td>进程被创建，未初始化，不能调度</td></tr><tr><td>ready</td><td>进程初始化完成，未被调度器选择</td></tr><tr><td>running</td><td>进程被调度器选择，在CPU上运行</td></tr><tr><td>blocked</td><td>进程需要等待外部事件，暂时无法被调度</td></tr><tr><td>terminated</td><td>进程完成执行，不会再被调度</td></tr></tbody></table><h3 id="进程内存空间布局"><a class="markdownIt-Anchor" href="#进程内存空间布局"></a> 进程内存空间布局</h3><table><thead><tr><th>内核</th><th>最顶端</th></tr></thead><tbody><tr><td>用户栈</td><td>自顶向下拓展</td></tr><tr><td>代码库</td><td>共享，只读</td></tr><tr><td>用户堆</td><td>自底向上拓展</td></tr><tr><td>数据、代码段</td><td>静态</td></tr></tbody></table><p><code>cat /proc/PID/maps</code> 可以查看某个进程的空间布局</p><h3 id="进程控制块与上下文切换"><a class="markdownIt-Anchor" href="#进程控制块与上下文切换"></a> 进程控制块与上下文切换</h3><p>进程通过一个数据结构来保存它的相关状态（PID、进程状态、VM状态、打开的文件…）。</p><blockquote><p>这个数据结构称为PCB（Process Control Block）</p></blockquote><blockquote><p>上下文切换：将前一个进程的寄存器状态保存到PCB，将下一个进程之前保存的状态写入寄存器。</p></blockquote><h2 id="fork"><a class="markdownIt-Anchor" href="#fork"></a> fork</h2><p>fork创建一个与父进程一样子进程（PID与VM不同）。</p><h1 id="chapter6-操作系统调度"><a class="markdownIt-Anchor" href="#chapter6-操作系统调度"></a> Chapter6 操作系统调度</h1><h2 id="调度策略"><a class="markdownIt-Anchor" href="#调度策略"></a> 调度策略</h2><ul><li><p>FCFS，First Come First Served<br />先到先服务。用时短的服务需要等待，用户体验不好。</p></li><li><p>SFJ， Shortest Job First<br />最短运行时间先服务。依赖到达时间，如果长时间任务先到，仍然是长时间任务占用系统。</p></li><li><p>STCF，Shortest Time-to Completion First<br />最短剩余时间先服务。容易饿死长时间服务。</p></li><li><p>RR，Round Robin<br />时间片循环服务。平均把时间放在所有任务上。</p></li><li><p>MLQ，Multi-Level Queue<br />多级队列，高优先级的队列执行完后，才执行低优先级队列。同级别的队列，随机选择。同样，低优先级会饿死。而且一个任务锁定内存时，高优先级实质上执行不了。</p></li><li><p>MLFQ，Multi-Level Feedback Queue<br />多级队列加上反馈。假设所有任务是短时间任务，优先执行，超过一定时间后降级，处理其他事务。定时刷新，重设任务为高优先级，防止饿死。</p></li></ul><p>上面的所有调度方案，都是单用户下的调度；对多用户的调度和分配，我们需要引入<strong>份额</strong>。</p><ul><li><p>彩票调度<br />生成随机数，例如生成32，则份额为10的不会执行，份额为20-40的会执行。<br />这个方法显然不是完全按概率调度的。</p></li><li><p>彩票货币<br />A任务份额10，B任务份额5。在实际执行过程中，B可能会锁死A需要的内存，这时就需要A转让份额，让B快点执行完。<br />通过在份额上，再增加一层抽象货币，即A分配1/3的份额给B时，转换成A给B100货币，更容易计算。</p></li><li><p>步幅调度<br />步幅调度设置虚拟时间T，严格按照1：3的分配执行两个任务。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;chapter3-操作系统结构&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#chapter3-操作系统结构&quot;&gt;&lt;/a&gt; Chapter3 操作系统结构&lt;/h1&gt;
&lt;h2 id=&quot;复杂度管理方法-malh&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#复杂度管理方法-malh&quot;&gt;&lt;/a&gt; 复杂度管理方法 M.A.L.H&lt;/h2&gt;
&lt;p&gt;Modularity: 模块化，分而治之&lt;br /&gt;
Abstraction: 抽象，接口与实现分离，遵循宽进严出原则。例如虚拟内存、文件系统&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于大型系统，只有模块化和抽象，可能导致划分模块太多，交互关系复杂，因此还需要引入分层和层次结构控制复杂度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Layering: 分层，每个层级是一套完整机制。通常一个模块只能与本层和上下层交互，不能跨层。例如OSI、TCP/IP&lt;br /&gt;
Hierarchy: 层次结构，大的子系统由多个小的子系统组织成。即同级模块的分层&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;宽进严出原则：容忍各种输入（包括恶意输入），严格控制模块的对外输出&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;微内核&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#微内核&quot;&gt;&lt;/a&gt; 微内核&lt;/h2&gt;
&lt;p&gt;宏内核架构：单点bug使整个系统崩溃。&lt;br /&gt;
微内核：解耦单个功能/模块（如文件系统、设备驱动）作为独立服务隔离运行，使内核成为一个最小功能集。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;微内核架构服务隔离，单点出问题系统不会崩溃&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;内核态部分，称为&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;μ&lt;/mi&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;&#92;mu kernel&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8888799999999999em;vertical-align:-0.19444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;μ&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.03148em;&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.02778em;&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.01968em;&quot;&gt;l&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;微内核优势：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;弹性硬件拓展能力&lt;/li&gt;
&lt;li&gt;硬件异构实现&lt;/li&gt;
&lt;li&gt;功能安全&lt;/li&gt;
&lt;li&gt;信息安全&lt;/li&gt;
&lt;li&gt;时延确定&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;现代操作系统特征：1）虚拟内存；2）用户态、内核态隔离。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="课程" scheme="http://simuleite.github.io/tags/%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>mysql使用</title>
    <link href="http://simuleite.github.io/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/mysql%E4%BD%BF%E7%94%A8/"/>
    <id>http://simuleite.github.io/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/mysql%E4%BD%BF%E7%94%A8/</id>
    <published>2024-07-26T16:00:00.000Z</published>
    <updated>2024-10-10T11:55:08.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h1><h2 id="启动数据库"><a class="markdownIt-Anchor" href="#启动数据库"></a> 启动数据库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要管理员权限</span></span><br><span class="line">net start &lt;mysql-service_name&gt;</span><br></pre></td></tr></table></figure><h1 id="登录数据库"><a class="markdownIt-Anchor" href="#登录数据库"></a> 登录数据库</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u &lt;username&gt; -p</span><br><span class="line">$ &lt;password&gt;</span><br></pre></td></tr></table></figure><h2 id="导入数据库"><a class="markdownIt-Anchor" href="#导入数据库"></a> 导入数据库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 设置中文字符集</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> NAMES <span class="string">&#x27;utf8mb4&#x27;</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> character_set_server <span class="operator">=</span> <span class="string">&#x27;utf8mb4&#x27;</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> SOURCE <span class="operator">/</span>path<span class="operator">/</span><span class="keyword">to</span><span class="operator">/</span>database.sql;</span><br></pre></td></tr></table></figure><h2 id="数据库"><a class="markdownIt-Anchor" href="#数据库"></a> 数据库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE yourDatabase</span><br><span class="line">  <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看所有数据库</span></span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 进入数据库</span></span><br><span class="line">use yourDatabase</span><br></pre></td></tr></table></figure><h2 id="表"><a class="markdownIt-Anchor" href="#表"></a> 表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> yourTable (</span><br><span class="line">  id   <span class="type">INT</span>         AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>       <span class="keyword">DEFAULT</span> <span class="string">&#x27;worker&#x27;</span>,</span><br><span class="line">  age  <span class="type">INT</span>         ,</span><br><span class="line">  addr <span class="type">varchar</span>(<span class="number">50</span>) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看表 </span></span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">add</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span> <span class="type">char</span>(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">column</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除整张表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="查询"><a class="markdownIt-Anchor" href="#查询"></a> 查询</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- \G 参数单独展示每一行，避免过宽</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span>\G</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询多列</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>column1<span class="operator">&gt;</span>, <span class="operator">&lt;</span>column2<span class="operator">&gt;</span>, <span class="operator">&lt;</span>column3<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">from</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 只显示不同项</span></span><br><span class="line"><span class="comment">-- 注意，对多列使用时，两列完全一样才会被屏蔽</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> <span class="operator">&lt;</span><span class="keyword">column</span><span class="operator">&gt;</span> <span class="keyword">from</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 检错前5行</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span> <span class="keyword">from</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span> limit <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h1 id="排序"><a class="markdownIt-Anchor" href="#排序"></a> 排序</h1><blockquote><p><code>ORDER BY</code> 需要放在 <code>WHERE</code> 之后</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 按列升序排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">from</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span> (<span class="keyword">asc</span>); <span class="comment">-- 默认Ascending</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 降序排序。对多列排序，每列都要跟desc</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">from</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="operator">&lt;</span>col1<span class="operator">&gt;</span> <span class="keyword">desc</span>, <span class="operator">&lt;</span>col2<span class="operator">&gt;</span> <span class="keyword">desc</span>; <span class="comment">-- Descending降序排序</span></span><br></pre></td></tr></table></figure><h1 id="筛选"><a class="markdownIt-Anchor" href="#筛选"></a> 筛选</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 筛选col = value的字段</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">from</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">where</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span> <span class="operator">=</span> <span class="operator">&lt;</span><span class="keyword">value</span><span class="operator">&gt;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 筛选between 0 and 10的字段</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">from</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">where</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span> <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 筛选col为空的字段</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">from</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">where</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span> <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h1 id="逻辑操作符"><a class="markdownIt-Anchor" href="#逻辑操作符"></a> 逻辑操作符</h1><blockquote><p>优先级： <code>AND</code> &gt; <code>OR</code></p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- AND, OR</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">from</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">where</span> <span class="operator">&lt;</span>cond1<span class="operator">&gt;</span> <span class="keyword">or</span> (<span class="operator">&lt;</span>cond2<span class="operator">&gt;</span> <span class="keyword">and</span> <span class="operator">&lt;</span>cond3<span class="operator">&gt;</span>); <span class="comment">-- 不加括号，结果会改变</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- IN, NOT</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">from</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span></span><br><span class="line"><span class="comment">-- 相当于OR，性能稍好一点，也更直观；NOT主要配合IN使用</span></span><br><span class="line"><span class="keyword">where</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="operator">&lt;</span>value1<span class="operator">&gt;</span>, <span class="operator">&lt;</span>value2<span class="operator">&gt;</span>); </span><br></pre></td></tr></table></figure><h1 id="插入"><a class="markdownIt-Anchor" href="#插入"></a> 插入</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 插入相应字段的值</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span>(<span class="operator">&lt;</span>col1<span class="operator">&gt;</span>,</span><br><span class="line">                    <span class="operator">&lt;</span>col2<span class="operator">&gt;</span>)</span><br><span class="line"><span class="keyword">values</span>(<span class="operator">&lt;</span>val1<span class="operator">&gt;</span>,</span><br><span class="line">       <span class="operator">&lt;</span>val2<span class="operator">&gt;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> yourTable (name, email, age) <span class="keyword">values</span> (<span class="string">&#x27;eric&#x27;</span>, <span class="string">&#x27;example@email.com&#x27;</span>, <span class="number">19</span>);</span><br></pre></td></tr></table></figure><h1 id="更新"><a class="markdownIt-Anchor" href="#更新"></a> 更新</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">set</span> <span class="operator">&lt;</span>col1<span class="operator">&gt;</span> <span class="operator">=</span> <span class="operator">&lt;</span>val1<span class="operator">&gt;</span>,</span><br><span class="line">    <span class="operator">&lt;</span>col2<span class="operator">&gt;</span> <span class="operator">=</span> <span class="operator">&lt;</span>val2<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">where</span> <span class="operator">&lt;</span>col3<span class="operator">&gt;</span> <span class="operator">=</span> <span class="operator">&lt;</span>val3<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><h1 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">where</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span> <span class="operator">=</span> <span class="operator">&lt;</span>val<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><h1 id="联结"><a class="markdownIt-Anchor" href="#联结"></a> 联结</h1><p><img src="../Source/Photo/SQL%20JOIN.jpg" alt="" /></p><p>设计数据库时，应遵循将数据分解到不同的数据表这一原则。<br />然而，在使用数据时，常常需要将多个表的数据一起检索出来。<br />这时就需要用到联结。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用WHERE联结</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>col1<span class="operator">&gt;</span>, <span class="operator">&lt;</span>col2<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">from</span> <span class="operator">&lt;</span>table1<span class="operator">&gt;</span>, <span class="operator">&lt;</span>table2<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">where</span> <span class="operator">&lt;</span>table1<span class="operator">&gt;</span>.<span class="operator">&lt;</span>col<span class="operator">&gt;</span> <span class="operator">=</span> <span class="operator">&lt;</span>table2<span class="operator">&gt;</span>.<span class="operator">&lt;</span>col<span class="operator">&gt;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用ON联结</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>col1<span class="operator">&gt;</span>, <span class="operator">&lt;</span>col2<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">from</span> <span class="operator">&lt;</span>table1<span class="operator">&gt;</span> <span class="keyword">inner</span> <span class="keyword">join</span> <span class="operator">&lt;</span>table2<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">on</span> <span class="operator">&lt;</span>table1<span class="operator">&gt;</span>.<span class="operator">&lt;</span>col<span class="operator">&gt;</span> <span class="operator">=</span> <span class="operator">&lt;</span>table2<span class="operator">&gt;</span>.<span class="operator">&lt;</span>col<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><hr /><h1 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h1><h2 id="压缩包安装"><a class="markdownIt-Anchor" href="#压缩包安装"></a> 压缩包安装</h2><ol><li>初始化</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化，生成data文件夹，console参数可以看见密码</span></span><br><span class="line">mysqld --initialize --console &gt; mysql_info</span><br><span class="line"><span class="comment"># &gt; mysql_info把命令行输出结果存到文件里，防止密码丢失</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置<code>mysql.ini</code></li></ol><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置3306端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置mysql目录路径</span></span><br><span class="line"><span class="attr">basedir</span>=C:\\your\\path\\MySQL</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></span><br><span class="line"><span class="attr">datadir</span>=C:\\your\\path\\MySQL\\Data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span></span><br><span class="line"><span class="attr">max_connect_errors</span>=<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为UTF8</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认使用“mysql_native_password”插件认证</span></span><br><span class="line"><span class="attr">default_authentication_plugin</span>=mysql_native_password</span><br><span class="line"></span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="section">[client]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置mysql客户端连接服务端时默认使用的端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br></pre></td></tr></table></figure><ol start="3"><li>安装服务</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqld --install MySQL8 --defaults-file=<span class="string">&quot;C:\your\path\MySQL\mysql.ini&quot;</span> <span class="comment"># 设置服务名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认安装</span></span><br><span class="line">mysqld install</span><br></pre></td></tr></table></figure><ol start="4"><li>修改密码</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置YourPassword为新密码，再输入旧密码确认修改即可</span></span><br><span class="line">mysqladmin -u root -p password (YourPassword) --port 3306</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;使用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#使用&quot;&gt;&lt;/a&gt; 使用&lt;/h1&gt;
&lt;h2 id=&quot;启动数据库&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#启动数据库&quot;&gt;&lt;/a&gt; 启动数据库&lt;/h2&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 需要管理员权限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;net start &amp;lt;mysql-service_name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;登录数据库&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#登录数据库&quot;&gt;&lt;/a&gt; 登录数据库&lt;/h1&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql -u &amp;lt;username&amp;gt; -p&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &amp;lt;password&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;导入数据库&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#导入数据库&quot;&gt;&lt;/a&gt; 导入数据库&lt;/h2&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 设置中文字符集&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; NAMES &lt;span class=&quot;string&quot;&gt;&amp;#x27;utf8mb4&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; character_set_server &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;utf8mb4&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; SOURCE &lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;path&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;database.sql;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;数据库&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#数据库&quot;&gt;&lt;/a&gt; 数据库&lt;/h2&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 创建数据库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; DATABASE yourDatabase&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;type&quot;&gt;CHARACTER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; utf8mb4;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 查看所有数据库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;show&lt;/span&gt; databases;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 进入数据库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;use yourDatabase&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;表&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#表&quot;&gt;&lt;/a&gt; 表&lt;/h2&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 建表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; yourTable (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  id   &lt;span class=&quot;type&quot;&gt;INT&lt;/span&gt;         AUTO_INCREMENT &lt;span class=&quot;keyword&quot;&gt;PRIMARY&lt;/span&gt; KEY,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name &lt;span class=&quot;type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NULL&lt;/span&gt;       &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;worker&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  age  &lt;span class=&quot;type&quot;&gt;INT&lt;/span&gt;         ,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  addr &lt;span class=&quot;type&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 删除表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 查看表 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;show&lt;/span&gt; tables;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 修改表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;alter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;col&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;col&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 删除整张表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="基本操作" scheme="http://simuleite.github.io/tags/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>网络是怎样连接的</title>
    <link href="http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/"/>
    <id>http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/</id>
    <published>2024-07-24T16:00:00.000Z</published>
    <updated>2024-07-25T00:33:01.537Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web浏览器"><a class="markdownIt-Anchor" href="#web浏览器"></a> Web浏览器</h1><p>网址就是请求服务器上对应的文件<br />DNS从顶级域名开始根据网址查IP。DNS服务器通过缓存查过的IP来加快服务响应（缓存拥有有效期）。<br />浏览器调用Socket库建立连接管道</p><h1 id="tcpip协议栈"><a class="markdownIt-Anchor" href="#tcpip协议栈"></a> TCP/IP协议栈</h1><p>应用将数据分割为许多个网络包，TCP加上头部发送出去。需要发送的信息会缓存起来，<strong>超出计时时间</strong>或者<strong>数据量大于一个包大小</strong>时才发出去。<br />TCP需要确认对方收到数据，但是为了不浪费时间，实际上TCP在等待确认信息的过程中也在发送包，这个方法称为<strong>滑动窗口</strong>。<br />为了使接收方有足够的时间处理数据，接收方有一个接收缓存，当缓存满了会在TCP头部中通知发送方；处理完成，缓冲区有空余时也会通过TCP头部通知发送方。<br />通信完成后，发送方会保留套接字一段时间，以防对方的FINISH信号发送有延迟，把新的相同端口的套接字错误删除。</p><p>用电信号传输数据时，用高电平表示1，低电平表示0.为了防止连续的低电平读不出来，会有一条时钟信号（固定切换高低电平）<br />ICMP：定义各种消息，如超时、无法到达、超出转发能力</p><p>UDP在发送的数据少于一个包（重发也只需要发一个包，代价小，如DNS查询控制信息）、发送的数据具有时效性（如音视频，必须快速发送，即使重发也没有意义）的情况下使用。UDP只负责收发数据，对方没收到就全部重发一遍。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;web浏览器&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#web浏览器&quot;&gt;&lt;/a&gt; Web浏览器&lt;/h1&gt;
&lt;p&gt;网址就是请求服务器上对应的文件&lt;br /&gt;
DNS从顶级域名开始根据网址查IP。DNS服务器通过缓存查过的IP来加快服务</summary>
      
    
    
    
    
    <category term="笔记" scheme="http://simuleite.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot</title>
    <link href="http://simuleite.github.io/ComputerScience/%E9%A1%B9%E7%9B%AE/Spring%20Boot/"/>
    <id>http://simuleite.github.io/ComputerScience/%E9%A1%B9%E7%9B%AE/Spring%20Boot/</id>
    <published>2024-07-23T16:00:00.000Z</published>
    <updated>2024-07-25T07:50:44.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-cli"><a class="markdownIt-Anchor" href="#spring-cli"></a> Spring CLI</h1><p>可以用<a href="https://start.spring.io">Spring Initializr</a>或Spirng CLI来构建项目</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring init -list <span class="comment"># 列出参数</span></span><br><span class="line"><span class="comment"># 初始化项目</span></span><br><span class="line">spring init ( -d || --dependencies ) package1,package2 --build (maven/gradle) ( -p || --package) (war/jar) projectName</span><br><span class="line"><span class="comment"># Example</span></span><br><span class="line">spring init -d web,jpa,security --build maven -p jar basic-project</span><br><span class="line"></span><br><span class="line">spring init -d web,mustache,jpa,h2,devtools --package-name=com.example.blog --build maven mybloge</span><br></pre></td></tr></table></figure><ul><li>Web: API服务</li><li>JPA: 访问数据库的抽象<br />项目结构图</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ tree basic-project/</span><br><span class="line">basic-project/</span><br><span class="line">├── HELP.md</span><br><span class="line">├── mvnw # maven wrapper附带脚本</span><br><span class="line">├── mvnw.cmd</span><br><span class="line">├── pom.xml # maven 构建配置文件</span><br><span class="line">└── src</span><br><span class="line">    ├── main</span><br><span class="line">    │   ├── java</span><br><span class="line">    │   │   └── com</span><br><span class="line">    │   │       └── example</span><br><span class="line">    │   │           └── basic_project</span><br><span class="line">    │   │               └── DemoApplication.java # 入口</span><br><span class="line">    │   └── resources</span><br><span class="line">    │       ├── application.properties # Configuration</span><br><span class="line">    │       ├── static # 存放js/css,images</span><br><span class="line">    │       └── templates # 存放页面模板</span><br><span class="line">    └── test</span><br><span class="line">        └── java</span><br><span class="line">            └── com</span><br><span class="line">                └── example</span><br><span class="line">                    └── basic_project</span><br><span class="line">                        └── DemoApplicationTests.java</span><br><span class="line"></span><br><span class="line">15 directories, 7 files</span><br></pre></td></tr></table></figure><h1 id="maven"><a class="markdownIt-Anchor" href="#maven"></a> Maven</h1><h2 id="换源"><a class="markdownIt-Anchor" href="#换源"></a> 换源</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">distributionUrl=https://maven.aliyun.com/repository/central/org/apache/maven/apache-maven/(edition.number)/apache-maven-(edition.number)-bin.zip</span><br></pre></td></tr></table></figure><h2 id="运行项目"><a class="markdownIt-Anchor" href="#运行项目"></a> 运行项目</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn spring-boot:run</span><br><span class="line"><span class="comment"># 将会在localhost:8080运行</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;spring-cli&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#spring-cli&quot;&gt;&lt;/a&gt; Spring CLI&lt;/h1&gt;
&lt;p&gt;可以用&lt;a href=&quot;https://start.spring.io&quot;&gt;Spring Init</summary>
      
    
    
    
    
    <category term="项目" scheme="http://simuleite.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP 6</title>
    <link href="http://simuleite.github.io/ComputerScience/%E9%A1%B9%E7%9B%AE/ThinkPHP%206/"/>
    <id>http://simuleite.github.io/ComputerScience/%E9%A1%B9%E7%9B%AE/ThinkPHP%206/</id>
    <published>2024-07-18T16:00:00.000Z</published>
    <updated>2024-07-23T07:29:59.718Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.kancloud.cn/manual/thinkphp6_0/1037479">ThinkPHP 6.0文档</a></p><h1 id="composer安装"><a class="markdownIt-Anchor" href="#composer安装"></a> Composer安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer create-project topthink/think tp</span><br><span class="line"><span class="comment"># tp是应用根目录名称，可以修改</span></span><br></pre></td></tr></table></figure><h1 id="访问"><a class="markdownIt-Anchor" href="#访问"></a> 访问</h1><ol><li><code>localhost/tp/public/</code> 首页</li><li><code>首页/index.php/index</code> controller下的Index类</li><li><code>首页/index.php/index/?s=hello/value</code> 调用controller下Index类的hello方法，并传入参数value(URL兼容模式)</li><li><code>首页/index.php/hello_world</code> 调用controller下HelloWorld类</li><li><code>首页/index.php/group.blog</code> 调用controller/group下的Blog类</li></ol><h1 id="输出数组"><a class="markdownIt-Anchor" href="#输出数组"></a> 输出数组</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$data</span> = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span> =&gt; <span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">json</span>(<span class="variable">$data</span>);</span><br></pre></td></tr></table></figure><h1 id="开启调试"><a class="markdownIt-Anchor" href="#开启调试"></a> 开启调试</h1><p>在应用根目录下新建.env文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">APP_DEBUG = true</span><br><span class="line"></span><br><span class="line">[APP]</span><br><span class="line">DEFAULT_TIMEZONE = Asia/Shanghai</span><br><span class="line"></span><br><span class="line">[DATABASE]</span><br><span class="line">TYPE = mysql</span><br><span class="line">HOSTNAME = 127.0.0.1</span><br><span class="line">DATABASE = test</span><br><span class="line">USERNAME = username</span><br><span class="line">PASSWORD = password</span><br><span class="line">HOSTPORT = 3306</span><br><span class="line">CHARSET = utf8</span><br><span class="line">DEBUG = true</span><br><span class="line"></span><br><span class="line">[LANG]</span><br><span class="line">default_lang = zh-cn</span><br></pre></td></tr></table></figure><h1 id="数据库"><a class="markdownIt-Anchor" href="#数据库"></a> 数据库</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$user</span> = <span class="title class_">Db</span>::<span class="title function_ invoke__">connect</span>(<span class="string">&#x27;mysql&#x27;</span>)-&gt;<span class="title function_ invoke__">table</span>(<span class="string">&#x27;tp_user&#x27;</span>)-&gt;<span class="title function_ invoke__">select</span>();</span><br><span class="line"><span class="comment">// 确定数据库和数据表</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">json</span>(<span class="variable">$user</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者有Model User</span></span><br><span class="line"><span class="variable">$user</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">select</span>();</span><br></pre></td></tr></table></figure><h2 id="model"><a class="markdownIt-Anchor" href="#model"></a> Model</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">model</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$connection</span> = <span class="string">&#x27;databaseName&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查询"><a class="markdownIt-Anchor" href="#查询"></a> 查询</h2><p>Db::getLastSql();可以看上一条sql语句</p><h4 id="一条数据"><a class="markdownIt-Anchor" href="#一条数据"></a> 一条数据</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">table</span>(<span class="string">&#x27;tableName&#x27;</span>)-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;fieldName&#x27;</span>, fieldValue)-&gt;<span class="title function_ invoke__">find</span>(); <span class="comment">// 查询不到返回null</span></span><br><span class="line"><span class="comment">// findFail在查询不到时抛出异常；findEmpty在查询不到时返回空数组</span></span><br></pre></td></tr></table></figure><h3 id="整个表数据集"><a class="markdownIt-Anchor" href="#整个表数据集"></a> 整个表（数据集）</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">table</span>(<span class="string">&#x27;tableName&#x27;</span>)-&gt;<span class="title function_ invoke__">select</span>();</span><br><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;tableNameWithoutPrefix&#x27;</span>)-&gt;<span class="title function_ invoke__">select</span>();</span><br></pre></td></tr></table></figure><h3 id="某条记录的字段值"><a class="markdownIt-Anchor" href="#某条记录的字段值"></a> 某条记录的字段值</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;tableName&#x27;</span>)-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$id</span>)-&gt;<span class="title function_ invoke__">value</span>(<span class="string">&#x27;field&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="一列键值对"><a class="markdownIt-Anchor" href="#一列键值对"></a> 一列（键值对）</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;name&#x27;</span>)-&gt;<span class="title function_ invoke__">column</span>(<span class="string">&#x27;fieldAsValue&#x27;</span>, <span class="string">&#x27;fieldAsKey&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="插入"><a class="markdownIt-Anchor" href="#插入"></a> 插入</h2><h3 id="一条数据-2"><a class="markdownIt-Anchor" href="#一条数据-2"></a> 一条数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// strict 表示强行插入</span></span><br><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;user&#x27;</span>)-&gt;<span class="title function_ invoke__">strict</span>(<span class="literal">false</span>)-&gt;<span class="title function_ invoke__">insert</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="comment">// 有相同主键则替换</span></span><br><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;user&#x27;</span>)-&gt;<span class="title function_ invoke__">replace</span>()-&gt;<span class="title function_ invoke__">insert</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="comment">// 根据主键自动判断</span></span><br><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;user&#x27;</span>)-&gt;<span class="title function_ invoke__">save</span>(<span class="variable">$data</span>);</span><br></pre></td></tr></table></figure><h3 id="多条数据"><a class="markdownIt-Anchor" href="#多条数据"></a> 多条数据</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;user&#x27;</span>)-&gt;<span class="title function_ invoke__">insertAll</span>(<span class="variable">$data</span>);</span><br></pre></td></tr></table></figure><h2 id="修改"><a class="markdownIt-Anchor" href="#修改"></a> 修改</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;user&#x27;</span>)-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;id&#x27;</span>, <span class="number">232</span>)</span><br><span class="line">                -&gt;<span class="title function_ invoke__">update</span>([ </span><br><span class="line">                  // 下面是SQL表达式</span><br><span class="line">                  <span class="string">&#x27;email&#x27;</span> =&gt; <span class="title class_">Db</span>::<span class="title function_ invoke__">raw</span>(<span class="string">&#x27;UPPER(email)&#x27;</span>),</span><br><span class="line">                    <span class="string">&#x27;price&#x27;</span> =&gt; <span class="title class_">Db</span>::<span class="title function_ invoke__">raw</span>(<span class="string">&#x27;price + 1&#x27;</span>),</span><br><span class="line">                  <span class="string">&#x27;status&#x27;</span>=&gt; <span class="title class_">Db</span>::<span class="title function_ invoke__">raw</span>(<span class="string">&#x27;status - 2&#x27;</span>)</span><br><span class="line">                ]);</span><br></pre></td></tr></table></figure><h2 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据主键删除多条数据</span></span><br><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;user&#x27;</span>)-&gt;<span class="title function_ invoke__">delete</span>([<span class="number">48</span>,<span class="number">49</span>,<span class="number">50</span>]);</span><br><span class="line"><span class="comment">// 匹配删除</span></span><br><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;user&#x27;</span>)-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;id&#x27;</span>, <span class="number">47</span>)-&gt;<span class="title function_ invoke__">delete</span>();</span><br><span class="line"><span class="comment">// 全部删除</span></span><br><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;user&#x27;</span>)-&gt;<span class="title function_ invoke__">delete</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h1 id="模板"><a class="markdownIt-Anchor" href="#模板"></a> 模板</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer require topthink/think-view</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.kancloud.cn/manual/thinkphp6_0/1037479&quot;&gt;ThinkPHP 6.0文档&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;composer安装&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href</summary>
      
    
    
    
    
    <category term="项目" scheme="http://simuleite.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Windows scripts使用</title>
    <link href="http://simuleite.github.io/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/Windows%20scripts%E4%BD%BF%E7%94%A8/"/>
    <id>http://simuleite.github.io/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/Windows%20scripts%E4%BD%BF%E7%94%A8/</id>
    <published>2024-07-15T16:00:00.000Z</published>
    <updated>2024-07-16T08:45:20.244Z</updated>
    
    <content type="html"><![CDATA[<h1 id="task-scheduler"><a class="markdownIt-Anchor" href="#task-scheduler"></a> Task Scheduler</h1><p>WIN+R, <code>taskschd.msc</code><br />在这里可以设置定时任务、登录任务。<br />有些软件的开机自启动就设置在这里。比起组策略有更多的可选项（延迟启动，网络和电源要求等）</p><h1 id="group-policy-editor"><a class="markdownIt-Anchor" href="#group-policy-editor"></a> Group Policy Editor</h1><p>WIN+R, <code>gpedit.msc</code><br />在这里可以设置一些开关机时执行的任务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Computer Configuration -&gt; Windows settings -&gt; Scripts -&gt; Shutdown -&gt; Properties -&gt; Add</span><br></pre></td></tr></table></figure><h1 id="静默运行脚本"><a class="markdownIt-Anchor" href="#静默运行脚本"></a> 静默运行脚本</h1><p>Task Scheduler没有办法隐藏窗口<br />在Task Scheduler运行该vbs脚本，目标脚本路径作为参数即可实现静默运行。</p><figure class="highlight vbs"><table><tr><td class="code"><pre><span class="line"><span class="comment">&#x27; minRun.vbs</span></span><br><span class="line"><span class="comment">&#x27; Run minRun.vbs Task Scheduler在可选参数提供实际脚本地址</span></span><br><span class="line"><span class="comment">&#x27; 检查是否提供了批处理文件路径参数</span></span><br><span class="line"><span class="keyword">If</span> WScript.Arguments.Count = <span class="number">0</span> <span class="keyword">Then</span></span><br><span class="line">    WScript.Echo <span class="string">&quot;Error: No batch file path provided.&quot;</span></span><br><span class="line">    WScript.Quit <span class="number">1</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27; 获取批处理文件路径参数</span></span><br><span class="line"><span class="keyword">Dim</span> batchFilePath</span><br><span class="line">batchFilePath = WScript.Arguments(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27; 检查批处理文件是否存在</span></span><br><span class="line"><span class="keyword">If</span> <span class="keyword">Not</span> FileExists(batchFilePath) <span class="keyword">Then</span></span><br><span class="line">    WScript.Echo <span class="string">&quot;Error: Batch file not found at &quot;</span> &amp; batchFilePath</span><br><span class="line">    WScript.Quit <span class="number">1</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27; 创建 WScript.Shell 对象</span></span><br><span class="line"><span class="keyword">Set</span> oShell = <span class="built_in">CreateObject</span>(<span class="string">&quot;Wscript.Shell&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27; 执行批处理文件</span></span><br><span class="line"><span class="comment">&#x27; 使用 0 表示不等待批处理文件执行完成</span></span><br><span class="line"><span class="comment">&#x27; 使用 True 表示以同步方式运行（等待批处理执行完成）</span></span><br><span class="line">oShell.Run batchFilePath, <span class="number">0</span>, <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27; 清理</span></span><br><span class="line"><span class="keyword">Set</span> oShell = <span class="literal">Nothing</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27; 检查文件是否存在的辅助函数</span></span><br><span class="line"><span class="keyword">Function</span> FileExists(filePath)</span><br><span class="line">    <span class="keyword">Dim</span> fso</span><br><span class="line">    <span class="keyword">Set</span> fso = <span class="built_in">CreateObject</span>(<span class="string">&quot;Scripting.FileSystemObject&quot;</span>)</span><br><span class="line">    FileExists = fso.FileExists(filePath)</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;task-scheduler&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#task-scheduler&quot;&gt;&lt;/a&gt; Task Scheduler&lt;/h1&gt;
&lt;p&gt;WIN+R, &lt;code&gt;taskschd.msc&lt;/code&gt;&lt;br </summary>
      
    
    
    
    
    <category term="基本操作" scheme="http://simuleite.github.io/tags/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Mermaid使用</title>
    <link href="http://simuleite.github.io/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/Mermaid%E4%BD%BF%E7%94%A8/"/>
    <id>http://simuleite.github.io/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/Mermaid%E4%BD%BF%E7%94%A8/</id>
    <published>2024-06-28T16:00:00.000Z</published>
    <updated>2024-06-29T12:56:55.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="flowchart"><a class="markdownIt-Anchor" href="#flowchart"></a> Flowchart</h1><h2 id="基本语法"><a class="markdownIt-Anchor" href="#基本语法"></a> 基本语法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flowchart LR/TD</span><br><span class="line">    id[Content]</span><br><span class="line">    item[Line1</span><br><span class="line">    Line2</span><br><span class="line">    Line3]</span><br><span class="line">    id --&gt; item</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    id[Content]</span><br><span class="line">    item[Line1</span><br><span class="line">    Line2</span><br><span class="line">    Line3]</span><br><span class="line">    id --&gt; item</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    item&#123;Relationship&#125;</span><br><span class="line">    id(Entity)</span><br><span class="line"></span><br><span class="line">    id -- Text --&gt; item</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flowchart TD;</span><br><span class="line">    item&#123;Relationship&#125;;</span><br><span class="line">    id(Entity);</span><br><span class="line"></span><br><span class="line">    id -- Text --&gt; item;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;flowchart&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#flowchart&quot;&gt;&lt;/a&gt; Flowchart&lt;/h1&gt;
&lt;h2 id=&quot;基本语法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基本语法</summary>
      
    
    
    
    
    <category term="基本操作" scheme="http://simuleite.github.io/tags/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Huorong使用</title>
    <link href="http://simuleite.github.io/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/Huorong%E4%BD%BF%E7%94%A8/"/>
    <id>http://simuleite.github.io/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/Huorong%E4%BD%BF%E7%94%A8/</id>
    <published>2024-06-17T16:00:00.000Z</published>
    <updated>2024-06-30T09:16:13.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="保护文件"><a class="markdownIt-Anchor" href="#保护文件"></a> 保护文件</h1><p>防护中心 - 高级防护 - 自定义防护 - 锁定文件读取、创建、修改、删除权限</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;保护文件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#保护文件&quot;&gt;&lt;/a&gt; 保护文件&lt;/h1&gt;
&lt;p&gt;防护中心 - 高级防护 - 自定义防护 - 锁定文件读取、创建、修改、删除权限&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="基本操作" scheme="http://simuleite.github.io/tags/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Computer Organization&amp;Design学习记录</title>
    <link href="http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/Computer%20Organization&amp;Design%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://simuleite.github.io/ComputerScience/%E7%AC%94%E8%AE%B0/Computer%20Organization&amp;Design%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2024-06-07T16:00:00.000Z</published>
    <updated>2024-07-03T04:38:44.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="chapter2-指令计算机的语言"><a class="markdownIt-Anchor" href="#chapter2-指令计算机的语言"></a> Chapter2 指令：计算机的语言</h1><p>本章将介绍MIPS汇编语言指令。</p><h2 id="三条设计原则"><a class="markdownIt-Anchor" href="#三条设计原则"></a> 三条设计原则</h2><ol><li>简单源于规整 Simplicity favors regularity.</li><li>越小越快 Smaller is faster.</li><li>优秀的设计需要适宜的折中方案 Good design demands good compromises.</li></ol><h2 id="22-硬件的操作与操作数"><a class="markdownIt-Anchor" href="#22-硬件的操作与操作数"></a> 2.2 硬件的操作与操作数</h2><h3 id="规整"><a class="markdownIt-Anchor" href="#规整"></a> 规整</h3><p><code>add a, b, c // a = b + c</code> MIPS汇编语言使用这样的固定记法。<br />每条MIPS算术指令只执行1个操作，仅有3个变量。</p><h3 id="操作数必须来自寄存器"><a class="markdownIt-Anchor" href="#操作数必须来自寄存器"></a> 操作数必须来自寄存器</h3><p>变量f、g、h、i、j依次分配给$s0~$s4，编译下面的C语句</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">f = (g + h) - (i + j);</span><br><span class="line">---</span><br><span class="line">add $t0, $s1, $s2 <span class="comment">// t0 = s1 + s2</span></span><br><span class="line">add $t1, $s3, $s4</span><br><span class="line">sub $s0, $t0, $t1 <span class="comment">// s0 = t0 + t1</span></span><br></pre></td></tr></table></figure><h3 id="数据传输"><a class="markdownIt-Anchor" href="#数据传输"></a> 数据传输</h3><p>只有少量数据存在寄存器中，因此需要在存储器和寄存器间传输数据</p><p>A的基址是存在$s3，编译下面的C语句</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">A[<span class="number">12</span>] = h + A[<span class="number">8</span>]</span><br><span class="line">---</span><br><span class="line">lw  $t0, <span class="number">32</span>($s3) <span class="comment">// 先读数，再相加；32为偏移量，8*4byte</span></span><br><span class="line">add $t0, $s2, $t0</span><br><span class="line">sw  $t0, <span class="number">48</span>($s3) <span class="comment">// 存数</span></span><br></pre></td></tr></table></figure><h3 id="立即数"><a class="markdownIt-Anchor" href="#立即数"></a> 立即数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">addi $t0, $t1, <span class="number">4</span> <span class="comment">// t0 = t1 + 4；无需读取4，作为立即数相加</span></span><br><span class="line">subi $t0, $t1, <span class="number">4</span></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="25-指令的表示"><a class="markdownIt-Anchor" href="#25-指令的表示"></a> 2.5 指令的表示</h2><h3 id="mips字段"><a class="markdownIt-Anchor" href="#mips字段"></a> MIPS字段</h3><ul><li>op: operation code</li><li>rs: source register</li><li>rt: target register</li><li>rd: destionation register</li><li>shamt: shift amount</li><li>funct: function code</li></ul><table><thead><tr><th>指令</th><th>格式</th><th>op</th><th>rs</th><th>rt</th><th>rd</th><th>shamt</th><th>funct</th></tr></thead><tbody><tr><td>共32位</td><td>register</td><td>6位</td><td>5位</td><td>5位</td><td>5位</td><td>5位</td><td>6位</td></tr><tr><td>add</td><td>R</td><td>0</td><td>reg</td><td>reg</td><td>reg</td><td>0</td><td>32</td></tr><tr><td>sub</td><td>R</td><td>0</td><td>reg</td><td>reg</td><td>reg</td><td>0</td><td>34</td></tr></tbody></table><p>5位字段太小，用处不大，取常数也取不了多大范围；所以设计了I型指令，支持16位字段</p><table><thead><tr><th>指令</th><th>格式</th><th>op</th><th>rs</th><th>rt</th><th>|-----address----|</th></tr></thead><tbody><tr><td>共32位</td><td>Immeidate</td><td>6位</td><td>5位</td><td>5位</td><td>16位</td></tr><tr><td>addi</td><td>I</td><td>8</td><td>reg</td><td>reg</td><td>常数</td></tr><tr><td>lw</td><td>I</td><td>35</td><td>reg</td><td>reg</td><td>地址</td></tr><tr><td>sw</td><td>I</td><td>43</td><td>reg</td><td>reg</td><td>地址</td></tr></tbody></table><p>大部分CPU只有16或32个寄存器，再增加，rs和rt字段都必须额外增加位，很难满足指令32位字长的要求。</p><p>将下面C语句编译成MIPS，并写出机器代码</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">A[<span class="number">300</span>] = h + A[<span class="number">300</span>];</span><br><span class="line">---</span><br><span class="line">lw $t0, <span class="number">1200</span>($t1) <span class="comment">// 注意t1存的是A的基址，不能当做temp随意修改！</span></span><br><span class="line">add $t0, $s2, $t0 </span><br><span class="line">sw $t0, <span class="number">1200</span>($t1)</span><br></pre></td></tr></table></figure><h3 id="两个准则"><a class="markdownIt-Anchor" href="#两个准则"></a> 两个准则</h3><ol><li>指令用数的形式表示</li><li>和数据一样，程序存储在存储器中，并且可以读写<br />这两个原则引出&quot;stored-program&quot;概念，释放了计算机的潜力。程序可以编译好放到存储器中，需要时再读取。</li></ol><h2 id="26-逻辑操作"><a class="markdownIt-Anchor" href="#26-逻辑操作"></a> 2.6 逻辑操作</h2><table><thead><tr><th>Logical Operation</th><th>MIPS Instructions</th></tr></thead><tbody><tr><td>Shift Left Logical</td><td>sll</td></tr><tr><td>Shift Right Logical</td><td>sdl</td></tr><tr><td>And &amp;</td><td>and, andi</td></tr><tr><td>Or |</td><td>or, ori</td></tr><tr><td>Not ~</td><td>nor</td></tr></tbody></table><p>均为R型指令，Not通过nor 0（或非0）来实现</p><h2 id="27-决策指令"><a class="markdownIt-Anchor" href="#27-决策指令"></a> 2.7 决策指令</h2><h3 id="branch-if"><a class="markdownIt-Anchor" href="#branch-if"></a> branch if</h3><p>i, k分别存放在$s3, $s5， save基址存放在$s6，编译下面的C语句</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (save[i] == k)</span><br><span class="line">    i += <span class="number">1</span>;</span><br><span class="line">---</span><br><span class="line">Loop: sll $t1, $s3, <span class="number">2</span> <span class="comment">// 左移2，相当于i*4</span></span><br><span class="line">add  $t1, $t1, $s6 <span class="comment">// 下标*4与基址相加，得到save[i]</span></span><br><span class="line">lw   $t0, <span class="number">0</span>($s6) <span class="comment">// 取save[i]</span></span><br><span class="line"><span class="comment">// beq 与 bne，两条判断相等、不等的指令</span></span><br><span class="line">bne  $t0, $s5, Exit <span class="comment">// branch if not equal, jump to Exit</span></span><br><span class="line">addi $s3, $s3, <span class="number">1</span> <span class="comment">// i++</span></span><br><span class="line">   j Loop <span class="comment">// jump to Loop</span></span><br><span class="line">Exit:</span><br></pre></td></tr></table></figure><p>可以看出对i不仅要做程序的加法处理，作为下标还要做*4处理。save[i]是通过每次加i的地址到&amp;save[0]，再取数取出来的。</p><h3 id="小于"><a class="markdownIt-Anchor" href="#小于"></a> 小于</h3><p>检查数组下标是否越界</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// set on less than (unsigned)</span></span><br><span class="line">sltu $t0, $s1, $t2 <span class="comment">// t0 = 0 if s1 &gt;= t2(length) or s1 &lt; 0</span></span><br><span class="line"><span class="comment">// 小于则为1，大于则为0</span></span><br><span class="line">beq $t0, $zero, IndexOutOfBounds</span><br></pre></td></tr></table></figure><p>用无符号数，正树正常比较，负数会被解释为一个很大的数，所以$t0会被置0，完成越界判断</p><h3 id="caseswitch语句"><a class="markdownIt-Anchor" href="#caseswitch语句"></a> case/switch语句</h3><p>实际上被汇编转换成了<code>if-then-else</code></p><h2 id="28-过程"><a class="markdownIt-Anchor" href="#28-过程"></a> 2.8 过程</h2><p>根据<strong>提供的参数</strong>执行一定任务的<strong>存储子程序</strong><br />六个步骤：</p><ol><li>参数放到可访问位置</li><li>控制权交给过程</li><li>获取过程所需存储空间</li><li>执行任务</li><li>结果放到调用程序可访问位置</li><li>返回控制权</li></ol><h3 id="mips过程调用硬件"><a class="markdownIt-Anchor" href="#mips过程调用硬件"></a> MIPS过程调用硬件</h3><ul><li><code>$a0 - $a3</code> 四个参数寄存器</li><li><code>$v0 ~ $v1</code> 两个返回值寄存器（为什么是两个？返回值不是只有1个吗？）</li><li><code>$ra</code> return address register</li></ul><h3 id="过程调用指令jal"><a class="markdownIt-Anchor" href="#过程调用指令jal"></a> 过程调用指令jal</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jal ProcedureAddr // jump and link，把下条指令地址PC+4放到$ra</span><br></pre></td></tr></table></figure><h3 id="栈"><a class="markdownIt-Anchor" href="#栈"></a> 栈</h3><p>在MIPS中，栈从高地址开始<br />栈指针寄存器为<code>$sp</code>，stack pointer</p><p>将下面的C语句编译成MIPS汇编代码</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">leaf_example</span><span class="params">(<span class="type">int</span> g, <span class="type">int</span> h, <span class="type">int</span> i, <span class="type">int</span> j)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> f;</span><br><span class="line">    </span><br><span class="line">    f = (g + h) - (i + j);</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line">leaf_example:</span><br><span class="line">addi $sp, $sp, <span class="number">-12</span> <span class="comment">// 分配地址，需要保存3个寄存器（看下面操作），-4*3</span></span><br><span class="line">sw $t1, <span class="number">8</span>($sp) <span class="comment">// 8~11</span></span><br><span class="line">sw $t0, <span class="number">4</span>($sp)</span><br><span class="line">sw $s0, <span class="number">0</span>($sp) <span class="comment">// 从高地址到低地址压栈push</span></span><br><span class="line"><span class="comment">// 操作用到3个寄存器</span></span><br><span class="line">add $t0, $a0, $a1</span><br><span class="line">add $t1, $a2, $a3</span><br><span class="line">add $s0, $t0, $t1</span><br><span class="line"><span class="comment">// return f</span></span><br><span class="line">add $v0, $s0, $zero</span><br><span class="line"><span class="comment">// 释放栈空间，pop</span></span><br><span class="line">lw $s0, <span class="number">0</span>($sp)</span><br><span class="line">lw $t0, <span class="number">4</span>($sp)</span><br><span class="line">lw $t1, <span class="number">8</span>($sp)</span><br><span class="line"><span class="comment">// 跳出函数，返回控制权</span></span><br><span class="line">jr $ra</span><br></pre></td></tr></table></figure><h3 id="寄存器保存约定"><a class="markdownIt-Anchor" href="#寄存器保存约定"></a> 寄存器保存约定</h3><p><code>$t0 ~ $t9</code> 是10个临时寄存器，不一定要保存（使用t寄存器就默认使用者不指望保存）<br /><code>$s0 ~ $s7</code> 是8个保留寄存器，必须保存<br />上面的示例中，可以不保存t1、t0，节省步骤</p><h3 id="嵌套"><a class="markdownIt-Anchor" href="#嵌套"></a> 嵌套</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> (n * factorial(n - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line">factorial:</span><br><span class="line">addi $sp, $sp, <span class="number">-8</span> <span class="comment">// 分配栈，push</span></span><br><span class="line">sw $ra, <span class="number">4</span>($sp) <span class="comment">// 保存地址</span></span><br><span class="line">sw $a0, <span class="number">0</span>($sp) <span class="comment">// 嵌套函数，需要保存调用时的参数</span></span><br><span class="line"></span><br><span class="line">slti $t0, $a0, <span class="number">1</span></span><br><span class="line">beq $t0, $zero, L1 <span class="comment">// if(n &gt;= 1) L1</span></span><br><span class="line"></span><br><span class="line">addi $v0, $zero, <span class="number">1</span> <span class="comment">// n &lt; 1时执行</span></span><br><span class="line">addi $sp, $sp, <span class="number">8</span> <span class="comment">// 释放，原来sw的寄存器没有变，所有不lw</span></span><br><span class="line">jr $ra</span><br><span class="line"><span class="comment">// 递</span></span><br><span class="line">L1: addi $a0, $a0, <span class="number">-1</span> <span class="comment">// n - 1</span></span><br><span class="line">    jal factorial</span><br><span class="line"><span class="comment">// 归</span></span><br><span class="line">lw $a0, <span class="number">0</span>($sp) <span class="comment">// 释放栈，pop</span></span><br><span class="line">lw $ra, <span class="number">4</span>($sp)</span><br><span class="line">addi $sp, $sp, <span class="number">8</span></span><br><span class="line">mul $v0, $a0, $v0 <span class="comment">// 返回v = n * factorial(n - 1)</span></span><br><span class="line">jr $ra <span class="comment">// 跳出，返回控制权</span></span><br></pre></td></tr></table></figure><h3 id="帧指针与堆"><a class="markdownIt-Anchor" href="#帧指针与堆"></a> 帧指针与堆</h3><h4 id="帧指针"><a class="markdownIt-Anchor" href="#帧指针"></a> 帧指针</h4><p>当存储<strong>局部</strong>数组或结构体时，这些局部变量无法放入寄存器（过大），就需要一个帧指针<strong>统一偏移量</strong>，保存变量到栈中。（函数多于四个参数时，多余参数也会存到栈中。<br /><strong>帧指针不是必须的</strong>，它方便了统一偏移量；有的编译器将$fp用作$s8。</p><h4 id="堆"><a class="markdownIt-Anchor" href="#堆"></a> 堆</h4><p>动态数据类型，例如指针，存放在堆里。<br />在C中，<code>malloc()</code>即申请堆空间，<code>free()</code>即释放堆空间。忘记释放就会占满内存导致泄漏！提前释放就会导致指针指向错误的位置。在Java，有自动的内存分配和无用单元回收避免泄漏和错误指向。</p><p>在内存中，从低地址往高地址依次是保留空间、代码段、静态变量段，然后是<strong>从低到高的堆空间</strong>和<strong>从高到低的栈空间</strong>。堆与栈相互增长，最大化利用空间。</p><table><thead><tr><th>内存空间</th></tr></thead><tbody><tr><td>栈↓</td></tr><tr><td>（空间）</td></tr><tr><td>堆↑</td></tr><tr><td>静态数据（常量）</td></tr><tr><td>代码段</td></tr><tr><td>保留</td></tr></tbody></table><h2 id="29-取字节8bit或更高位32bit数"><a class="markdownIt-Anchor" href="#29-取字节8bit或更高位32bit数"></a> 2.9 取字节（8bit）或更高位（32bit）数</h2><p>C使用ASCII码表示字符，每个ASCII码是8bit；Java使用Unicode，每个Unicode是16bit。因此寄存器也有<code>lb (load byte)、lh (load halfword)、lhu</code>指令</p><h3 id="字符串的表示"><a class="markdownIt-Anchor" href="#字符串的表示"></a> 字符串的表示</h3><p>三种选择</p><ol><li>保留第一个位置给出字符串长度（Java）</li><li>附加一个带有字符串长度的变量（结构体）</li><li>字符串结尾设置一个字符标识（C, ‘\0’)<br />注意，读取字符串的每个字符时，str[i]不需要每次把i*4。</li></ol><h2 id="210-指令拓展"><a class="markdownIt-Anchor" href="#210-指令拓展"></a> 2.10 指令拓展</h2><h3 id="2101-32bit立即数"><a class="markdownIt-Anchor" href="#2101-32bit立即数"></a> 2.10.1 32bit立即数</h3><p>把32bit常量加载到寄存器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">32bit constant:</span><br><span class="line">0000 0000 0011 1101 0000 1001 0000 0000</span><br><span class="line">---</span><br><span class="line">lui $t0, 61 // load upper immediate</span><br><span class="line">---</span><br><span class="line">001111 00000 01000  0000_0000_0011_1101 // MIPS指令</span><br><span class="line">0000_0000_0011_1101 0000_0000_0000_0000 // $t0, 把61拷贝到高16bit</span><br><span class="line">---</span><br><span class="line">ori $t0, $t0, 2304 // or immediate</span><br><span class="line">---</span><br><span class="line">0000_0000_0011_1101 0000_1001_0000_0000 // 把2304拷贝到低16bit</span><br></pre></td></tr></table></figure><h3 id="2102-寻址模式"><a class="markdownIt-Anchor" href="#2102-寻址模式"></a> 2.10.2 寻址模式</h3><p>J型指令除了6位操作码，其余位都是地址字段：</p><table><thead><tr><th>操作码</th><th>操作数</th></tr></thead><tbody><tr><td>6位</td><td>26位</td></tr></tbody></table><p>bne条件分支指令：</p><table><thead><tr><th>操作码</th><th>操作数1</th><th>操作数2</th><th>地址</th></tr></thead><tbody><tr><td>6位</td><td>5位</td><td>5位</td><td>16位</td></tr></tbody></table><p>如果地址只有16位就太小了，所以PC=寄存器+分支地址，地址成为了求和，变成了32位。</p><h4 id="pc相对寻址"><a class="markdownIt-Anchor" href="#pc相对寻址"></a> PC相对寻址</h4><p>实际上，<strong>MIPS寻址是对于下一条指令</strong>（而不是当前指令），这个设计加速了<strong>大概率事件</strong>。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.7.1的while循环，i存在$s3，k存在$s5，save[0]基址存在$s6</span></span><br><span class="line"><span class="keyword">while</span> (save[i] == k)</span><br><span class="line">    i += <span class="number">1</span>;</span><br><span class="line">---</span><br><span class="line">Loop: sll  $t1, $s3, <span class="number">2</span> <span class="comment">// i * 4</span></span><br><span class="line">add  $t1, $t1, $s6 <span class="comment">// 加地址，save[i*4]</span></span><br><span class="line">lw   $t0, <span class="number">0</span>($t1)</span><br><span class="line">bne  $t0, $s5, Exit</span><br><span class="line">addi $s3, $s3, <span class="number">1</span></span><br><span class="line">j    Loop</span><br><span class="line">Exit:</span><br><span class="line">---</span><br><span class="line"><span class="comment">// Q: 把Loop存在80_000，MIPS代码是什么？</span></span><br><span class="line"><span class="comment">// Loop:</span></span><br><span class="line"><span class="number">80000</span>: |<span class="number">0</span> |<span class="number">0</span> |<span class="number">19</span>|<span class="number">9</span> |<span class="number">2</span> |<span class="number">0</span> | <span class="comment">// sll</span></span><br><span class="line"><span class="number">80004</span>: |<span class="number">0</span> |<span class="number">9</span> |<span class="number">22</span>|<span class="number">9</span> |<span class="number">0</span> |<span class="number">32</span>| <span class="comment">// add</span></span><br><span class="line"><span class="number">80008</span>: |<span class="number">35</span>|<span class="number">9</span> |<span class="number">8</span> |   <span class="number">0</span>    | <span class="comment">// lw</span></span><br><span class="line"><span class="comment">// 注意：</span></span><br><span class="line"><span class="number">80012</span>: |<span class="number">5</span> |<span class="number">8</span> |<span class="number">21</span>|<span class="number">2</span>(<span class="number">8B</span>yte)| <span class="comment">// bne，MIPS用字寻址，1word = 4Byte</span></span><br><span class="line"><span class="comment">// 8 + 80016，实际上16位存的是偏移量，利用下一跳地址来寻址</span></span><br><span class="line"><span class="number">80016</span>: |<span class="number">8</span> |<span class="number">19</span>|<span class="number">19</span>|   <span class="number">1</span>    | <span class="comment">// addi</span></span><br><span class="line"><span class="number">80020</span>: |<span class="number">2</span> |     <span class="number">20000</span>    | <span class="comment">// j，完整的2000word*4 Byte</span></span><br><span class="line"><span class="number">80024</span>: ... <span class="comment">// Exit</span></span><br></pre></td></tr></table></figure><h4 id="长跳转寻址"><a class="markdownIt-Anchor" href="#长跳转寻址"></a> 长跳转寻址</h4><p>对于距离远的跳转，bne的16位地址不够用，可以间接利用j来跳更远距离。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">bne $s0, $s1, L2</span><br><span class="line">j   L1</span><br><span class="line">L2:</span><br></pre></td></tr></table></figure><h4 id="寻址模式总结"><a class="markdownIt-Anchor" href="#寻址模式总结"></a> 寻址模式总结</h4><ol><li>立即数寻址</li><li>寄存器寻址</li><li>基址寻址</li><li>PC相对寻址：bne指令用的方法</li><li>伪直接寻址：J型指令用的方法</li></ol><p>Q：MIPS中，条件分支beq指令的地址范围多大？（K = 1024）<br />A：beq指令地址前后±128K，beq使用相对PC寻址，相对寻址有1个符号位，PC相对寻址模式把16位地址左移2位与PC相加，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>±</mo><msup><mn>2</mn><mn>15</mn></msup><mo>∗</mo><msup><mn>2</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\pm2^{15} * 2^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">±</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>。</p><p>Q：MIPS中，跳转和跳转链接j、jal指令的地址范围多大？（M = 1024K）<br />A：256M任意地址，J型指令使用伪直接寻址，26位地址左移2位与PC高4位相连，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>26</mn></msup><mo>∗</mo><msup><mn>2</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">2^{26} * 2^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>。</p><h2 id="211-同步"><a class="markdownIt-Anchor" href="#211-同步"></a> 2.11 同步</h2><p>计算机进行数据操作必须要知道能不能目标地址读写，也就是任务之间需要同步sync，否则就会竞争race。同步使用lock和unlock操作。</p><h3 id="lock基本原理"><a class="markdownIt-Anchor" href="#lock基本原理"></a> lock基本原理</h3><p>实际上就是用0表示解锁，1表示加锁，把锁的值和对应的寄存器交换就可以了。lock操作是在硬件层面实现的，不在硬件层实现会很麻烦。<br />两条指令：load linked、store conditional</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">again:</span><br><span class="line">addi $t0, $zero, <span class="number">1</span> <span class="comment">// 加上锁的值，1表示加锁</span></span><br><span class="line">ll   $t1, <span class="number">0</span>($s1) <span class="comment">// 取寄存器s1的值</span></span><br><span class="line">sc   $t0, <span class="number">0</span>($s1) <span class="comment">// 给s1加锁</span></span><br><span class="line">beq  $t0, $zero, again <span class="comment">// 如果是0（解锁状态），加锁失败，就重试</span></span><br><span class="line">add  $s4, $zero, $t1 <span class="comment">// 把取来的值加载到寄存器s4上操作</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>实际上，不仅仅是多处理需要这样的lock操作；单处理器也需要lock来保证程序运行独立不受干扰、保证写入无错、指令执行成功。</p><h2 id="212-从语言到可执行程序"><a class="markdownIt-Anchor" href="#212-从语言到可执行程序"></a> 2.12 从语言到可执行程序</h2><h3 id="c语言"><a class="markdownIt-Anchor" href="#c语言"></a> C语言</h3><table><thead><tr><th>系统</th><th>源文件</th><th>汇编文件</th><th>目标文件</th><th>静态链接库</th><th>动态链接库</th><th>可执行文件</th></tr></thead><tbody><tr><td>UNIX</td><td>.c</td><td>.s</td><td>.o</td><td>.a</td><td>.so</td><td>.out / no suffix</td></tr><tr><td>MS-DOS</td><td>.C</td><td>.ASM</td><td>.OBJ</td><td>.LIB</td><td>.DLL</td><td>.EXE</td></tr></tbody></table><h4 id="1-编译"><a class="markdownIt-Anchor" href="#1-编译"></a> 1. 编译</h4><p>编译器把高级语言转换成汇编语言</p><h4 id="2-汇编"><a class="markdownIt-Anchor" href="#2-汇编"></a> 2. 汇编</h4><p>汇编器把汇编语言汇编成机器代码，生成obj file，包括了机器语言指令、数据和指令正确放入内存所需的信息。<br />汇编语言有硬件层没有实现的<strong>伪指令</strong>，如<code>move dest, tar</code>移动，实际上在硬件层是<code>add dest, 0, tar</code><br />MIPS汇编器使用16进制Hex<br />为了把汇编语言转换成二进制，有一个符号表。表由标号、地址对构成</p><h4 id="3-链接"><a class="markdownIt-Anchor" href="#3-链接"></a> 3. 链接</h4><p>链接器把独立汇编的机器语言程序拼接到一起，生成可执行文件。链接器做到拼接操作，使程序每次只需要重新编译和汇编<strong>一部分代码</strong>。修补代码比重新编译和汇编快得多（ccache）。<br />工作步骤：</p><ol><li>将代码、数据块象征性地放入内存</li><li>决定数据、指令标签的地址</li><li>修补内部、外部引用<br />也就是它寻找旧地址并用新地址取代它们。</li></ol><h4 id="4-加载"><a class="markdownIt-Anchor" href="#4-加载"></a> 4. 加载</h4><p>工作步骤：</p><ol><li>读取exe文件头，确定代码段、数据段大小</li><li>为内容、数据创建足够的地址空间</li><li>将exe中的指令、数据复制到内存</li><li>主程序参数复制到栈顶</li><li>初始化寄存器，栈指针指向第一个空位置</li><li>跳转到启动例程，把参数复制到寄存器，调用main()；并在return 0后调用exit终止程序</li></ol><h4 id="动态链接库-dll"><a class="markdownIt-Anchor" href="#动态链接库-dll"></a> 动态链接库 DLL</h4><p>传统的链接静态链接库的方法很快。但是静态链接库有更新问题，并且库可能很大，静态库需要全部装载到程序。<br />而动态链接库，只有程序运行的时候才链接和加载例程。（第一次调用库例程会把整个库走一遍，以后会按需调用）<br />DLL需要额外空间存储动态链接库信息，但是不需要复制或链接整个库。</p><h3 id="java"><a class="markdownIt-Anchor" href="#java"></a> JAVA</h3><h4 id="编译与解释"><a class="markdownIt-Anchor" href="#编译与解释"></a> 编译与解释</h4><p>编译依赖特定指令集，而Java是为了兼容性而发明的。<br />Java程序被编译成Java字节码，经过JVM虚拟机解释字节码运行。<br />解释的优势是可移植性，也导致了它更慢、性能较差。<br />现代的方法是使用即时编译器（Just In Time complier），<strong>编译过的部分保存起来，下次运行直接调用</strong>，这样每次运行都会更快。在今天，实际上Java与C的性能差距越来越小了。</p><blockquote><p>思考：“缓存”的概念真的很伟大，在计算机的世界中几乎无处不在。</p></blockquote><h2 id="213-一个完整程序示例"><a class="markdownIt-Anchor" href="#213-一个完整程序示例"></a> 2.13 一个完整程序示例</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> v[], <span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> temp; <span class="comment">// 交换相邻项</span></span><br><span class="line">    temp = v[k];</span><br><span class="line">    v[k] = v[k+<span class="number">1</span>];</span><br><span class="line">    v[k+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> v[], <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; v[j] &gt; v[j+<span class="number">1</span>]; j -= <span class="number">1</span>) &#123;</span><br><span class="line">            swap(v, j); <span class="comment">// 数组后项比前项大，则交换相邻项</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line">swap:</span><br><span class="line">sll $t1, $a1, <span class="number">2</span></span><br><span class="line">add $t1, $a0, $t1 <span class="comment">// 取址</span></span><br><span class="line"><span class="comment">// 取数</span></span><br><span class="line">lw $t0, <span class="number">0</span>($t1) </span><br><span class="line">lw $t2, <span class="number">4</span>($t1)</span><br><span class="line"><span class="comment">// 交换</span></span><br><span class="line">sw $t2, <span class="number">0</span>($t1) </span><br><span class="line">sw $t0, <span class="number">4</span>($t1)</span><br><span class="line"></span><br><span class="line">sort:</span><br><span class="line">addi $sp, $sp, <span class="number">-20</span> <span class="comment">// 分配栈空间，并保存寄存器值</span></span><br><span class="line">sw   $ra, <span class="number">16</span>($sp)</span><br><span class="line">sw   $s3, <span class="number">12</span>($sp)</span><br><span class="line">sw   $s2,  <span class="number">8</span>($sp)</span><br><span class="line">sw   $s1,  <span class="number">4</span>($sp)</span><br><span class="line">sw   $s0,  <span class="number">0</span>($sp)</span><br><span class="line"></span><br><span class="line">move $s2, $a0 <span class="comment">// 复制参数到寄存器, int v[]</span></span><br><span class="line">move $s3, $a1 <span class="comment">// int n</span></span><br><span class="line"></span><br><span class="line">move $s0, $zero <span class="comment">// 循环初始化i = 0</span></span><br><span class="line">for1tst:</span><br><span class="line">slt  $t0, $s0, $s3 <span class="comment">// i &lt; n ?</span></span><br><span class="line">beq  $t0, $zero, exit1 <span class="comment">// i &gt; n =&gt; exit1，跳出循环</span></span><br><span class="line"></span><br><span class="line">addi $s1, $s0, <span class="number">-1</span> <span class="comment">// j = i-1</span></span><br><span class="line">for2tst:</span><br><span class="line">slti $t0, $s1, <span class="number">0</span> <span class="comment">// j &lt; 0 ?</span></span><br><span class="line">bne  $t0, $zero, exit2 <span class="comment">// j &lt; 0 =&gt; exit2</span></span><br><span class="line">sll  $t1, $s1, <span class="number">2</span></span><br><span class="line">add  $t2, $s2, $t1 <span class="comment">// 得到v[j],v[j+1]</span></span><br><span class="line">lw   $t3, <span class="number">0</span>($t2)</span><br><span class="line">lw   $t4, <span class="number">4</span>($t2)</span><br><span class="line">slt  $t0, $t4, $t3 <span class="comment">// v[j+1] &lt; v[j] ?</span></span><br><span class="line">beq  $t0, $zero, exit2 <span class="comment">// v[j+1] &gt; v[j]，从小到大 =&gt; exit2</span></span><br><span class="line"></span><br><span class="line">move $a0, $s2 <span class="comment">// int v[]</span></span><br><span class="line">move $a1, $s1 <span class="comment">// int j</span></span><br><span class="line">jal  swap</span><br><span class="line"></span><br><span class="line">addi $s1, $s1, <span class="number">-1</span> <span class="comment">// j--</span></span><br><span class="line">j    for2tst <span class="comment">// 下一轮循环</span></span><br><span class="line"></span><br><span class="line">exit2:</span><br><span class="line">addi $s0, $s0, <span class="number">-1</span></span><br><span class="line">j    for1tst</span><br><span class="line"></span><br><span class="line">exit1:</span><br><span class="line">lw   $s0, <span class="number">0</span>($sp)</span><br><span class="line">lw   $s1, <span class="number">4</span>($sp)</span><br><span class="line">lw   $s2, <span class="number">8</span>($sp)</span><br><span class="line">lw   $s3, <span class="number">12</span>($sp)</span><br><span class="line">lw   $ra, <span class="number">16</span>($sp)</span><br><span class="line">addi $sp, $sp, <span class="number">20</span></span><br><span class="line"></span><br><span class="line">j    $ra</span><br></pre></td></tr></table></figure><p>上面的程序，不适用jal swap，直接把swap复制到程序里，叫做<strong>内联程序</strong>，可以省掉指令。<br />然而，如果内联程序在多个地方调用，代码复用率会降低，有可能导致<strong>cache不命中</strong>，从而性能下降。</p><p><strong>执行时间是衡量程序性能的唯一指标</strong>，不是代码量，也不是CPI</p><p>MIPS的编译器总是会-16来保存四个参数寄存器，不管有没有这么多参数。</p><h2 id="213-数组和指针"><a class="markdownIt-Anchor" href="#213-数组和指针"></a> 2.13 数组和指针</h2><p>在硬件中，指针*p++会智能地增加地址长度(+4而不是1)<br />数组必须要做下标*4，再加上首地址，指针不需要。<br />然而，现代编译器会优化数组的代码；所以，为了写出可读的程序，放心用数组吧！</p><h2 id="214-编译解释高级语言"><a class="markdownIt-Anchor" href="#214-编译解释高级语言"></a> 2.14 编译/解释高级语言</h2><p>面向对象语言：针对对象而不是过程；<strong>针对数据而不是逻辑</strong></p><h2 id="215-其他指令集"><a class="markdownIt-Anchor" href="#215-其他指令集"></a> 2.15 其他指令集</h2><h3 id="armv7"><a class="markdownIt-Anchor" href="#armv7"></a> ARMv7</h3><ul><li>有更多（9种）寻址模式，没有专门寄存器保存0</li><li>有4位条件码决定分支是否执行</li><li>每一条代码有可选执行条件（占用代码空间少，节省运行时间）</li><li>解释12位立即数字段的方式很新颖：低8位填0，变成32位，然后循环右移，由此可以用32位字的范围<strong>表示所有2的幂次</strong></li></ul><h3 id="x86"><a class="markdownIt-Anchor" href="#x86"></a> x86</h3><ul><li>ARM和MIPS是单独的小组在1985年推出的；x86是很多个互相独立小组开发的，并且持续改进了35+年。</li><li><strong>兼容性是一个“金手铐”</strong></li><li>x86要求算术、逻辑运算中一个操作数必须又是源操作数，又是目的操作数（Dest = Dest + Source）</li><li>x86的操作数可以存在存储器里</li></ul><h3 id="armv8"><a class="markdownIt-Anchor" href="#armv8"></a> ARMv8</h3><ul><li>ARMv8更像MIPS</li><li>为了使寄存器加宽为64位，做了完全的改进（与x86只做了很小改进）</li><li>PC不再是寄存器</li><li>有一个zero寄存器，32个通用寄存器</li></ul><h2 id="219-谬误与陷阱"><a class="markdownIt-Anchor" href="#219-谬误与陷阱"></a> 2.19 谬误与陷阱</h2><ul><li>x86很强大，可以循环执行某条指令。然而，这导致了额外的性能开销。代码复制比循环快1.5倍；用更大的浮点寄存器，比用x86整数寄存器，复制操作比复杂指令快2倍</li><li>C语言有register，把变量存在寄存器；但是<strong>编译器能比程序员更好地分配寄存器</strong></li><li>一旦代码写好，下一个危险是它变成一个流行的程序</li></ul><h1 id="chapter3-计算机的算术运算"><a class="markdownIt-Anchor" href="#chapter3-计算机的算术运算"></a> Chapter3 计算机的算术运算</h1><h2 id="31-引言"><a class="markdownIt-Anchor" href="#31-引言"></a> 3.1 引言</h2><ul><li>计算机小数和其他实数如何表示？</li><li>操作生成了一个无法表示的大数该怎样处理？</li><li>硬件的乘除法是怎样的？</li></ul><h2 id="32-加减法"><a class="markdownIt-Anchor" href="#32-加减法"></a> 3.2 加减法</h2><p>用加法表示减法，取反相加<br />用补码表示整数，好处是符合硬件的特征（溢出容易判断）<br /><strong>加法，只有符号相同才会溢出，异号相加最多变成全2</strong>；减法是反过来。</p><p>在做减法时，<br />如果用一个正数减去一个负数得到一个负的结果，<br />或者用一个负数减去一个正数然后得到一个正的结果，<br />则发生了溢出 。</p><p>无符号数可以忽略溢出，因为无符号一般表示地址</p><p>溢出时产生异常，也称为中断，交给操作系统处理。<br />遇到异常，会跳到预设好的指令异常处理程序的地址。有EPC（Exception Program Counter，异常PC）来存储异常发生的地址，方便后序跳转。<br />EPC有一个问题：跳转到中断的位置，先恢复寄存器，EPC的值就没了；恢复寄存器同时保留EPC，那么有一个寄存器的值就没了。<br />针对这个问题，MIPS使用$k1、$k0两个异常时不会恢复的寄存器。异常处理程序会把返回地址放在其中一个寄存器里面。<br />小测验：MIPS对字节和半字用lb、lh，sw、sh指令，但是算术运算就是用普通的add。MIPS没有针对半字的运算。</p><p>饱和：溢出后，设置数值为最大数或最小数。例如，收音机，不断调大音量后，如果采用没有溢出的那几位，会发生：最大音量突然变小声的情况。<br />MIPS没有检测溢出的条件分支。只能用一系列指令实现。</p><p>更快的加法：使用超前进位加法器（carry lookahead）</p><h2 id="33-乘法"><a class="markdownIt-Anchor" href="#33-乘法"></a> 3.3 乘法</h2><p>乘法就是复制：</p><ol><li>当乘数为1，把被乘数复制到合适位置</li><li>当乘数为0，填0<br />乘法经常要处理溢出，因为总是有32位×32位的情况<br />编译器使用移位来优化乘法</li></ol><p>有符号的乘法：记住符号位，转为正数相乘；单独处理符号<br />更快的乘法：并行加法运算，无需等待</p><h2 id="34-除法"><a class="markdownIt-Anchor" href="#34-除法"></a> 3.4 除法</h2><p>除法和乘法差不多，但是计算机只能一位一位尝试做减法来运算。<br />除法：得到商和余数</p><p>有符号的除法：使用 <em>被除数 = 商 x 除数 + 余数</em> 这个公式来处理符号<br />更快的除法：使用SRT算法，通过查找表来猜测商。还有一种算法，商为负数时，不要马上加回去，而是依照另一个等式来继续运算。</p><p>MIPS的硬件既可以做乘法，又可以做除法，Hi存放余数、Lo存放商</p><h2 id="35-浮点数"><a class="markdownIt-Anchor" href="#35-浮点数"></a> 3.5 浮点数</h2><h3 id="351-浮点数表示"><a class="markdownIt-Anchor" href="#351-浮点数表示"></a> 3.5.1 浮点数表示</h3><table><thead><tr><th>单精度</th><th>1</th><th>8</th><th>23</th></tr></thead><tbody><tr><td>func</td><td>sign</td><td>Exp</td><td>Frac</td></tr></tbody></table><table><thead><tr><th>双精度</th><th>1</th><th>11</th><th>52(20+32)</th></tr></thead><tbody><tr><td>func</td><td>sign</td><td>Exp</td><td>Frac</td></tr></tbody></table><h4 id="bias-偏阶"><a class="markdownIt-Anchor" href="#bias-偏阶"></a> Bias 偏阶</h4><p>为了让最小的负指数表示为全0，最大的正指数表示为全1。浮点数使用Biased Notion<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mrow><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi></mrow></msup><mo>×</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>F</mi><mi>r</mi><mi>a</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mrow><mi>E</mi><mi>x</mi><mi>p</mi><mi>o</mi><mi>n</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo>+</mo><mi>B</mi><mi>i</mi><mi>a</mi><mi>s</mi></mrow></msup></mrow><annotation encoding="application/x-tex">(-1)^{sign} \times (1 + Fraction) \times 2^{Exponent + Bias}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0746639999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">t</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">s</span></span></span></span></span></span></span></span></span></span></span></span><br />IEEE 754使用127作为单精度Bias，即指数为-1，表示为126 0111 1110B；指数为1，表示为1000 0000B，正指数看起来比负指数大。</p><h4 id="十进制数转浮点"><a class="markdownIt-Anchor" href="#十进制数转浮点"></a> 十进制数转浮点</h4><ul><li>-0.75如何用浮点数表示？<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mn>0.75</mn><mo>=</mo><mo>−</mo><mn>3</mn><mi mathvariant="normal">/</mi><mn>4</mn><mo>=</mo><mrow><mo>−</mo><mn mathvariant="bold">3</mn><mi mathvariant="bold">/</mi><msup><mn mathvariant="bold">2</mn><mn mathvariant="bold">2</mn></msup></mrow><mo>=</mo><mo>−</mo><mn>1</mn><msub><mn>1</mn><mn>2</mn></msub><mi mathvariant="normal">/</mi><msup><mn>2</mn><mn>2</mn></msup><mo>=</mo><mo>−</mo><mn>1.1</mn><mo>×</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">-0.75 = -3/4 = \mathbf{-3/2^2} = -11_2/2^2 = -1.1 \times 2^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">0</span><span class="mord">.</span><span class="mord">7</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord">3</span><span class="mord">/</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathbf">3</span><span class="mord mathbf">/</span><span class="mord"><span class="mord mathbf">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathbf mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">.</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span><br />套公式，-1+127=126</li></ul><table><thead><tr><th>sign</th><th>Biased Exponent</th><th>Fraction</th></tr></thead><tbody><tr><td>1</td><td>0111 1110</td><td>1000 0000 0000 0000 0000 000</td></tr></tbody></table><p><strong>技巧：表示成“除以2的次方”的形式</strong></p><table><thead><tr><th>sign</th><th>Biased Exponent</th><th>Fraction</th></tr></thead><tbody><tr><td>1</td><td>1000 0001</td><td>0100 0000 0000 0000 0000 000</td></tr></tbody></table><p>套公式，129-127=2<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mn>0.25</mn><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mn>2</mn></msup><mo>=</mo><mo>−</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">(-1) \times (1 + 0.25) \times 2^2 = -5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">2</span><span class="mord">5</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">5</span></span></span></span></p><h3 id="352-浮点数加法"><a class="markdownIt-Anchor" href="#352-浮点数加法"></a> 3.5.2 浮点数加法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    start(开始)</span><br><span class="line">    step1[1. 比较两个数的指数；将指数小的数右移，直到指数匹配]</span><br><span class="line">    step2[2. 尾数相加]</span><br><span class="line">    step3[3. 结果规格化]</span><br><span class="line">    jdg1&#123;&quot;上溢、下溢？&quot;&#125;</span><br><span class="line">    err(异常)</span><br><span class="line">    step4[4. 尾数舍入，保留适当位数]</span><br><span class="line">    jdg2&#123;&quot;是否为规格化数？&quot;&#125;</span><br><span class="line">    ed(结束)</span><br><span class="line"></span><br><span class="line">    start --&gt; step1 --&gt; step2 --&gt; step3 --&gt; jdg1 </span><br><span class="line">    </span><br><span class="line">    jdg1 -- N --&gt; step4 --&gt; jdg2</span><br><span class="line">    jdg2 -- Y --&gt; ed</span><br><span class="line">    jdg2 -- N --&gt; step3</span><br><span class="line">    </span><br><span class="line">    jdg1 -- Y --&gt; err</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="353-浮点数乘法"><a class="markdownIt-Anchor" href="#353-浮点数乘法"></a> 3.5.3 浮点数乘法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    start(开始)</span><br><span class="line">    stp1[1. 指数相加，加上偏阶值得到新的Bias Exponent]</span><br><span class="line">    stp2[2. 尾数相乘]</span><br><span class="line">    stp3[3. 规格化乘积；乘积右移，指数增大]</span><br><span class="line">    jdg1&#123;上溢或下溢？&#125;</span><br><span class="line">    err(异常)</span><br><span class="line">    stp4[4. 尾数舍入]</span><br><span class="line">    jdg2&#123;是否仍为规格化数？&#125;</span><br><span class="line">    stp6[6. 符号相同正，符号相异负]</span><br><span class="line">    ed(结束)</span><br><span class="line"></span><br><span class="line">    start --&gt; stp1 --&gt; stp2 --&gt; stp3 --&gt; jdg1 --&gt;|N| stp4</span><br><span class="line">    jdg1 --&gt;|Y| err</span><br><span class="line">    </span><br><span class="line">    stp4 --&gt; jdg2 --&gt;|Y| stp6 --&gt; ed</span><br><span class="line">    jdg2 --&gt;|N| stp3</span><br></pre></td></tr></table></figure><h3 id="354-mips-浮点指令"><a class="markdownIt-Anchor" href="#354-mips-浮点指令"></a> 3.5.4 MIPS 浮点指令</h3><p>lwc1 (Load Word into Coprocessor1)：取浮点<br />swc1：存浮点<br />Coprocessor：80年代的晶体管没办法把浮点运算和整数运算的单元放在同一个芯片上，所以有了协同处理器。</p><p>add.s/add.d：单、双精度浮点运算<br />双精度如何储存？用$f2 $f3一对浮点寄存器，用偶数作为名字<br /><strong>实际上，为了避免浮点运算，编译器会把程序中的浮点运算的结果直接存到内存里。</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> <span class="title function_">f2c</span><span class="params">(<span class="type">float</span> fahr)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> ((<span class="number">5.0</span> / <span class="number">9.0</span>) * (fahr - <span class="number">32.0</span>));</span><br><span class="line">    <span class="comment">// 5.0 / 9.0 直接存入内存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="355-算术精确问题"><a class="markdownIt-Anchor" href="#355-算术精确问题"></a> 3.5.5 算术精确问题</h3><p>在IEEE 753中，中间计算会保留多2位，称为保护位和舍入位，根据这两位来舍入，提升精确度。<br />衡量精确度：尾数最低位ulp (unit in the last place) 这个术语可以衡量精确度。IEEE 754保证浮点运算在半个ulp以内</p><h2 id="39-谬误与陷阱"><a class="markdownIt-Anchor" href="#39-谬误与陷阱"></a> 3.9 谬误与陷阱</h2><ol><li>右移指令无法代替2次幂相除！</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// -5</span><br><span class="line">1111 1111 1111 1111 1111 1111 1111 1011B </span><br><span class="line">// -5 &gt;&gt; 2 = -2，而答案是-1</span><br><span class="line">1111 1111 1111 1111 1111 1111 1111 1110B </span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>浮点加法不能使用结合律！舍入会毁掉一切。</li><li>对于浮点运算，顺序执行正常的程序，不一定能正常并行执行。同样是精度问题，会导致每次输出不同结果。</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;chapter2-指令计算机的语言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#chapter2-指令计算机的语言&quot;&gt;&lt;/a&gt; Chapter2 指令：计算机的语言&lt;/h1&gt;
&lt;p&gt;本章将介绍MIPS汇编语言指令。&lt;/p&gt;
&lt;h2 id=&quot;三条设计原则&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#三条设计原则&quot;&gt;&lt;/a&gt; 三条设计原则&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;简单源于规整 Simplicity favors regularity.&lt;/li&gt;
&lt;li&gt;越小越快 Smaller is faster.&lt;/li&gt;
&lt;li&gt;优秀的设计需要适宜的折中方案 Good design demands good compromises.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;22-硬件的操作与操作数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#22-硬件的操作与操作数&quot;&gt;&lt;/a&gt; 2.2 硬件的操作与操作数&lt;/h2&gt;
&lt;h3 id=&quot;规整&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#规整&quot;&gt;&lt;/a&gt; 规整&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;add a, b, c // a = b + c&lt;/code&gt; MIPS汇编语言使用这样的固定记法。&lt;br /&gt;
每条MIPS算术指令只执行1个操作，仅有3个变量。&lt;/p&gt;
&lt;h3 id=&quot;操作数必须来自寄存器&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#操作数必须来自寄存器&quot;&gt;&lt;/a&gt; 操作数必须来自寄存器&lt;/h3&gt;
&lt;p&gt;变量f、g、h、i、j依次分配给$s0~$s4，编译下面的C语句&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;f = (g + h) - (i + j);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;add $t0, $s1, $s2 &lt;span class=&quot;comment&quot;&gt;// t0 = s1 + s2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;add $t1, $s3, $s4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sub $s0, $t0, $t1 &lt;span class=&quot;comment&quot;&gt;// s0 = t0 + t1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;数据传输&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#数据传输&quot;&gt;&lt;/a&gt; 数据传输&lt;/h3&gt;
&lt;p&gt;只有少量数据存在寄存器中，因此需要在存储器和寄存器间传输数据&lt;/p&gt;
&lt;p&gt;A的基址是存在$s3，编译下面的C语句&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A[&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;] = h + A[&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lw  $t0, &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;($s3) &lt;span class=&quot;comment&quot;&gt;// 先读数，再相加；32为偏移量，8*4byte&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;add $t0, $s2, $t0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sw  $t0, &lt;span class=&quot;number&quot;&gt;48&lt;/span&gt;($s3) &lt;span class=&quot;comment&quot;&gt;// 存数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;立即数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#立即数&quot;&gt;&lt;/a&gt; 立即数&lt;/h3&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;addi $t0, $t1, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// t0 = t1 + 4；无需读取4，作为立即数相加&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subi $t0, $t1, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="笔记" scheme="http://simuleite.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>ICS5 PA</title>
    <link href="http://simuleite.github.io/ComputerScience/%E9%A1%B9%E7%9B%AE/ICS5%20PA/"/>
    <id>http://simuleite.github.io/ComputerScience/%E9%A1%B9%E7%9B%AE/ICS5%20PA/</id>
    <published>2024-05-29T16:00:00.000Z</published>
    <updated>2024-08-21T09:20:40.374Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pa1-1-24530"><a class="markdownIt-Anchor" href="#pa1-1-24530"></a> PA1-1 24.5.30</h1><p>又开始了ICS之旅，这次又给自己下了一个难度，找到了汪亮老师讲解的ICS 5！</p><h2 id="target"><a class="markdownIt-Anchor" href="#target"></a> target</h2><p>第一课的目标是修正一个register错误声明</p><h2 id="insteresting"><a class="markdownIt-Anchor" href="#insteresting"></a> insteresting</h2><ul><li>中途网易源Bad Gateway 502了，更换清华源，学会了<code>:%s/163/tuna/g</code>非常爽！</li><li>又学了几个<a href="../%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/Shell%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8">终端快捷键</a></li><li>想到了用 <code>ccache</code> 加速我的PA</li></ul><h2 id="problems"><a class="markdownIt-Anchor" href="#problems"></a> problems</h2><ol><li><code>union</code> 和 <code>struct</code> 的区别？<br /><code>unioin</code> 在同一个内存空间中存储不同的数据类型。<br /><code>struct</code> 则是同时存储不同的数据类型。</li><li>为什么要用 <code>union</code>？阅读i386手册<br />2.3.1 General Registers<br />As <a href="https://nju-projectn.github.io/i386-manual/s02_03.htm#fig2-5">Figure 2-5</a> shows, the low-order word of each of these eight registers has a separate name and can be treated as a unit. This feature is useful for handling 16-bit data items and for compatibility with the 8086 and 80286 processors. The word registers are named AX, BX, CX, DX, BP, SP, SI, and DI.<br />对于CPU来说，可以把AH AX AL看成单独的单元，拆分成小块。所以它们是共用关系。</li></ol><h1 id="pa1-2-alu-2465"><a class="markdownIt-Anchor" href="#pa1-2-alu-2465"></a> PA1-2 ALU 24.6.5</h1><h2 id="target-2"><a class="markdownIt-Anchor" href="#target-2"></a> target</h2><p>实现ALU中的各类运算，包括设置标志位</p><h2 id="knowledge"><a class="markdownIt-Anchor" href="#knowledge"></a> knowledge</h2><h3 id="appendix-c"><a class="markdownIt-Anchor" href="#appendix-c"></a> Appendix C</h3><table><thead><tr><th>Name</th><th>Function</th></tr></thead><tbody><tr><td>CF</td><td>Carry Flag ── Set on high-order bit carry or borrow; cleared otherwise.</td></tr><tr><td>PF</td><td>Parity Flag ── Set if low-order eight bits of result contain an even number of 1 bits; cleared otherwise.</td></tr><tr><td>ZF</td><td>Zero Flag ── Set if result is zero; cleared otherwise.</td></tr><tr><td>SF</td><td>Sign Flag ── Set equal to high-order bit of result (0 is positive, 1 if negative).</td></tr><tr><td>OF<br></td><td>Overflow Flag ── Set if result is too large a positive number or too small a negative number (excluding sign-bit) to fit in destination operand; cleared otherwise.</td></tr></tbody></table><span id="more"></span><h3 id="add"><a class="markdownIt-Anchor" href="#add"></a> ADD</h3><p>Operation<br />DEST ← DEST + SRC;<br />Flags Affected<br />OF, SF, ZF, AF, CF, and PF as described in Appendix C</p><h3 id="adc"><a class="markdownIt-Anchor" href="#adc"></a> ADC</h3><p>ADD with Carry：“带进位的加法”操作，需要看操作数是否已经进位<br />Operation<br />DEST ← DEST + SRC + CF;<br />Flags Affected<br />OF, SF, ZF, AF, CF, and PF as described in Appendix C<br />注意CF标志位需要特殊设置，考虑之前的进位状态</p><h3 id="sub"><a class="markdownIt-Anchor" href="#sub"></a> SUB</h3><p>借位：A - B，当A小于B时，结果为一个负数，产生了借位。<br />根据这个规则完成set_CF_sub()<br />在做减法时，<br />如果用一个正数减去一个负数得到一个负的结果，<br />或者用一个负数减去一个正数然后得到一个正的结果，<br />则发生了溢出 。<br />根据上面的规则比较符号，即可完成set_OF_sub()</p><h3 id="sbb"><a class="markdownIt-Anchor" href="#sbb"></a> SBB</h3><p>Sub with Borrow<br />什么时候产生借位？<br />1. 和普通减法一样10-1， 0&lt;1，产生借位<br />2. 已经借位的时候，130-31，3 不小于 3，但是3已经产生借位，所以(3-1借位)&lt;3的时候，产生借位<br />根据上面规则，即可完成set_CF_sbb()</p><h3 id="shl"><a class="markdownIt-Anchor" href="#shl"></a> SHL</h3><p>Shift Left<br />左移操作，CF位是最高位；只移1位时才需要设置OF（CF和操作数不相同时）<br />注意：符号位不等于最高位！</p><h3 id="div"><a class="markdownIt-Anchor" href="#div"></a> DIV</h3><p>实现除法需要完成MOD<br />注意，dest是被除数，src是除数</p><h1 id="pa1-3-fpu-24730"><a class="markdownIt-Anchor" href="#pa1-3-fpu-24730"></a> PA1-3 FPU 24.7.30</h1><p>按照手册和伪代码实现FPU的规格化操作，以及加法和乘法。注意NEMU的实现中，fraction包含Guard、Round、Sticky位，共23+3=26位。</p><h2 id="加法"><a class="markdownIt-Anchor" href="#加法"></a> 加法</h2><p>小阶向大阶对齐，shift right，exp–<br />根据guide处理各种情况即可</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="type">uint32_t</span> <span class="title function_">internal_normalize</span><span class="params">(<span class="type">uint32_t</span> sign, <span class="type">int32_t</span> <span class="built_in">exp</span>, <span class="type">uint64_t</span> sig_grs)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="comment">/* 需要进行右规 */</span> ) &#123;</span><br><span class="line">        <span class="keyword">while</span>( <span class="comment">/* 需要右规 且 未发生阶码上溢*/</span> ) &#123;</span><br><span class="line">            <span class="comment">/* 右规一次 */</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( <span class="comment">/* 发生了阶码上溢 */</span> ) &#123;</span><br><span class="line">            <span class="comment">/* 根据符号将结果置为 +∞ 或 -∞ */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>( <span class="comment">/* 需要进行左规 */</span> ) &#123;</span><br><span class="line">        <span class="keyword">while</span>( <span class="comment">/* 需要左规 且 阶码大于0 */</span> ) &#123;</span><br><span class="line">            <span class="comment">/* 左规一次 */</span>        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( <span class="comment">/* 发生了阶码==0 */</span> ) &#123;</span><br><span class="line">            <span class="comment">/* 右移一次化为非规格化浮点数 */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>( <span class="comment">/* 两个非规格化数运算后得到了一个规格化数 */</span> ) &#123;</span><br><span class="line">        <span class="built_in">exp</span>++; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( <span class="comment">/* 规格化过程中未发生溢出 */</span> ) &#123;</span><br><span class="line">        <span class="comment">/* 根据sig_grs最后三位GRS bits的取值决定舍入，采取就近舍入到偶数的方式 */</span></span><br><span class="line">        <span class="comment">/* 移除sig_grs最后三位保留的GRS bits*/</span></span><br><span class="line">        <span class="keyword">if</span>( <span class="comment">/* 舍入后破坏了规格化 */</span> ) &#123;</span><br><span class="line">            <span class="comment">/* 再进行规格化并判断溢出 */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 假设最后的结果的符号、阶码、尾数保留在sign, exp, sig_grs中</span></span><br><span class="line">    FLOAT f;</span><br><span class="line">    f.sign = sign;</span><br><span class="line">    f.exponent = (<span class="type">uint32_t</span>) (<span class="built_in">exp</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">    f.fraction = sig_grs; <span class="comment">// here only the lowest 23 bits are kept</span></span><br><span class="line">    <span class="keyword">return</span> f.val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="乘法"><a class="markdownIt-Anchor" href="#乘法"></a> 乘法</h2><p>非常简单，浮点相乘就是尾数相乘，阶码相加</p><blockquote><p>加入GRS bits后，等同于约定中间结果的小数部分为26位。<br />对于除法而言，将被除数左移shift位后除以除数得到的小数部分为shift位，为了保证中间结果的小数部分为26位且真值不变，将多余的shift – 26位从阶码中减去，最后的阶码等于<code>fa.exponent - fb.exponent + 127 – (shift – 26)</code>。<br />对于乘法而言，用两个小数点后为23位的尾数相乘得到的乘积尾数小数点后为46位，为了保证中间结果的小数点后依然是26位，我们将多出来的46 – 26 = 20位归于阶码，因此阶码就是<code>fa.exponent + fb.exponent - 127 - 20</code>。</p></blockquote><h2 id="规格化"><a class="markdownIt-Anchor" href="#规格化"></a> 规格化</h2><blockquote><p>如果sig_grs &gt;&gt; (23 + 3) &gt; 1，则需要右规直至sig_grs &gt;&gt; (23 + 3) == 1；<br />反之如果sig_grs &gt;&gt; (23 + 3) == 0且不是非规格化浮点数（exp &gt; 0），则需要左规直至sig_grs &gt;&gt; (23 + 3) == 1。<br />注意这里的23 + 3的取值是因为我们在临时尾数的最低三位保留了GRS bits的缘故，也就是上文所述的等同于中间结果尾数sig_grs的小数部分约定为26位。<br />在规格化过程中，根据规格化的方向确定尾数右移还是左移，并对阶码进行增减操作。右规过程中需要保留粘位。<br />同时在每次右移前都要检查阶码上溢（exp &gt;= 0xff）的情形。<br />在左规过程中，则有可能发生结果出现非规格化浮点数的情况（阶码变为exp == 0），此时需要将尾数额外右移1位以对应非规格化浮点数阶码是2 ^-126的约定（否则单纯从数值上看阶码全0对应2 ^ -127）。</p></blockquote><p>整数部分不是1，(sig_grs &gt;&gt; 26) &gt; 1，，需要进行右移；整数部分 &lt; 1（也就是等于0）则需要进行左移</p><h2 id="舍入"><a class="markdownIt-Anchor" href="#舍入"></a> 舍入</h2><p>就近舍入偶数的规则可以参考视频和袁春风老师的书。</p><ol><li>Guard位为0，Round、Sticky不为0，舍去</li><li>Guard位为1，Round、Sticky为0，确保尾数是偶数</li><li>Guard位为1，Round、Sticky不为0，进位<br />注意最后要处理掉GRS位</li></ol><h1 id="pa2-1"><a class="markdownIt-Anchor" href="#pa2-1"></a> PA2-1</h1><p>示例修改文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">objdump -d ./testcase/bin/mov | less</span><br><span class="line"></span><br><span class="line">nemu/src/cpu/instr/jmp.c // 包含.h</span><br><span class="line">nemu/include/cpu/instr/jmp.h // 声明函数</span><br><span class="line"></span><br><span class="line">nemu/src/cpu/decode/opcode.c // 替换</span><br><span class="line"></span><br><span class="line">nemu/include/cpu/operand.h // OPERAND read/write</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;pa1-1-24530&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#pa1-1-24530&quot;&gt;&lt;/a&gt; PA1-1 24.5.30&lt;/h1&gt;
&lt;p&gt;又开始了ICS之旅，这次又给自己下了一个难度，找到了汪亮老师讲解的ICS 5！&lt;/p&gt;
&lt;h2 id=&quot;target&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#target&quot;&gt;&lt;/a&gt; target&lt;/h2&gt;
&lt;p&gt;第一课的目标是修正一个register错误声明&lt;/p&gt;
&lt;h2 id=&quot;insteresting&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#insteresting&quot;&gt;&lt;/a&gt; insteresting&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;中途网易源Bad Gateway 502了，更换清华源，学会了&lt;code&gt;:%s/163/tuna/g&lt;/code&gt;非常爽！&lt;/li&gt;
&lt;li&gt;又学了几个&lt;a href=&quot;../%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/Shell%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8&quot;&gt;终端快捷键&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;想到了用 &lt;code&gt;ccache&lt;/code&gt; 加速我的PA&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;problems&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#problems&quot;&gt;&lt;/a&gt; problems&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;union&lt;/code&gt; 和 &lt;code&gt;struct&lt;/code&gt; 的区别？&lt;br /&gt;
&lt;code&gt;unioin&lt;/code&gt; 在同一个内存空间中存储不同的数据类型。&lt;br /&gt;
&lt;code&gt;struct&lt;/code&gt; 则是同时存储不同的数据类型。&lt;/li&gt;
&lt;li&gt;为什么要用 &lt;code&gt;union&lt;/code&gt;？阅读i386手册&lt;br /&gt;
2.3.1 General Registers&lt;br /&gt;
As &lt;a href=&quot;https://nju-projectn.github.io/i386-manual/s02_03.htm#fig2-5&quot;&gt;Figure 2-5&lt;/a&gt; shows, the low-order word of each of these eight registers has a separate name and can be treated as a unit. This feature is useful for handling 16-bit data items and for compatibility with the 8086 and 80286 processors. The word registers are named AX, BX, CX, DX, BP, SP, SI, and DI.&lt;br /&gt;
对于CPU来说，可以把AH AX AL看成单独的单元，拆分成小块。所以它们是共用关系。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;pa1-2-alu-2465&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#pa1-2-alu-2465&quot;&gt;&lt;/a&gt; PA1-2 ALU 24.6.5&lt;/h1&gt;
&lt;h2 id=&quot;target-2&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#target-2&quot;&gt;&lt;/a&gt; target&lt;/h2&gt;
&lt;p&gt;实现ALU中的各类运算，包括设置标志位&lt;/p&gt;
&lt;h2 id=&quot;knowledge&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#knowledge&quot;&gt;&lt;/a&gt; knowledge&lt;/h2&gt;
&lt;h3 id=&quot;appendix-c&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#appendix-c&quot;&gt;&lt;/a&gt; Appendix C&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CF&lt;/td&gt;
&lt;td&gt;Carry Flag ── Set on high-order bit carry or borrow; cleared otherwise.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PF&lt;/td&gt;
&lt;td&gt;Parity Flag ── Set if low-order eight bits of result contain an even number of 1 bits; cleared otherwise.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZF&lt;/td&gt;
&lt;td&gt;Zero Flag ── Set if result is zero; cleared otherwise.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SF&lt;/td&gt;
&lt;td&gt;Sign Flag ── Set equal to high-order bit of result (0 is positive, 1 if negative).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OF&lt;br&gt;&lt;/td&gt;
&lt;td&gt;Overflow Flag ── Set if result is too large a positive number or too small a negative number (excluding sign-bit) to fit in destination operand; cleared otherwise.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</summary>
    
    
    
    
    <category term="项目" scheme="http://simuleite.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Regular Expression 正则表达式</title>
    <link href="http://simuleite.github.io/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/Regular%20Expression%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://simuleite.github.io/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/Regular%20Expression%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2024-05-13T16:00:00.000Z</published>
    <updated>2024-05-14T11:12:12.543Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本知识"><a class="markdownIt-Anchor" href="#基本知识"></a> 基本知识</h1><h2 id="特殊字符"><a class="markdownIt-Anchor" href="#特殊字符"></a> 特殊字符</h2><p><code>*</code>：匹配前面的字符0+次<br /><code>+</code>：匹配前面的字符1+次<br /><code>?</code>：匹配前面的字符0/1次<br /><code>[a-z_]</code>：匹配中括号内字符1次，示例是匹配小写字母或下划线</p><h2 id="定位符"><a class="markdownIt-Anchor" href="#定位符"></a> 定位符</h2><p><code>^</code>：表示开头处<br /><code>$</code>：表示结尾处<br /><code>\b</code>：匹配单词间的空格处</p><h2 id="特殊序列"><a class="markdownIt-Anchor" href="#特殊序列"></a> 特殊序列</h2><p><code>\d</code>：匹配数字<br /><code>\w</code>：匹配字母、数字、下划线<br /><code>\s</code>：匹配不可见字符<br /><code>\D</code>：匹配非数字<br /><code>\W</code>：匹配非字母、数字、下划线<br /><code>\S</code>：匹配非空白字符</p><h1 id="举例"><a class="markdownIt-Anchor" href="#举例"></a> 举例</h1><ul><li>“hel?o”：可以匹配heo, helo（0次或1次）</li><li>“hel+o”：可以匹配helo, hello（1次以上）</li><li>“hel*o”：可以匹配heo, helo, hello（0次以上）</li><li>r&quot;+\-*/&quot;：匹配加减乘除符号，r表示不转义</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本知识&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基本知识&quot;&gt;&lt;/a&gt; 基本知识&lt;/h1&gt;
&lt;h2 id=&quot;特殊字符&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#特殊字符&quot;&gt;&lt;/a&gt; 特殊字符&lt;/h2</summary>
      
    
    
    
    
    <category term="基本操作" scheme="http://simuleite.github.io/tags/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>vscode使用</title>
    <link href="http://simuleite.github.io/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/vscode%E4%BD%BF%E7%94%A8/"/>
    <id>http://simuleite.github.io/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/vscode%E4%BD%BF%E7%94%A8/</id>
    <published>2024-05-01T16:00:00.000Z</published>
    <updated>2024-07-06T02:36:50.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="全键盘操作指南"><a class="markdownIt-Anchor" href="#全键盘操作指南"></a> 全键盘操作指南</h1><h2 id="终端操作"><a class="markdownIt-Anchor" href="#终端操作"></a> 终端操作</h2><ul><li><code>code &lt;Folder&gt;</code> 打开工作区；相当于 <code>CTRL+K, CTRL+O</code></li><li><code>code -diff file1 file2</code> 对比两个文件（颜色标注）</li><li><code>code &lt;File&gt;</code> 打开文件</li><li><strong><code>CTRL + ←/→</code> 逐词跳转</strong></li><li><code>CTRL+K</code> 清理终端</li><li><code>CTRL+P: &gt;Tasks</code> 新建任务，用 <code>CTRL+P: &gt;run</code> 运行；相当于 <code>make</code></li></ul><h2 id="panel操作"><a class="markdownIt-Anchor" href="#panel操作"></a> Panel操作</h2><p><code>CTRL+P</code> 打开Panel</p><ul><li><code>@</code> 符号：寻找symbol，如函数名、变量名；相当于<code>CRTL+SHIFT+.</code></li><li><code># &lt;String&gt;</code> 符号：全局搜索字符串</li><li><code>&gt;join line</code> <strong>选中多行合并为一行</strong></li></ul><h2 id="编辑区操作"><a class="markdownIt-Anchor" href="#编辑区操作"></a> 编辑区操作</h2><ul><li><code>CTRL+G &lt;Line_Number&gt;</code> 跳到指定行</li><li><code>CTRL + ←/→</code> 逐词跳转；相当于vim的 <code>w</code></li><li><code>ALT + ↑/↓</code> 移动某行代码</li><li><code>ALT + SHIGT+ ↑/↓</code> 复制某行代码</li><li><code>CTRL+P: &gt;Snippets</code> 创建代码模板</li><li><code>SHIFT+ALT+F12</code> 找到某个命名的全部引用（而不是简单的搜索）</li><li><code>SHIFT+ALT+F</code> 格式化代码，相当于 <code>&gt;Format Document</code></li></ul><h1 id="设置-settingsjson"><a class="markdownIt-Anchor" href="#设置-settingsjson"></a> 设置 settings.json</h1><h2 id="显示gitignore屏蔽文件"><a class="markdownIt-Anchor" href="#显示gitignore屏蔽文件"></a> 显示.gitignore屏蔽文件</h2><p>关闭 <code>Search: Use Ignore Files</code>，或</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;search.useIgnoreFiles&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br></pre></td></tr></table></figure><h2 id="自定义终端"><a class="markdownIt-Anchor" href="#自定义终端"></a> 自定义终端</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;terminal.integrated.defaultProfile.windows&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MSYS2-UCRT64&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;terminal.integrated.profiles.windows&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;MSYS2-UCRT64&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\your\\path\\MSYS2\\msys2_shell.cmd&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;-defterm&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;-no-start&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;-here&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;-ucrt64&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;全键盘操作指南&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#全键盘操作指南&quot;&gt;&lt;/a&gt; 全键盘操作指南&lt;/h1&gt;
&lt;h2 id=&quot;终端操作&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#终端操作&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    
    <category term="基本操作" scheme="http://simuleite.github.io/tags/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>PHP ADTP后台管理</title>
    <link href="http://simuleite.github.io/ComputerScience/%E9%A1%B9%E7%9B%AE/PHP%20ADTP%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86/"/>
    <id>http://simuleite.github.io/ComputerScience/%E9%A1%B9%E7%9B%AE/PHP%20ADTP%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86/</id>
    <published>2024-04-14T16:00:00.000Z</published>
    <updated>2024-04-15T09:34:06.779Z</updated>
    
    <content type="html"><![CDATA[<h1 id="信息系统架构"><a class="markdownIt-Anchor" href="#信息系统架构"></a> 信息系统架构</h1><ul><li>信息化系统：前台 + 后台 + 数据库</li><li>B/S 模式</li><li>前端 -&gt; Server[Apache-&gt;PHP(TP6.0)] -&gt; SQL DataBase</li><li>运行逻辑：<ul><li>Client发送require请求(http协议)，包含header（length、refer信息）、body（数据）</li><li>Apache接受请求，给PHP做处理</li><li>PHP读取、处理数据；判断数据是否损毁、是否需要退回</li><li>数据更新到前端，并返回结果(success/fail)</li></ul></li></ul><span id="more"></span><h1 id="think-php-60-mvc模式"><a class="markdownIt-Anchor" href="#think-php-60-mvc模式"></a> Think Php 6.0 MVC模式</h1><ul><li>MVC模式: Model View Controller</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">      后台            数据交互  组织查询语句</span><br><span class="line"> | Controller | ---&gt; | Model | ---&gt; | DataBase |</span><br><span class="line">    ↓   ↖ ------------------------------ ↙</span><br><span class="line">决定数据处理</span><br><span class="line"> | View |</span><br><span class="line">   前端</span><br></pre></td></tr></table></figure><h2 id="举例"><a class="markdownIt-Anchor" href="#举例"></a> 举例</h2><ul><li>加载页面，产生一个require请求<code>https://website.net/app_name/class_name/method_name</code></li><li>在<code>project_floder/app_name/class_name.php</code>可以找到<code>method_name</code>方法</li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method_name</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 接收数据、构造请求</span></span><br><span class="line">    <span class="variable">$attribute1</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;attribute1&#x27;</span>, <span class="number">0</span>);  <span class="comment">// body中的内容</span></span><br><span class="line">    <span class="variable">$attribute2</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;attribute2&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="comment">// 处理逻辑</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$attribute1</span>))&#123;</span><br><span class="line">        <span class="variable">$attribute</span> = <span class="title class_">ShopLib</span>::<span class="title function_ invoke__">wxAppLogin</span>(<span class="variable">$attribute1</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$attribute</span>) &#123;</span><br><span class="line">            <span class="variable">$errData</span> = [</span><br><span class="line">                <span class="string">&#x27;errcode&#x27;</span> =&gt; -<span class="number">2</span>, <span class="comment">// 相当于字典，errData[&#x27;errcode&#x27;] = -2</span></span><br><span class="line">                <span class="string">&#x27;msg&#x27;</span> =&gt; <span class="string">&#x27;error message&#x27;</span></span><br><span class="line">            ];</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">json</span>(<span class="variable">$errData</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 到Model中查找数据</span></span><br><span class="line">    <span class="variable">$Model</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getModel</span>(); <span class="comment">// getModel()默认使用定义的主模型，可以在common/model中找到定义</span></span><br><span class="line">    <span class="variable">$where</span>[<span class="string">&#x27;key&#x27;</span>] = [</span><br><span class="line">        <span class="string">&#x27;key_name&#x27;</span> =&gt; <span class="variable">$value</span>,</span><br><span class="line">    ];</span><br><span class="line">    <span class="comment">// 处理逻辑</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$attribute</span>))&#123;</span><br><span class="line">        <span class="variable">$where</span>[<span class="string">&#x27;key&#x27;</span>] = [</span><br><span class="line">            <span class="string">&#x27;key_name&#x27;</span> =&gt; <span class="variable">$attribute</span>[<span class="string">&#x27;key_name&#x27;</span>],</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$Result</span> = <span class="variable">$Model</span>::<span class="title function_ invoke__">getDetail</span>(<span class="variable">$where</span>[<span class="string">&#x27;key&#x27;</span>], <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 组装数据</span></span><br><span class="line">    <span class="variable">$result</span> = [</span><br><span class="line">        <span class="string">&#x27;errcode&#x27;</span> =&gt; <span class="number">0</span>,</span><br><span class="line">        <span class="string">&#x27;data&#x27;</span> =&gt; <span class="variable">$Result</span></span><br><span class="line">    ];</span><br><span class="line">    <span class="comment">// 返回前台</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$result</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>app_name/class_name/method_name?attribute1=1&amp;attribute2=10</code>'?'后面的内容是参数</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;信息系统架构&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#信息系统架构&quot;&gt;&lt;/a&gt; 信息系统架构&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;信息化系统：前台 + 后台 + 数据库&lt;/li&gt;
&lt;li&gt;B/S 模式&lt;/li&gt;
&lt;li&gt;前端 -&amp;gt; Server[Apache-&amp;gt;PHP(TP6.0)] -&amp;gt; SQL DataBase&lt;/li&gt;
&lt;li&gt;运行逻辑：
&lt;ul&gt;
&lt;li&gt;Client发送require请求(http协议)，包含header（length、refer信息）、body（数据）&lt;/li&gt;
&lt;li&gt;Apache接受请求，给PHP做处理&lt;/li&gt;
&lt;li&gt;PHP读取、处理数据；判断数据是否损毁、是否需要退回&lt;/li&gt;
&lt;li&gt;数据更新到前端，并返回结果(success/fail)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>微信小程序 MiniApp</title>
    <link href="http://simuleite.github.io/ComputerScience/%E9%A1%B9%E7%9B%AE/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%20MiniApp/"/>
    <id>http://simuleite.github.io/ComputerScience/%E9%A1%B9%E7%9B%AE/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%20MiniApp/</id>
    <published>2024-03-29T16:00:00.000Z</published>
    <updated>2024-06-08T04:37:42.941Z</updated>
    
    <content type="html"><![CDATA[<p>说明：%%是注释%%</p><h1 id="程序设计"><a class="markdownIt-Anchor" href="#程序设计"></a> 程序设计</h1><ol><li>首先写<code>&lt;view class=&quot;class_name&quot;&gt;&lt;/view&gt;</code>来结构化设计；每个<code>class</code>对应一个<code>css</code>样式</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../images/avatar/avatar-1.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;motto&quot;</span>&gt;</span>Welcome, Orange Can<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;journey-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;journey&quot;</span>&gt;</span>Start your journey of miniprogram<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>css</code>中放样式信息，写法如下；全局样式可以放<code>app.css</code></li></ol><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 示范写法 */</span></span><br><span class="line"><span class="selector-class">.class_name</span>&#123;</span><br><span class="line">    attribute: rpx;</span><br><span class="line">    location_attribute: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 一般网页可以这样布局 */</span></span><br><span class="line"><span class="selector-class">.container</span>&#123; <span class="comment">/* 最外层的&lt;view&gt; */</span></span><br><span class="line">  <span class="attribute">display</span>: flex; <span class="comment">/* 布局方式 */</span></span><br><span class="line">  <span class="attribute">flex-direction</span>: column; <span class="comment">/* 列，从上到下；reverse是从下到上；可选row */</span></span><br><span class="line">  <span class="attribute">align-items</span>: center; <span class="comment">/* 居中 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><ol start="3"><li>全局配置<code>app.json</code></li></ol><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;pages_folder/folder/html&quot;</span>  %% 没有.html后缀！</span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;window&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> %% 小程序顶部菜单栏</span><br><span class="line">    <span class="attr">&quot;attribute1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;argument1&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;attribute2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;argument2&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><code>js</code>文件结构：用于匹配数据</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>( &#123;</span><br><span class="line">  <span class="attr">data</span>:&#123; <span class="comment">// 数据文件，在html中用 &#123;&#123; (object.)attribute([index]) &#125;&#125; 匹配使用</span></span><br><span class="line">    <span class="attr">object</span>: &#123;</span><br><span class="line">      <span class="attr">array</span>: [<span class="number">108</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">date</span>: <span class="string">&quot;2024-4-2&quot;</span>,  </span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;Title of article&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/image/image.png&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onLoad</span>: <span class="keyword">function</span>(<span class="params">options</span>)&#123; <span class="comment">// 注意最新版为onLoad(options)，下同</span></span><br><span class="line">    <span class="comment">// 页面初始化 options 为页面跳转所带来的参数</span></span><br><span class="line">    <span class="keyword">var</span> newAttribute = &#123;</span><br><span class="line">      <span class="attr">attribute</span>: argument</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;New Title&quot;</span> <span class="comment">// 将会修改上面data里title的值</span></span><br><span class="line">      <span class="attr">postData</span>: newAttribute <span class="comment">// 把上面的参数加入data中，此时需要用&#123;&#123; postData.attribute &#125;&#125;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onReady</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 页面渲染完成</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onShow</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//页面显示</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onHide</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 页面隐藏</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onUnload</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 页面关闭</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="5"><li>隔离数据：把数据存储在根目录<code>data/data.js</code>下</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// data.js 存储</span></span><br><span class="line"><span class="keyword">var</span> data = []</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">export</span> = &#123; <span class="comment">// 暴露模块接口</span></span><br><span class="line">  <span class="attr">postList</span>: data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// page.js 使用</span></span><br><span class="line"><span class="keyword">var</span> dataObj = <span class="title function_">requre</span>(<span class="string">&quot;/data/data.js&quot;</span>) <span class="comment">// 注意需要后缀名</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">    <span class="attr">postList</span>: dataObj.<span class="property">postList</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="6"><li>html模板</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- template.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&quot;templateName&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 模板内容，记得带&#123;&#123; attribute &#125;&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- page.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">&quot;post-item/post-item-tpl.wxml&quot;</span> /&gt;</span>  <span class="comment">&lt;!-- 导入模板 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123; postList &#125;&#125;&quot;</span> <span class="attr">wx:for-item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">wx:for-index</span>=<span class="string">&quot;idx&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">&quot;postItemTpl&quot;</span> <span class="attr">data</span>=<span class="string">&quot;&#123;&#123; ...item &#125;&#125;&quot;</span> /&gt;</span>  <span class="comment">&lt;!-- 使用...item，就不需要变量名和template匹配，template也不用item.attribute了 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="7"><li>css模板</li></ol><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 导入 */</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;post-item/post-item-tpl.wxss&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="8"><li>缓存</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">App</span>(&#123;</span><br><span class="line">  <span class="attr">onLaunch</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 尝试读取缓存，所以参数直接写&#x27;postList&#x27;；如果没有此参数就是没有缓存</span></span><br><span class="line">    <span class="keyword">var</span> storageData = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;postList&#x27;</span>); </span><br><span class="line">    <span class="keyword">if</span> (!storageData) &#123; <span class="comment">// 缓存不存在</span></span><br><span class="line">      <span class="keyword">var</span> dataObj = <span class="built_in">require</span>(<span class="string">&quot;data/data.js&quot;</span>)</span><br><span class="line">      wx.<span class="title function_">clearStorageSync</span>(); <span class="comment">// 清空本地缓存</span></span><br><span class="line">      wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;postList&#x27;</span>, dataObj.<span class="property">postList</span>) <span class="comment">// 保存数据到缓存</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异步写法</span></span><br><span class="line">     wx.<span class="title function_">setStorage</span>(&#123;</span><br><span class="line">       <span class="attr">key</span>: <span class="string">&quot;postList&quot;</span>,</span><br><span class="line">       <span class="attr">data</span>: dataObj.<span class="property">postList</span>,</span><br><span class="line">       <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">         <span class="comment">// success</span></span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="attr">fail</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">         <span class="comment">// fail</span></span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="attr">complete</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">         <span class="comment">// complete</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="9"><li></li></ol><h1 id="组件"><a class="markdownIt-Anchor" href="#组件"></a> 组件</h1><ul><li>表单</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">bindsubmit</span>=<span class="string">&quot;formSubmit&quot;</span> <span class="attr">bindreset</span>=<span class="string">&quot;formReset&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;title_class_name&quot;</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">view</span>&gt;</span> <span class="comment">&lt;!-- 表单标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;input_class_name&quot;</span> <span class="attr">placeholder-class</span>=<span class="string">&quot;place-holder&quot;</span> <span class="attr">name</span>=<span class="string">&quot;realname &quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Type your name&quot;</span> <span class="attr">value</span> = <span class="string">&quot;&#123;&#123; uersInfo.realname &#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- placeholder: 表单提示文本 --&gt;</span></span><br><span class="line">    hello</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>链接、跳转</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">catch:tap</span>=<span class="string">&quot;tapName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- bind:tap 会向之前的界面传数据；catch:tap 不会 --&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">navigateTo</span>(&#123; <span class="comment">// 1. 保留页面跳转；但是太多层级不好</span></span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;../page_folder_name/page_name&#x27;</span>,  <span class="comment">// 不需要后缀名.html</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="attr">tapName</span>: <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  wx.<span class="title function_">redirectTo</span>(&#123;  <span class="comment">// 这个也可以，重定向；2. 关闭页面跳转，没有返回按钮</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;../post/post&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;jump success&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">fail</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;jump fail&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">complete</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">console</span>(<span class="string">&quot;jump complete&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wx.<span class="property">swtichTap</span> <span class="comment">// 跳转tabbar界面，并关闭非tabbar界面</span></span><br></pre></td></tr></table></figure><ul><li>按钮</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;tapName&quot;</span> &gt;</span>Hello World!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>弹窗</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">tap_name</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;fail&#x27;</span>, <span class="comment">// the content will show to user</span></span><br><span class="line">    <span class="attr">icon</span>: <span class="string">&#x27;loading&#x27;</span>, <span class="comment">// success, fail</span></span><br><span class="line">    <span class="attr">duration</span>: <span class="number">2000</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>图片</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">background-size</span>=<span class="string">&quot;cover&quot;</span> <span class="attr">class</span>=<span class="string">&quot;userinfo-avatar&quot;</span> <span class="attr">src</span>=<span class="string">&quot;foldername/your_photo.png&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">mode</span>=<span class="string">&quot;aspectFill&quot;</span>&gt;</span>content<span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mode: aspectFit 容器内完整显示缩放；aspectFill 填充缩放；widthFix 自适应完全显示 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- content will show on the bottom of the photo --&gt;</span></span><br></pre></td></tr></table></figure><ul><li>轮播图（横向滚动切换的图片）</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">swiper</span> <span class="attr">indicator-dots</span>=<span class="string">&quot;true&quot;</span> <span class="attr">vertical</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoplay</span>=<span class="string">&quot;true&quot;</span> <span class="attr">interval</span>=<span class="string">&quot;5000&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- indicator-dots：每张图片一个小圆点，autoplay：自动播放，interval：换片间隔5秒，vertical：垂直小圆点 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;../images/post/post-1.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;../images/post/post-2.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;../images/post/post-3.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 注意，css要写两个才能起作用 */</span></span><br><span class="line">swiper&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">swiper <span class="selector-tag">image</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;说明：%%是注释%%&lt;/p&gt;
&lt;h1 id=&quot;程序设计&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#程序设计&quot;&gt;&lt;/a&gt; 程序设计&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;首先写&lt;code&gt;&amp;lt;view class=&amp;quot;class_name&amp;quot;&amp;gt;&amp;lt;/view&amp;gt;&lt;/code&gt;来结构化设计；每个&lt;code&gt;class&lt;/code&gt;对应一个&lt;code&gt;css&lt;/code&gt;样式&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;avatar&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;../images/avatar/avatar-1.jpg&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;image&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;motto&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Welcome, Orange Can&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;text&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;journey-container&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;journey&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Start your journey of miniprogram&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;text&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;view&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;view&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;code&gt;css&lt;/code&gt;中放样式信息，写法如下；全局样式可以放&lt;code&gt;app.css&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 示范写法 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.class_name&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    attribute: rpx;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    location_attribute: center;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 一般网页可以这样布局 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.container&lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;/* 最外层的&amp;lt;view&amp;gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: flex; &lt;span class=&quot;comment&quot;&gt;/* 布局方式 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;flex-direction&lt;/span&gt;: column; &lt;span class=&quot;comment&quot;&gt;/* 列，从上到下；reverse是从下到上；可选row */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;align-items&lt;/span&gt;: center; &lt;span class=&quot;comment&quot;&gt;/* 居中 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="项目" scheme="http://simuleite.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
</feed>
