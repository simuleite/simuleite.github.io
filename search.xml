<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Huorong使用</title>
    <url>/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/Huorong%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="保护文件"><a class="markdownIt-Anchor" href="#保护文件"></a> 保护文件</h1>
<p>防护中心 - 高级防护 - 自定义防护 - 锁定文件读取、创建、修改、删除权限</p>
]]></content>
      <tags>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>Matlab使用</title>
    <url>/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/Matlab%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="10-编辑"><a class="markdownIt-Anchor" href="#10-编辑"></a> 1.0 编辑</h1>
<pre><code>% 表示注释
; 表示不显示结果，只执行语句
clear 清除内存变量
clc 清除全部
pretty 用分式表示公式
simplify 化简命令
exp(x) 指数, e^x
log2(x) 以2为底数的对数
</code></pre>
<span id="more"></span>
<h2 id="11-求极限"><a class="markdownIt-Anchor" href="#11-求极限"></a> 1.1 求极限</h2>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; syms x</span><br><span class="line">&gt;&gt; limit(f(x), x, a) <span class="comment">% 表示x-&gt;a趋于某数，a默认为0，无穷大用inf</span></span><br><span class="line">    </span><br><span class="line">syms x y <span class="comment">% 用来声明所用变量x, y</span></span><br><span class="line">limit(x* <span class="built_in">log</span>(<span class="number">1</span>+ x)/<span class="built_in">sin</span>(x^<span class="number">2</span>), x, <span class="number">0</span>)  <span class="comment">% 求x-&gt;0时，左边的函数的极限</span></span><br><span class="line"></span><br><span class="line">limit(limit(f(x, y), x, <span class="number">0</span>), y, <span class="number">0</span>) // 二元函数</span><br></pre></td></tr></table></figure>
<h1 id="20-求导数"><a class="markdownIt-Anchor" href="#20-求导数"></a> 2.0 求导数</h1>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; syms x y</span><br><span class="line">&gt;&gt; y = f(x)</span><br><span class="line">&gt;&gt; dy = diff(y, x, n) <span class="comment">% n表示求导的阶数，默认为1</span></span><br><span class="line">    </span><br><span class="line">syms x y</span><br><span class="line">y= (x* <span class="built_in">exp</span>(x)- <span class="number">1</span>)/<span class="built_in">sin</span>(x);</span><br><span class="line">dy= diff(y, x, <span class="number">3</span>)  <span class="comment">% 求三阶导数</span></span><br><span class="line">&gt;&gt; pretty(dy) <span class="comment">% 分式表示</span></span><br><span class="line">&gt;&gt; simplify(dy) <span class="comment">% 简化公式</span></span><br></pre></td></tr></table></figure>
<h1 id="30-作图"><a class="markdownIt-Anchor" href="#30-作图"></a> 3.0 作图</h1>
<pre><code>新建一个文件，F5运行即可
</code></pre>
<ol>
<li><strong>ezplot</strong></li>
</ol>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; ezplot(<span class="string">&#x27;f(x)&#x27;</span>, [a, b]) <span class="comment">% [a, b]区间默认为[-2pi, 2pi]</span></span><br><span class="line">    </span><br><span class="line">ezplot(<span class="string">&#x27;y^2- x&#x27;</span>)</span><br><span class="line">&gt;&gt; <span class="built_in">hold</span> on; <span class="comment">% 保留图像，不使用hold on则只显示最后绘制的图像</span></span><br><span class="line">ezplot(<span class="string">&#x27;x- 2&#x27;</span>) <span class="comment">% &#x27;%&#x27;表示注释</span></span><br><span class="line">&gt;&gt; axis off <span class="comment">% 去掉坐标轴，on是显示坐标轴</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li><strong>plot</strong></li>
</ol>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="built_in">plot</span>(x, y) <span class="comment">% 数值计算作图</span></span><br><span class="line">    </span><br><span class="line">x = <span class="number">-6</span>: <span class="number">0.01</span>: <span class="number">6</span>;  <span class="comment">% 表示在-6, 6区间里以0.01为间隔作图</span></span><br><span class="line">y = x.^(<span class="number">4</span>/<span class="number">3</span>) - <span class="number">2</span> .* x.^(<span class="number">1</span>/<span class="number">3</span>)  <span class="comment">% 注意点乘</span></span><br><span class="line"><span class="built_in">plot</span>(x, y)</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><strong>画两个函数</strong></li>
</ol>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x = <span class="number">0</span>: <span class="number">0.01</span>: <span class="number">2</span> * <span class="built_in">pi</span>;</span><br><span class="line">y1 = <span class="built_in">sin</span>(x);</span><br><span class="line">y2 = <span class="built_in">cos</span>(x);</span><br><span class="line"><span class="built_in">plot</span>(x, y1, x, y2, <span class="string">&#x27;r&#x27;</span>)  <span class="comment">% r表示红色</span></span><br><span class="line">&gt;&gt; <span class="built_in">legend</span>(<span class="string">&#x27;sin(x)&#x27;</span>, <span class="string">&#x27;cos(x)&#x27;</span>)  <span class="comment">% 标注函数</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li><strong>散点图</strong></li>
</ol>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">12</span> <span class="number">25</span> <span class="number">52</span> <span class="number">27</span> <span class="number">86</span>];</span><br><span class="line">y = [<span class="number">24</span> <span class="number">23</span> <span class="number">34</span> <span class="number">53</span> <span class="number">67</span>];</span><br><span class="line"><span class="built_in">plot</span>(x, y, <span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="40-求解积分"><a class="markdownIt-Anchor" href="#40-求解积分"></a> 4.0 求解积分</h1>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">% 不定积分</span></span><br><span class="line">syms x <span class="comment">% 声明字母，用到什么字母写什么</span></span><br><span class="line">int(f(x), x) <span class="comment">% f(x)是被积函数，x是积分变量</span></span><br><span class="line"></span><br><span class="line">int((x+<span class="number">1</span>)/(<span class="number">3</span>*x+<span class="number">1</span>)^(<span class="number">1</span>/<span class="number">3</span>), x)</span><br><span class="line"><span class="comment">% 显示结果</span></span><br><span class="line"><span class="built_in">ans</span> = <span class="number">1</span>/<span class="number">5</span> * (<span class="number">3</span>*x+<span class="number">1</span>)^(<span class="number">2</span>/<span class="number">3</span>) * (<span class="number">2</span>+x) <span class="comment">% 注意加上C</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 定积分</span></span><br><span class="line">syms x</span><br><span class="line">int(f(x), x, a, b) <span class="comment">% a, b为积分区间</span></span><br><span class="line">quad(<span class="string">&#x27;f(x)&#x27;</span>, a, b) <span class="comment">% 数值解，需要点乘.* 点除./ 点乘方.^</span></span><br></pre></td></tr></table></figure>
<h1 id="70-求点积-叉积"><a class="markdownIt-Anchor" href="#70-求点积-叉积"></a> 7.0 求点积、叉积</h1>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo><mo stretchy="false">(</mo><mn>2</mn><mo separator="true">,</mo><mo>−</mo><mn>3</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>b</mi><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a = (2, -3, 1), b = (1, -1, 3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">−</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">)</span></span></span></span>,求：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo><mi>a</mi><mo>⋅</mo><mi>b</mi><mo separator="true">;</mo><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo><mi>a</mi><mo>×</mo><mi>b</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">(1) a \cdot b; (2) a \times b.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mclose">)</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mord">.</span></span></span></span></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">2</span>, <span class="number">-3</span>, <span class="number">1</span>]; b = [<span class="number">1</span>, <span class="number">-1</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">dot</span>(a, b) <span class="comment">% 点积</span></span><br><span class="line"><span class="built_in">cross</span>(a, b) <span class="comment">% 叉积</span></span><br></pre></td></tr></table></figure>
<h1 id="80-求解偏导数"><a class="markdownIt-Anchor" href="#80-求解偏导数"></a> 8.0 求解偏导数</h1>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">syms x y</span><br><span class="line">f = x^<span class="number">3</span> * <span class="built_in">exp</span>(-y);</span><br><span class="line">dxf = diff(f, x, n) <span class="comment">% n为阶数</span></span><br><span class="line">diff(f, x), diff(f, y) <span class="comment">% 输出两条</span></span><br><span class="line">dxyf = diff(dxf, x)</span><br><span class="line">simplify(dy) <span class="comment">% 化简</span></span><br><span class="line">pretty(dy)</span><br></pre></td></tr></table></figure>
<h1 id="求解条件极值"><a class="markdownIt-Anchor" href="#求解条件极值"></a> 求解条件极值</h1>
<p>甲乙两种产品的产量为x和y件时，总成本函数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mn>3</mn><mi>x</mi><mo>+</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">C(x,y)=3x+y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>（元），价格函数为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub><mo>=</mo><mn>83</mn><mo>−</mo><mn>2</mn><mi>x</mi><mo>−</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">P_1=83-2x-y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">8</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>2</mn></msub><mo>=</mo><mn>51</mn><mo>−</mo><mi>x</mi><mo>−</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">P_2=51-x-y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">5</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>（元），若规定这两种产品的产量之和为40，试求最大利润。</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">syms x</span><br><span class="line">func = @(x) -((<span class="number">83</span> - <span class="number">2</span>*x(<span class="number">1</span>) - x(<span class="number">2</span>)) * x(<span class="number">1</span>) + (<span class="number">51</span> - x(<span class="number">1</span>) - x(<span class="number">2</span>)) * x(<span class="number">2</span>) - (<span class="number">3</span>*x(<span class="number">1</span>) + x(<span class="number">2</span>))); <span class="comment">% 取负号以求最大值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 初始点</span></span><br><span class="line">x0 = [<span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">% 约束条件</span></span><br><span class="line">A = [];</span><br><span class="line">b = [];</span><br><span class="line">Aeq = [<span class="number">1</span>, <span class="number">1</span>];</span><br><span class="line">beq = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">% 边界条件</span></span><br><span class="line">lb = [<span class="number">0</span>, <span class="number">0</span>]; <span class="comment">% 假设 x 和 y 不能为负</span></span><br><span class="line">ub = [<span class="number">40</span>, <span class="number">40</span>]; <span class="comment">% 假设 x 和 y 的最大值为 40，根据问题具体调整</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 求解优化问题</span></span><br><span class="line">[x, fval] = fmincon(func, x0, A, b, Aeq, beq, lb, ub);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 输出结果</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;最优点：&#x27;</span>);</span><br><span class="line"><span class="built_in">disp</span>([x(<span class="number">1</span>), x(<span class="number">2</span>)]);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;最大利润：&#x27;</span>);</span><br><span class="line"><span class="built_in">disp</span>(-fval); <span class="comment">% 取负以获得最大利润值</span></span><br></pre></td></tr></table></figure>
<h1 id="求二元函数全微分-极限"><a class="markdownIt-Anchor" href="#求二元函数全微分-极限"></a> 求二元函数全微分、极限</h1>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">syms x, y, dx, dy</span><br><span class="line">func = f(x, y)</span><br><span class="line">df = diff(func, x)*dx + diff(func, y)*dy <span class="comment">% 全微分</span></span><br><span class="line">lmx = limit(func ,x ,<span class="number">0</span>)</span><br><span class="line">lmxy = limit(lmx , y, <span class="number">0</span>) <span class="comment">% 极限</span></span><br></pre></td></tr></table></figure>
<h1 id="求二重积分"><a class="markdownIt-Anchor" href="#求二重积分"></a> 求二重积分</h1>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">int( int(f, y, g1(x), g2(x)), x, a, b )</span><br><span class="line">f = xy</span><br><span class="line">int( int() )</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell终端使用</title>
    <url>/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/Shell%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="shortcuts-快捷键"><a class="markdownIt-Anchor" href="#shortcuts-快捷键"></a> Shortcuts 快捷键</h1>
<ul>
<li><code>CTRL+N|P</code> 下、上一条命令</li>
<li><code>CTRL+A|E</code> 跳到行首、行尾</li>
<li><code>ALT+F|B</code> 或 <code>CTRL+←|→</code> 下、上一个单词（右ALT开始使用~）</li>
<li><code>CTRL+W</code> 删除前面的单词</li>
<li><code>CTRL+D|H</code> 删除一个字符（D向后删除=Delete，H向前删除=Backspace）</li>
<li><code>CTRL+U</code> 删除整行</li>
<li><code>CTRL+R</code> 搜索整行，Esc退出</li>
</ul>
<h1 id="bash-prompt-string配置"><a class="markdownIt-Anchor" href="#bash-prompt-string配置"></a> Bash prompt string配置</h1>
<ul>
<li>PS(prompt string): 是命令行的默认显示文本，如：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">username@hostname /work_directory</span><br><span class="line">$ </span><br></pre></td></tr></table></figure>
<ul>
<li>可以在<code>~/.bash_profile</code>或<code>.bashrc</code>中修改默认显示（Windows Git Bash是<code>git-prompt.sh</code>）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Windows Git Bash默认配置，其中\007前面的$TITLEPREFIX和$PWD是标签栏的内容，git_ps1会显示git工作分支</span></span><br><span class="line"><span class="built_in">export</span> PS1=<span class="string">&quot;\[\e]0;<span class="variable">$TITLEPREFIX</span>:<span class="variable">$PWD</span>\007\]\n\[\e[32m\]\u@\h \[\e[35m\]<span class="variable">$MSYSTEM</span> \[\e[33m\]\w\[\e[36m\]`__git_ps1`\[\e[0m\]\n$ &quot;</span> </span><br><span class="line"><span class="comment"># 显示效果</span></span><br><span class="line">username@hostname MINGW /work_directory</span><br><span class="line">$ </span><br><span class="line"></span><br><span class="line"><span class="comment"># 简洁配置，将\h换成了指定文本，保留了命令行前的换行，将标签名改为当前目录</span></span><br><span class="line"><span class="built_in">export</span> PS1=<span class="string">&quot;\[\e]0;\W\007\] \n\[\e[32m\]\u@Host \[\e[33m\]\w\[\e[36m\]`__git_ps1`\[\e[0m\]\n$ &quot;</span> </span><br><span class="line"><span class="comment"># 显示效果</span></span><br><span class="line">username@Host /work_directory</span><br><span class="line">$ </span><br></pre></td></tr></table></figure>
<ul>
<li>Windows虚拟环境后不会换行：设置<code>venv/Scripts/activate</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$&#123;VIRTUAL_ENV_DISABLE_PROMPT-&#125;</span>&quot;</span> ] ; <span class="keyword">then</span></span><br><span class="line">    _OLD_VIRTUAL_PS1=<span class="string">&quot;<span class="variable">$&#123;PS1-&#125;</span>&quot;</span></span><br><span class="line">    PS1=<span class="string">&quot;\n(<span class="variable">$&#123;VIRTUAL_ENV_PROMPT&#125;</span>) <span class="variable">$&#123;PS1-&#125;</span>&quot;</span> <span class="comment"># 添加换行符</span></span><br><span class="line">    <span class="built_in">export</span> PS1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<ul>
<li>MSYS2显示git prompt</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># etc/profile.d/git-prompt.sh</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -f /etc/profile.d/git-sdk.sh</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        TITLEPREFIX=SDK-<span class="variable">$&#123;MSYSTEM#MINGW&#125;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        TITLEPREFIX=<span class="variable">$MSYSTEM</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -f ~/.config/git/git-prompt.sh</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        . ~/.config/git/git-prompt.sh</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        PS1=<span class="string">&#x27;\[\033]0;$TITLEPREFIX:$PWD\007\]&#x27;</span> <span class="comment"># set window title</span></span><br><span class="line">        PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;\n&#x27;</span>                 <span class="comment"># new line</span></span><br><span class="line">        PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;\[\033[32m\]&#x27;</span>       <span class="comment"># change to green</span></span><br><span class="line">        PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;\u@\h &#x27;</span>             <span class="comment"># user@host&lt;space&gt;</span></span><br><span class="line">        PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;\[\033[35m\]&#x27;</span>       <span class="comment"># change to purple</span></span><br><span class="line">        PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;$MSYSTEM &#x27;</span>          <span class="comment"># show MSYSTEM</span></span><br><span class="line">        PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;\[\033[33m\]&#x27;</span>       <span class="comment"># change to brownish yellow</span></span><br><span class="line">        PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;\w&#x27;</span>                 <span class="comment"># current working directory</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">test</span> -z <span class="string">&quot;<span class="variable">$WINELOADERNOEXEC</span>&quot;</span></span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                GIT_EXEC_PATH=<span class="string">&quot;<span class="subst">$(git --exec-path 2&gt;/dev/null)</span>&quot;</span></span><br><span class="line">                COMPLETION_PATH=<span class="string">&quot;<span class="variable">$&#123;GIT_EXEC_PATH%/libexec/git-core&#125;</span>&quot;</span></span><br><span class="line">                COMPLETION_PATH=<span class="string">&quot;<span class="variable">$&#123;COMPLETION_PATH%/lib/git-core&#125;</span>&quot;</span></span><br><span class="line">                COMPLETION_PATH=<span class="string">&quot;<span class="variable">$COMPLETION_PATH</span>/share/git/completion&quot;</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">test</span> -f <span class="string">&quot;<span class="variable">$COMPLETION_PATH</span>/git-prompt.sh&quot;</span></span><br><span class="line">                <span class="keyword">then</span></span><br><span class="line">                        . <span class="string">&quot;<span class="variable">$COMPLETION_PATH</span>/git-completion.bash&quot;</span></span><br><span class="line">                        . <span class="string">&quot;<span class="variable">$COMPLETION_PATH</span>/git-prompt.sh&quot;</span></span><br><span class="line">                        PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;\[\033[36m\]&#x27;</span>  <span class="comment"># change color to cyan</span></span><br><span class="line">                        PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;`__git_ps1`&#x27;</span>   <span class="comment"># bash function</span></span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;\[\033[0m\]&#x27;</span>        <span class="comment"># change color</span></span><br><span class="line">        PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;\n&#x27;</span>                 <span class="comment"># new line</span></span><br><span class="line">        PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span><span class="string">&#x27;$ &#x27;</span>                 <span class="comment"># prompt: always $</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line">MSYS2_PS1=<span class="string">&quot;<span class="variable">$PS1</span>&quot;</span>               <span class="comment"># for detection by MSYS2 SDK&#x27;s bash.basrc</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Evaluate all user-specific Bash completion scripts (if any)</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -z <span class="string">&quot;<span class="variable">$WINELOADERNOEXEC</span>&quot;</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$HOME</span>&quot;</span>/bash_completion.d/*.bash</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">                <span class="comment"># Handle absence of any scripts (or the folder) gracefully</span></span><br><span class="line">                <span class="built_in">test</span> ! -f <span class="string">&quot;<span class="variable">$c</span>&quot;</span> ||</span><br><span class="line">                . <span class="string">&quot;<span class="variable">$c</span>&quot;</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ~/.bashrc || ~/.bash_profile</span></span><br><span class="line"><span class="built_in">shopt</span> -q login_shell || . /etc/profile.d/git-prompt.sh</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">syntax</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\u</td>
<td>username</td>
</tr>
<tr>
<td style="text-align:center">\h</td>
<td>hostname</td>
</tr>
<tr>
<td style="text-align:center">\e</td>
<td>set colors</td>
</tr>
<tr>
<td style="text-align:center">\w</td>
<td>work directory</td>
</tr>
<tr>
<td style="text-align:center">\W</td>
<td>current diretory</td>
</tr>
<tr>
<td style="text-align:center">\n</td>
<td>line feed</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<h1 id="bash-shell"><a class="markdownIt-Anchor" href="#bash-shell"></a> Bash Shell</h1>
<ol>
<li>格式</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">value=&quot;string&quot;（不要有空格）</span><br><span class="line">echo $value</span><br><span class="line">    </span><br><span class="line">执行使用sh filename.sh</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>&quot;%d&quot;输出变量， '%d’输出%d（不转义）</li>
<li>declare -afirx 定义变量为数组函数整数只读环境（默认为字符串）</li>
<li>read value 读取变量</li>
<li>$0 $1 $2 表示命令行参数sh <a href="http://file.sh">file.sh</a> $0 $1</li>
<li>if then</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if [ &quot;$yn&quot; = &quot;y&quot; ] &amp;&amp; [ 条件二 ]（注意空格）; then</span><br><span class="line">语句</span><br><span class="line">else</span><br><span class="line">语句</span><br><span class="line">fi 结束</span><br></pre></td></tr></table></figure>
<ol>
<li>case</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">case $value in</span><br><span class="line">one)</span><br><span class="line">语句</span><br><span class="line">value)</span><br><span class="line">语句</span><br><span class="line">exit 1</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>
<ol start="8">
<li>for</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (( i=1；条件2；i=i+1 ))</span><br><span class="line">do</span><br><span class="line">语句</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<ol start="9">
<li>while</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while [条件] || [条件]</span><br><span class="line">do</span><br><span class="line">语句</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<ol start="10">
<li>调试脚本</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh -nvx</span><br><span class="line">n 检查脚本错误</span><br><span class="line">v 执行脚本，并把脚本内容打印</span><br><span class="line">x 与v稍微不同(折叠显示)</span><br></pre></td></tr></table></figure>
<h1 id="好用的工具"><a class="markdownIt-Anchor" href="#好用的工具"></a> 好用的工具</h1>
<h2 id="pandoc"><a class="markdownIt-Anchor" href="#pandoc"></a> Pandoc</h2>
<p>文本格式转换</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pandoc --from markdown --to docx source.md -o dest.docx</span><br><span class="line">pandoc -f markdown source.md -t docx -o dest.docx</span><br><span class="line">pandoc source.md -o dest.docx --ignore-args # 忽略参数</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：为了最佳转换效果，markdown文件每行后都要空行</p>
]]></content>
      <tags>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>Listary使用</title>
    <url>/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/Listary%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="网络搜索"><a class="markdownIt-Anchor" href="#网络搜索"></a> 网络搜索</h1>
<table>
<thead>
<tr>
<th>网站</th>
<th>URL</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>哔哩哔哩</td>
<td><a href="https://search.bilibili.com/all?keyword=%7Bquery%7D">https://search.bilibili.com/all?keyword={query}</a></td>
<td></td>
</tr>
<tr>
<td>知乎</td>
<td><a href="https://www.zhihu.com/search?type=content&amp;q=%7Bquery%7D">https://www.zhihu.com/search?type=content&amp;q={query}</a></td>
<td></td>
</tr>
<tr>
<td>百度贴吧</td>
<td><a href="https://tieba.baidu.com/f?ie=utf-8&amp;kw=%7Bquery%7D&amp;fr=search">https://tieba.baidu.com/f?ie=utf-8&amp;kw={query}&amp;fr=search</a></td>
<td>优先搜索吧名</td>
</tr>
<tr>
<td>小红书</td>
<td><a href="https://www.xiaohongshu.com/search_result?keyword=%7Bquery%7D&amp;source=web_search_result_notes">https://www.xiaohongshu.com/search_result?keyword={query}&amp;source=web_search_result_notes</a></td>
<td>需要登录</td>
</tr>
<tr>
<td>淘宝</td>
<td><a href="https://s.taobao.com/search?q=%7Bquery%7D&amp;commend=all&amp;search_type=item&amp;sourceId=tb.index&amp;ie=utf8">https://s.taobao.com/search?q={query}&amp;commend=all&amp;search_type=item&amp;sourceId=tb.index&amp;ie=utf8</a></td>
<td></td>
</tr>
<tr>
<td>京东</td>
<td><a href="https://search.jd.com/Search?keyword=%7Bquery%7D&amp;enc=utf-8">https://search.jd.com/Search?keyword={query}&amp;enc=utf-8</a></td>
<td></td>
</tr>
<tr>
<td>Yandex</td>
<td><a href="https://yandex.com/search/?text=%7Bquery%7D">https://yandex.com/search/?text={query}</a></td>
<td></td>
</tr>
<tr>
<td>GitHub</td>
<td><a href="https://github.com/search?q=%7Bquery%7D&amp;type=repositories">https://github.com/search?q={query}&amp;type=repositories</a></td>
<td></td>
</tr>
<tr>
<td>tldr</td>
<td><a href="https://tldr.inbrowser.app/pages/common/%7Bquery%7D">https://tldr.inbrowser.app/pages/common/{query}</a></td>
<td>mannual查Linux命令</td>
</tr>
<tr>
<td>必应翻译</td>
<td><a href="https://cn.bing.com/translator?ref=TThis&amp;text=%7Bquery%7D&amp;from=en&amp;to=zh-Hant">https://cn.bing.com/translator?ref=TThis&amp;text={query}&amp;from=en&amp;to=zh-Hant</a></td>
<td>英译中</td>
</tr>
<tr>
<td>DeepL翻译</td>
<td><a href="https://www.deepl.com/translator#en/zh/%7Bquery%7D">https://www.deepl.com/translator#en/zh/{query}</a></td>
<td>英译中</td>
</tr>
</tbody>
</table>
<ul>
<li>有时候站内搜索没有搜索引擎准确，可以使用搜索引擎过滤网站<br />
过滤站点：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://&lt;ENGINE.URL&gt;/search?text=site%3A&lt;SITE.URL&gt;%20&#123;query&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>Makefile使用</title>
    <url>/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/Makefile%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="标准写法"><a class="markdownIt-Anchor" href="#标准写法"></a> 标准写法</h1>
<ul>
<li>编译<code>hello.c</code></li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">hello:hello.c</span></span><br><span class="line">    gcc hello.c -o hello    <span class="comment"># 注意开头的tab, 而不是空格</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: clean </span></span><br><span class="line"><span class="comment"># 用于指示&quot;clean是一个伪目标&quot;, 伪目标相应的命令序列总是会被执行.</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm hello    <span class="comment"># 注意开头的tab, 而不是空格</span></span><br><span class="line"></span><br><span class="line"><span class="section">生成目标文件名:依赖文件列表</span></span><br><span class="line">    用于生成目标文件的命令序列   <span class="comment"># 注意开头的tab, 而不是空格</span></span><br></pre></td></tr></table></figure>
<ul>
<li>更有效率的写法</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">CC=gcc</span><br><span class="line">CFLAGS=-I.</span><br><span class="line"></span><br><span class="line"><span class="section">hellomake: hellomake.o hellofunc.o</span></span><br><span class="line">     <span class="variable">$(CC)</span> -o hellomake hellomake.o hellofunc.o</span><br></pre></td></tr></table></figure>
<ul>
<li>全部编译</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">SOURCE = <span class="variable">$(<span class="built_in">wildcard</span> *.c)</span>  </span><br><span class="line">TARGETS = <span class="variable">$(<span class="built_in">patsubst</span> %.c, %, <span class="variable">$(SOURCE)</span>)</span>  </span><br><span class="line"></span><br><span class="line">CC = gcc  </span><br><span class="line">CFLAGS = -Wall -g  </span><br><span class="line"></span><br><span class="line"><span class="section">all: <span class="variable">$(TARGETS)</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="section">%: %.c  </span></span><br><span class="line">    <span class="variable">$(CC)</span> <span class="variable">$&lt;</span> <span class="variable">$(CFLAGS)</span> -o <span class="variable">$@</span>  </span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>:clean all </span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:  </span></span><br><span class="line">    rm -f <span class="variable">$(TARGETS)</span></span><br></pre></td></tr></table></figure>
<h1 id="makefile文件的格式"><a class="markdownIt-Anchor" href="#makefile文件的格式"></a> Makefile文件的格式</h1>
<pre><code>[廖雪峰](http://ruanyifeng.com/blog/2015/02/make.html)
</code></pre>
<p>Makefile文件由一系列规则（rules）构成。每条规则的形式如下。</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;target&gt;: &lt;prerequisites&gt; </span></span><br><span class="line">[tab]  &lt;commands&gt;</span><br></pre></td></tr></table></figure>
<p>上面第一行冒号前面的部分，叫做&quot;目标&quot;（target），冒号后面的部分叫做&quot;前置条件&quot;（prerequisites）；第二行必须由一个tab键起首，后面跟着&quot;命令&quot;（commands）。</p>
<ul>
<li>键入<code>make -nB</code>, 它会让<code>make</code>程序以&quot;只输出命令但不执行&quot;的方式强制构建目标。</li>
</ul>
<h1 id="文件名匹配"><a class="markdownIt-Anchor" href="#文件名匹配"></a> 文件名匹配</h1>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">%.o: %.c # 所有.o/.c结尾的文件</span></span><br></pre></td></tr></table></figure>
<h1 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h1>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">txt = Hello World</span><br><span class="line"><span class="section">test:</span></span><br><span class="line">    @echo <span class="variable">$(txt)</span> <span class="comment"># 变量放在$()中，@表示不打印直接执行</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>Mermaid使用</title>
    <url>/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/Mermaid%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="flowchart"><a class="markdownIt-Anchor" href="#flowchart"></a> Flowchart</h1>
<h2 id="基本语法"><a class="markdownIt-Anchor" href="#基本语法"></a> 基本语法</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flowchart LR/TD</span><br><span class="line">    id[Content]</span><br><span class="line">    item[Line1</span><br><span class="line">    Line2</span><br><span class="line">    Line3]</span><br><span class="line">    id --&gt; item</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    id[Content]</span><br><span class="line">    item[Line1</span><br><span class="line">    Line2</span><br><span class="line">    Line3]</span><br><span class="line">    id --&gt; item</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    item&#123;Relationship&#125;</span><br><span class="line">    id(Entity)</span><br><span class="line"></span><br><span class="line">    id -- Text --&gt; item</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flowchart TD;</span><br><span class="line">    item&#123;Relationship&#125;;</span><br><span class="line">    id(Entity);</span><br><span class="line"></span><br><span class="line">    id -- Text --&gt; item;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>Regular Expression 正则表达式</title>
    <url>/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/Regular%20Expression%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="基本知识"><a class="markdownIt-Anchor" href="#基本知识"></a> 基本知识</h1>
<h2 id="特殊字符"><a class="markdownIt-Anchor" href="#特殊字符"></a> 特殊字符</h2>
<p><code>*</code>：匹配前面的字符0+次<br />
<code>+</code>：匹配前面的字符1+次<br />
<code>?</code>：匹配前面的字符0/1次<br />
<code>[a-z_]</code>：匹配中括号内字符1次，示例是匹配小写字母或下划线</p>
<h2 id="定位符"><a class="markdownIt-Anchor" href="#定位符"></a> 定位符</h2>
<p><code>^</code>：表示开头处<br />
<code>$</code>：表示结尾处<br />
<code>\b</code>：匹配单词间的空格处</p>
<h2 id="特殊序列"><a class="markdownIt-Anchor" href="#特殊序列"></a> 特殊序列</h2>
<p><code>\d</code>：匹配数字<br />
<code>\w</code>：匹配字母、数字、下划线<br />
<code>\s</code>：匹配不可见字符<br />
<code>\D</code>：匹配非数字<br />
<code>\W</code>：匹配非字母、数字、下划线<br />
<code>\S</code>：匹配非空白字符</p>
<h1 id="举例"><a class="markdownIt-Anchor" href="#举例"></a> 举例</h1>
<ul>
<li>“hel?o”：可以匹配heo, helo（0次或1次）</li>
<li>“hel+o”：可以匹配helo, hello（1次以上）</li>
<li>“hel*o”：可以匹配heo, helo, hello（0次以上）</li>
<li>r&quot;+\-*/&quot;：匹配加减乘除符号，r表示不转义</li>
</ul>
]]></content>
      <tags>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows scripts使用</title>
    <url>/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/Windows%20scripts%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="task-scheduler"><a class="markdownIt-Anchor" href="#task-scheduler"></a> Task Scheduler</h1>
<p>WIN+R, <code>taskschd.msc</code><br />
在这里可以设置定时任务、登录任务。<br />
有些软件的开机自启动就设置在这里。比起组策略有更多的可选项（延迟启动，网络和电源要求等）</p>
<h1 id="group-policy-editor"><a class="markdownIt-Anchor" href="#group-policy-editor"></a> Group Policy Editor</h1>
<p>WIN+R, <code>gpedit.msc</code><br />
在这里可以设置一些开关机时执行的任务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Computer Configuration -&gt; Windows settings -&gt; Scripts -&gt; Shutdown -&gt; Properties -&gt; Add</span><br></pre></td></tr></table></figure>
<h1 id="静默运行脚本"><a class="markdownIt-Anchor" href="#静默运行脚本"></a> 静默运行脚本</h1>
<p>Task Scheduler没有办法隐藏窗口<br />
在Task Scheduler运行该vbs脚本，目标脚本路径作为参数即可实现静默运行。</p>
<figure class="highlight vbs"><table><tr><td class="code"><pre><span class="line"><span class="comment">&#x27; minRun.vbs</span></span><br><span class="line"><span class="comment">&#x27; Run minRun.vbs Task Scheduler在可选参数提供实际脚本地址</span></span><br><span class="line"><span class="comment">&#x27; 检查是否提供了批处理文件路径参数</span></span><br><span class="line"><span class="keyword">If</span> WScript.Arguments.Count = <span class="number">0</span> <span class="keyword">Then</span></span><br><span class="line">    WScript.Echo <span class="string">&quot;Error: No batch file path provided.&quot;</span></span><br><span class="line">    WScript.Quit <span class="number">1</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27; 获取批处理文件路径参数</span></span><br><span class="line"><span class="keyword">Dim</span> batchFilePath</span><br><span class="line">batchFilePath = WScript.Arguments(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27; 检查批处理文件是否存在</span></span><br><span class="line"><span class="keyword">If</span> <span class="keyword">Not</span> FileExists(batchFilePath) <span class="keyword">Then</span></span><br><span class="line">    WScript.Echo <span class="string">&quot;Error: Batch file not found at &quot;</span> &amp; batchFilePath</span><br><span class="line">    WScript.Quit <span class="number">1</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27; 创建 WScript.Shell 对象</span></span><br><span class="line"><span class="keyword">Set</span> oShell = <span class="built_in">CreateObject</span>(<span class="string">&quot;Wscript.Shell&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27; 执行批处理文件</span></span><br><span class="line"><span class="comment">&#x27; 使用 0 表示不等待批处理文件执行完成</span></span><br><span class="line"><span class="comment">&#x27; 使用 True 表示以同步方式运行（等待批处理执行完成）</span></span><br><span class="line">oShell.Run batchFilePath, <span class="number">0</span>, <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27; 清理</span></span><br><span class="line"><span class="keyword">Set</span> oShell = <span class="literal">Nothing</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27; 检查文件是否存在的辅助函数</span></span><br><span class="line"><span class="keyword">Function</span> FileExists(filePath)</span><br><span class="line">    <span class="keyword">Dim</span> fso</span><br><span class="line">    <span class="keyword">Set</span> fso = <span class="built_in">CreateObject</span>(<span class="string">&quot;Scripting.FileSystemObject&quot;</span>)</span><br><span class="line">    FileExists = fso.FileExists(filePath)</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>gdb使用</title>
    <url>/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/gdb%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="nju-gdb六步走"><a class="markdownIt-Anchor" href="#nju-gdb六步走"></a> NJU gdb六步走</h2>
<ol>
<li>启动gdb，加载可执行文件</li>
<li>设置断点 <code>break main</code> 入口处设置断点</li>
<li>启动程序 <code>run （参数）</code></li>
<li>查看程序当然状态
<ul>
<li><code>info register (EIP)</code>: 显示所有寄存器（或只有EIP寄存器）的内容</li>
<li>栈：保存过程执行时的数据信息</li>
</ul>
</li>
<li>继续下一条指令
<ul>
<li><code>step</code> 或  <code>si</code>（机器指令）</li>
</ul>
</li>
<li>退出 <code>quit</code></li>
</ol>
<h1 id="10-cprograming"><a class="markdownIt-Anchor" href="#10-cprograming"></a> 1.0 Cprograming</h1>
<p>原网址： <a href="https://www.cprogramming.com/gdb.html">https://www.cprogramming.com/gdb.html</a></p>
<pre><code>gcc main.c -g -Wall -Werror -o main    启动编译
gdb main    开始debug
list 列出代码
break 行    设置断点
	info break    断点信息
run   运行程序
next或step  进行单步编译(next跳过函数)
print &lt;value&gt;    打印变量的值
continue    跳到下一个断点位置
quit     退出
</code></pre>
<span id="more"></span>
<h1 id="20-linuxc一站式编程"><a class="markdownIt-Anchor" href="#20-linuxc一站式编程"></a> 2.0 LinuxC一站式编程</h1>
<p>参考网址： <a href="https://docs.huihoo.com/c/linux-c-programming/ch10.html">https://docs.huihoo.com/c/linux-c-programming/ch10.html</a></p>
<pre><code>gcc main.c -g -o main 即可开始编译，-Wall生成所有警告

start 开始执行函数（执行到main函数第一句）
run 像./程序一样执行程序（除非遇到断点才会停下）
finish 让函数执行到返回值为止
backtrace 查看调用帧命令（可以列出当前执行代码行，并且把变量替换为你传入的数字
info locals 查看局部变量的值, local（a. 局部的）
frame 1 | i locals 查看1号栈帧函数（如main）的局部变量

set var sum=0 把sum的值设置为0
print result[2]=33 把result[2]的值修改为33
pirnt sum 打印sum的值
display sum 每次执行都打印sum的值
undisplay 1 取消跟踪编号为1的变量（如1：sum）

break 9 在第九行设置断点（和continue搭配使用）
break 9 if sum != 0 仅当sum不为0时才中断
info breakpoint 查看已经设置的断点
delete breakpoints 2 删除断点2（去掉2表示删除全部断点） 
disable breakpoints 2 禁用编号为2的断点
enable 2 开启编号为2的断点

watch input[5] 在input[5]处设置观察点（搭配continue使用）
info watchpoints 查看当前观察点
x(/7bx) input 从input第一个字节开始，打印7个字节；
 7表示打印7组，b表示每个字节一组，x表示按16进制打印（括号内可以不用，但只能打印一组）
</code></pre>
<h1 id="30-nju-ics"><a class="markdownIt-Anchor" href="#30-nju-ics"></a> 3.0 NJU ICS</h1>
<ul>
<li>gcc -g 表示带调试信息，单步调试必须加入</li>
<li>-m32 表示编译成x86-32位指令</li>
<li>-o0表示不优化</li>
</ul>
]]></content>
      <tags>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql使用</title>
    <url>/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/mysql%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h1>
<h2 id="启动数据库"><a class="markdownIt-Anchor" href="#启动数据库"></a> 启动数据库</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要管理员权限</span></span><br><span class="line">net start &lt;mysql-service_name&gt;</span><br></pre></td></tr></table></figure>
<h1 id="登录数据库"><a class="markdownIt-Anchor" href="#登录数据库"></a> 登录数据库</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u &lt;username&gt; -p</span><br><span class="line">$ &lt;password&gt;</span><br></pre></td></tr></table></figure>
<h2 id="导入数据库"><a class="markdownIt-Anchor" href="#导入数据库"></a> 导入数据库</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 设置中文字符集</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> NAMES <span class="string">&#x27;utf8mb4&#x27;</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SET</span> character_set_server <span class="operator">=</span> <span class="string">&#x27;utf8mb4&#x27;</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> SOURCE <span class="operator">/</span>path<span class="operator">/</span><span class="keyword">to</span><span class="operator">/</span>database.sql;</span><br></pre></td></tr></table></figure>
<h2 id="数据库"><a class="markdownIt-Anchor" href="#数据库"></a> 数据库</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE yourDatabase</span><br><span class="line">  <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看所有数据库</span></span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 进入数据库</span></span><br><span class="line">use yourDatabase</span><br></pre></td></tr></table></figure>
<h2 id="表"><a class="markdownIt-Anchor" href="#表"></a> 表</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> yourTable (</span><br><span class="line">  id   <span class="type">INT</span>         AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>       <span class="keyword">DEFAULT</span> <span class="string">&#x27;worker&#x27;</span>,</span><br><span class="line">  age  <span class="type">INT</span>         ,</span><br><span class="line">  addr <span class="type">varchar</span>(<span class="number">50</span>) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看表 </span></span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">add</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span> <span class="type">char</span>(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">column</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除整张表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h1 id="查询"><a class="markdownIt-Anchor" href="#查询"></a> 查询</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- \G 参数单独展示每一行，避免过宽</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span>\G</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询多列</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>column1<span class="operator">&gt;</span>, <span class="operator">&lt;</span>column2<span class="operator">&gt;</span>, <span class="operator">&lt;</span>column3<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">from</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 只显示不同项</span></span><br><span class="line"><span class="comment">-- 注意，对多列使用时，两列完全一样才会被屏蔽</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> <span class="operator">&lt;</span><span class="keyword">column</span><span class="operator">&gt;</span> <span class="keyword">from</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 检错前5行</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span> <span class="keyword">from</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span> limit <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<h1 id="排序"><a class="markdownIt-Anchor" href="#排序"></a> 排序</h1>
<blockquote>
<p><code>ORDER BY</code> 需要放在 <code>WHERE</code> 之后</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 按列升序排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">from</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span> (<span class="keyword">asc</span>); <span class="comment">-- 默认Ascending</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 降序排序。对多列排序，每列都要跟desc</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">from</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="operator">&lt;</span>col1<span class="operator">&gt;</span> <span class="keyword">desc</span>, <span class="operator">&lt;</span>col2<span class="operator">&gt;</span> <span class="keyword">desc</span>; <span class="comment">-- Descending降序排序</span></span><br></pre></td></tr></table></figure>
<h1 id="筛选"><a class="markdownIt-Anchor" href="#筛选"></a> 筛选</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 筛选col = value的字段</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">from</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">where</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span> <span class="operator">=</span> <span class="operator">&lt;</span><span class="keyword">value</span><span class="operator">&gt;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 筛选between 0 and 10的字段</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">from</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">where</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span> <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 筛选col为空的字段</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">from</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">where</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span> <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>
<h1 id="逻辑操作符"><a class="markdownIt-Anchor" href="#逻辑操作符"></a> 逻辑操作符</h1>
<blockquote>
<p>优先级： <code>AND</code> &gt; <code>OR</code></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- AND, OR</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">from</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">where</span> <span class="operator">&lt;</span>cond1<span class="operator">&gt;</span> <span class="keyword">or</span> (<span class="operator">&lt;</span>cond2<span class="operator">&gt;</span> <span class="keyword">and</span> <span class="operator">&lt;</span>cond3<span class="operator">&gt;</span>); <span class="comment">-- 不加括号，结果会改变</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- IN, NOT</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">from</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span></span><br><span class="line"><span class="comment">-- 相当于OR，性能稍好一点，也更直观；NOT主要配合IN使用</span></span><br><span class="line"><span class="keyword">where</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="operator">&lt;</span>value1<span class="operator">&gt;</span>, <span class="operator">&lt;</span>value2<span class="operator">&gt;</span>); </span><br></pre></td></tr></table></figure>
<h1 id="插入"><a class="markdownIt-Anchor" href="#插入"></a> 插入</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 插入相应字段的值</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span>(<span class="operator">&lt;</span>col1<span class="operator">&gt;</span>,</span><br><span class="line">                    <span class="operator">&lt;</span>col2<span class="operator">&gt;</span>)</span><br><span class="line"><span class="keyword">values</span>(<span class="operator">&lt;</span>val1<span class="operator">&gt;</span>,</span><br><span class="line">       <span class="operator">&lt;</span>val2<span class="operator">&gt;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> yourTable (name, email, age) <span class="keyword">values</span> (<span class="string">&#x27;eric&#x27;</span>, <span class="string">&#x27;example@email.com&#x27;</span>, <span class="number">19</span>);</span><br></pre></td></tr></table></figure>
<h1 id="更新"><a class="markdownIt-Anchor" href="#更新"></a> 更新</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">set</span> <span class="operator">&lt;</span>col1<span class="operator">&gt;</span> <span class="operator">=</span> <span class="operator">&lt;</span>val1<span class="operator">&gt;</span>,</span><br><span class="line">    <span class="operator">&lt;</span>col2<span class="operator">&gt;</span> <span class="operator">=</span> <span class="operator">&lt;</span>val2<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">where</span> <span class="operator">&lt;</span>col3<span class="operator">&gt;</span> <span class="operator">=</span> <span class="operator">&lt;</span>val3<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure>
<h1 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="operator">&lt;</span><span class="keyword">table</span><span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">where</span> <span class="operator">&lt;</span>col<span class="operator">&gt;</span> <span class="operator">=</span> <span class="operator">&lt;</span>val<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure>
<h1 id="联结"><a class="markdownIt-Anchor" href="#联结"></a> 联结</h1>
<p><img src="../Source/Photo/SQL%20JOIN.jpg" alt="" /></p>
<p>设计数据库时，应遵循将数据分解到不同的数据表这一原则。<br />
然而，在使用数据时，常常需要将多个表的数据一起检索出来。<br />
这时就需要用到联结。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用WHERE联结</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>col1<span class="operator">&gt;</span>, <span class="operator">&lt;</span>col2<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">from</span> <span class="operator">&lt;</span>table1<span class="operator">&gt;</span>, <span class="operator">&lt;</span>table2<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">where</span> <span class="operator">&lt;</span>table1<span class="operator">&gt;</span>.<span class="operator">&lt;</span>col<span class="operator">&gt;</span> <span class="operator">=</span> <span class="operator">&lt;</span>table2<span class="operator">&gt;</span>.<span class="operator">&lt;</span>col<span class="operator">&gt;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用ON联结</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>col1<span class="operator">&gt;</span>, <span class="operator">&lt;</span>col2<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">from</span> <span class="operator">&lt;</span>table1<span class="operator">&gt;</span> <span class="keyword">inner</span> <span class="keyword">join</span> <span class="operator">&lt;</span>table2<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">on</span> <span class="operator">&lt;</span>table1<span class="operator">&gt;</span>.<span class="operator">&lt;</span>col<span class="operator">&gt;</span> <span class="operator">=</span> <span class="operator">&lt;</span>table2<span class="operator">&gt;</span>.<span class="operator">&lt;</span>col<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure>
<hr />
<h1 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h1>
<h2 id="压缩包安装"><a class="markdownIt-Anchor" href="#压缩包安装"></a> 压缩包安装</h2>
<ol>
<li>初始化</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化，生成data文件夹，console参数可以看见密码</span></span><br><span class="line">mysqld --initialize --console &gt; mysql_info</span><br><span class="line"><span class="comment"># &gt; mysql_info把命令行输出结果存到文件里，防止密码丢失</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>配置<code>mysql.ini</code></li>
</ol>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置3306端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置mysql目录路径</span></span><br><span class="line"><span class="attr">basedir</span>=C:\\your\\path\\MySQL</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></span><br><span class="line"><span class="attr">datadir</span>=C:\\your\\path\\MySQL\\Data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span></span><br><span class="line"><span class="attr">max_connect_errors</span>=<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为UTF8</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认使用“mysql_native_password”插件认证</span></span><br><span class="line"><span class="attr">default_authentication_plugin</span>=mysql_native_password</span><br><span class="line"></span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="section">[client]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置mysql客户端连接服务端时默认使用的端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>安装服务</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqld --install MySQL8 --defaults-file=<span class="string">&quot;C:\your\path\MySQL\mysql.ini&quot;</span> <span class="comment"># 设置服务名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认安装</span></span><br><span class="line">mysqld install</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>修改密码</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置YourPassword为新密码，再输入旧密码确认修改即可</span></span><br><span class="line">mysqladmin -u root -p password (YourPassword) --port 3306</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>git使用</title>
    <url>/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/git%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="00-代码合并流程"><a class="markdownIt-Anchor" href="#00-代码合并流程"></a> 0.0 代码合并流程</h1>
<ol>
<li>在各自的分支<code>self</code>上进行开发</li>
<li>切换到<code>develop</code>分支，<code>git pull</code>同步最新代码</li>
<li>切换到自己的分支<code>self</code>，<code>git rebase develop</code>对齐代码合并冲突</li>
</ol>
<h1 id="10-第一件事git-config"><a class="markdownIt-Anchor" href="#10-第一件事git-config"></a> 1.0 第一件事git config</h1>
<ul>
<li><code>git config --list --show-origin</code>查看所有git配置以及所在文件</li>
<li>使用<code>git config --global</code>可以设置git的基本信息（如用户名、邮箱），使用<code>--unset</code>取消设置
<ol>
<li>配置你的名称、邮箱以及编辑器</li>
</ol>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;191220000-Zhang San&quot;</span> </span><br><span class="line"><span class="comment"># 全局设置名称</span></span><br><span class="line">git config --global user.email <span class="string">&quot;zhang3@email.com&quot;</span></span><br><span class="line">git config --global core.editor vim</span><br></pre></td></tr></table></figure>
<h1 id="20-初始化仓库"><a class="markdownIt-Anchor" href="#20-初始化仓库"></a> 2.0 初始化仓库</h1>
<ol>
<li>本地仓库：<code>git init</code>创建一个新的 git 仓库，其数据会存放在一个名为 <code>.git</code> 的目录下<br />
删除仓库：删除 .git 文件夹</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add &lt;文件名字，*表示全部&gt;</span><br><span class="line">git commit -m <span class="string">&#x27;initial project version&#x27;</span> </span><br><span class="line"><span class="comment"># 提交到暂存区，并附上注释</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>远程仓库：<code>git clone</code>克隆远端仓库</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;网址&gt; &lt;仓库存放文件夹名&gt;</span><br><span class="line"><span class="comment"># 使用http克隆</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h1 id="30-记录更新"><a class="markdownIt-Anchor" href="#30-记录更新"></a> 3.0 记录更新</h1>
<ul>
<li><code>git status</code> 查看结果（会显示你对什么文件做了什么修改、操作），显示当前的仓库状态；<code>-s</code>参数简短输出</li>
<li><code>git diff</code> 展示修改，具体查看修改内容</li>
<li><code>git ls-files</code> 查看git已跟踪文件</li>
<li><code>git commit -m &quot;comment&quot;</code> 创建一个新的提交</li>
<li><code>git rm</code> 移除文件，<code>--cached</code>表明只删除版本文件，保留本地文件</li>
<li><code>git rm -r --cache .</code> 取消跟踪所有文件</li>
<li><code>git mv</code> 移动文件</li>
</ul>
<h1 id="40-提交历史-撤销操作"><a class="markdownIt-Anchor" href="#40-提交历史-撤销操作"></a> 4.0 提交历史、撤销操作</h1>
<h2 id="41-提交历史"><a class="markdownIt-Anchor" href="#41-提交历史"></a> 4.1 提交历史</h2>
<ul>
<li><code>git log</code> 查看日志</li>
<li><code>git log --pretty=oneline</code> 简单日志，每次提交只有附带注释的一行</li>
</ul>
<h2 id="42-撤销"><a class="markdownIt-Anchor" href="#42-撤销"></a> 4.2 撤销</h2>
<h3 id="放弃修改"><a class="markdownIt-Anchor" href="#放弃修改"></a> 放弃修改</h3>
<ul>
<li><code>git restore .</code>:撤销未commit的修改。 git2.32版本后<strong>取代</strong> <code>git reset</code> 进行许多撤销操作</li>
<li><code>git restore &lt;file_name&gt;</code>: 将暂存区的修改重新放回工作区（<code>--staged</code><strong>将包括对文件自身的操作，如添加文件、删除文件</strong>）</li>
</ul>
<h3 id="切换旧版本"><a class="markdownIt-Anchor" href="#切换旧版本"></a> 切换旧版本</h3>
<ul>
<li><code>git checkout &lt;editon_id&gt;</code>：恢复旧版本，会离开main分支，分离头指针，需要 <code>git switch -</code> 回到main分支</li>
<li><code>git commit --amend</code>: 编辑提交的内容或信息</li>
<li><code>git reset HEAD &lt;filename&gt;</code>: 恢复暂存的文件（建议使用restore）</li>
<li><code>git checkout -- &lt;filename&gt;</code>: 丢弃修改</li>
</ul>
<h1 id="50-远程仓库"><a class="markdownIt-Anchor" href="#50-远程仓库"></a> 5.0 远程仓库</h1>
<h2 id="远端操作"><a class="markdownIt-Anchor" href="#远端操作"></a> 远端操作</h2>
<ul>
<li><code>git remote</code>: 列出远端仓库名称，<code>-v</code>附加网址</li>
<li><code>git remote add &lt;name&gt; &lt;url&gt;</code>: 添加一个远端</li>
<li><code>git push &lt;remote&gt;/ &lt;branch&gt;</code>：将branch分支推送到remote服务器</li>
<li><code>git branch --set-upstream-to=&lt;remote&gt;/&lt;remote branch&gt;</code>: 创建本地和远端分支的关联关系</li>
<li><code>git remote show &lt;remote&gt;</code>：查看&lt;remote&gt;仓库的信息</li>
<li><code>git fetch</code>: 从远端获取对象/索引</li>
<li><code>git pull</code>: 相当于 <code>git fetch; git merge</code></li>
<li><code>git clone</code>: 从远端下载仓库
<blockquote>
<p>注意，<code>clone</code>后<code>push</code>自己的代码会提示<code>error: remote origin already exists.</code>远端仓库已存在，需要进行以下操作：</p>
<ol>
<li><code>git remote rm origin</code> 删除远程库关联</li>
<li>关联自己的仓库，[[#…/指南/Github使用指南 远程同步|教程]]</li>
</ol>
</blockquote>
</li>
</ul>
<h1 id="60-分支"><a class="markdownIt-Anchor" href="#60-分支"></a> 6.0 分支</h1>
<ul>
<li><code>git branch &lt;name&gt;</code>: 创建分支</li>
<li><code>git checkout &lt;name&gt;</code> 转到分支name， <code>-b</code>(brach)创建新分支name</li>
<li><code>git merge &lt;brach_name&gt;</code>: 合并到当前分支</li>
</ul>
<h1 id="70-gitigore"><a class="markdownIt-Anchor" href="#70-gitigore"></a> 7.0 gitigore</h1>
<h2 id="-code3-"><a class="markdownIt-Anchor" href="#-code3-"></a> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 所有.c文件</span><br><span class="line">*.c </span><br><span class="line"># 所有chapter*/eg/文件夹的文件</span><br><span class="line">chapter*/eg/ </span><br><span class="line"># 所有子目录下的.class文件</span><br><span class="line">**/*.class </span><br><span class="line"># 不忽略hello.c文件</span><br><span class="line">!hello.c </span><br></pre></td></tr></table></figure></h2>
<h1 id="nju讲解"><a class="markdownIt-Anchor" href="#nju讲解"></a> NJU讲解</h1>
<pre><code>B站王慧妍老师：BV1Bu4y1K7yr 
</code></pre>
<ul>
<li>git clone：从仓库下载一个版本，<strong>远端拉一个仓库</strong></li>
<li>git：自动化工具，帮你合并代码</li>
<li>工作区：显示屏上看到的代码版本</li>
<li>缓存区：被git追踪（git ignore跳过追踪）</li>
<li>git commit：记录版本（不会出错的代码），增加节点，像一个快照，给此版本一个id；<strong>commit到版本trace中</strong></li>
<li>git特性：分布式，而不是集中的；git的各个版本在不同电脑上，可以两个人做两条线的分支，最后在merge</li>
<li>git push/pull：把版本记录扔到一个可以共享的地方（如GitHub或其他托管仓库）；或把别人的代码拉下来</li>
<li>git merge：把大家的代码合并到一个版本</li>
<li>check out：从某个版本分叉出去，一条独立的修改代码的记录，完成后再merge进主分支</li>
<li>reset：一般用不到。回到以前的某个版本（需要id），丢弃之后的所有更改</li>
<li>git add：把当前文件放到暂存区，以使之被跟踪</li>
<li>体验git：visualizing git concepts with d3</li>
</ul>
<h1 id="廖雪峰"><a class="markdownIt-Anchor" href="#廖雪峰"></a> 廖雪峰</h1>
<p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/896827951938304">创建版本库 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p>
<h2 id="基础使用"><a class="markdownIt-Anchor" href="#基础使用"></a> 基础使用</h2>
<ul>
<li>git init 初始化一个git仓库</li>
<li>git add （文件）  把文件加入仓库</li>
<li>git commit -m “wrote a readme file” 提交文件到仓库，-m是提交说明</li>
<li>git status 查看结果（会显示你对什么文件做了什么修改、操作）</li>
<li>例子，修改完文件用status、diff查看修改，add提交之后再用status确认一遍修改，最后commit</li>
<li>提交完以后git status会显示没有要提交的修改（因为没有修改）</li>
<li>git log 查看提交日志</li>
<li>git reset --hard HEAD^ 回退到上一版本，HEAD表示当前版本，也可以写成HEAD~100
<ul>
<li>怎么回去？找到commit id，git reset --hard id</li>
<li>找不到id？使用git reflog查看过往命令</li>
</ul>
</li>
<li>暂存区：git add 实际上是把文件添加到暂存区</li>
<li>git checkout – file 丢弃工作区更改，回到上一次git add 的状态（此时git status为空）</li>
<li>git reset HEAD file 把暂存区某个文件的更改撤销掉（此时status为not staged)</li>
</ul>
<h2 id="指南github使用指南github-远程仓库远程同步"><a class="markdownIt-Anchor" href="#指南github使用指南github-远程仓库远程同步"></a> [[…/指南/Github使用指南#Github 远程仓库|远程同步]]</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add origin^ git@github.com:账户名/仓库名.git // ^origin是远程仓库名字</span><br><span class="line">git push -u 远程仓库名字 master  </span><br><span class="line">/* 加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<h1 id="git如何进行多人协作"><a class="markdownIt-Anchor" href="#git如何进行多人协作"></a> Git如何进行多人协作</h1>
<p>使用Git多人协作，就要用到分支。<br />
分支的特点是，将不同功能分配给不同的人开发，各个分支之间彼此独立、不受干扰。等待开发完成，只需要合并代码就可以了。</p>
]]></content>
      <tags>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>tmux使用</title>
    <url>/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/tmux%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<pre><code>参考教程： https://www.ruanyifeng.com/blog/2019/10/tmux.html
</code></pre>
<ul>
<li>tmux使会话与窗口解绑，一个窗口<code>source .bashrc</code>更新了，另一个窗口可能没有</li>
</ul>
<ul>
<li><strong><code>ctrl+b</code> 前缀键</strong><br />
<code>%</code>  分成左右两栏<br />
<code>&quot;</code>  分成上下两栏<br />
<code>up</code>  选择上边的窗口<br />
<code>[</code> 查看历史记录</li>
</ul>
<h1 id="窗口"><a class="markdownIt-Anchor" href="#窗口"></a> 窗口</h1>
<ul>
<li><code>&lt;C-d&gt;</code> <strong>删除窗口</strong></li>
</ul>
<ul>
<li><code>&lt;C-b&gt; z</code> <strong>最大化/最小化一个窗口</strong></li>
<li><code>&lt;C-b&gt; c</code> 创建一个新的窗口，使用 <code>&lt;C-d&gt;</code>关闭</li>
<li><code>&lt;C-b&gt; N</code> 跳转到第 <em>N</em> 个窗口，注意每个窗口都是有编号的</li>
<li><code>&lt;C-b&gt; p</code> 切换到前一个窗口</li>
<li><code>&lt;C-b&gt; n</code> 切换到下一个窗口</li>
<li><code>&lt;C-b&gt; w</code> 列出当前所有窗口</li>
</ul>
]]></content>
      <tags>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>objdump使用</title>
    <url>/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/objdump%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="objdump反汇编文件"><a class="markdownIt-Anchor" href="#objdump反汇编文件"></a> objdump反汇编文件</h1>
<ul>
<li>需要配合<code>gcc -g</code>使用</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">objdump -S file.o &gt; fileo.txt  // -S 表示显示源代码</span><br><span class="line">objdump -S file &gt; file.txt</span><br><span class="line"></span><br><span class="line">// gcc编译步骤</span><br><span class="line">-E // .c  -&gt; .i</span><br><span class="line">-S // .i -&gt; .s</span><br><span class="line">-c // .s -&gt; .o</span><br></pre></td></tr></table></figure>
<ul>
<li><code>.o</code>文件的地址一般从0开始，可执行文件的地址是操作系统给定的虚拟地址</li>
</ul>
]]></content>
      <tags>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>vim基本操作</title>
    <url>/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/vim%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="基本操作"><a class="markdownIt-Anchor" href="#基本操作"></a> 基本操作</h1>
<ul>
<li><code>&lt;C-o&gt;, &lt;C-i&gt;</code>：回到前一个/后一个位置（例如，打开文件默认在第一行，<code>&lt;C-o&gt;</code>回到上次编辑位置）。<strong>注意这个操作是跨文件的</strong>。</li>
<li><code>`0</code>：返回上次位置</li>
<li>词：<code>w</code>（下一个词），<code>b</code>（词初），<code>e</code>（词尾）</li>
<li>行：<code>0</code>（行初），<code>^</code>（第一个非空格字符），<code>$</code>（行尾）</li>
<li>文件：<code>gg</code>（文件头），<code>G</code>（文件尾）</li>
<li>搜索:<code>/&#123;正则表达式&#125;</code>,<code>n</code>/<code>N</code>用于导航匹配</li>
<li><code>x</code>删除字符（等同于<code>dl</code>）</li>
<li><code>s</code>(substitute)替换字符（等同于<code>xi</code>）
<ul>
<li>替换命令<code>:&#123;作用范围&#125;s/&#123;目标文本&#125;/&#123;替换文本&#125;/&#123;替换标志&#125;</code></li>
<li><code>:%s/s_content/o_content/g</code> 全局替换</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>Sign</th>
<th>Range</th>
</tr>
</thead>
<tbody>
<tr>
<td>%</td>
<td>整个文件</td>
</tr>
<tr>
<td>.</td>
<td>当前行</td>
</tr>
<tr>
<td>$</td>
<td>最后一行</td>
</tr>
<tr>
<td>,n</td>
<td>当前行到n行</td>
</tr>
<tr>
<td>n,</td>
<td>n行到当前行</td>
</tr>
<tr>
<td>+n</td>
<td>当前行后n行</td>
</tr>
</tbody>
</table>
<ul>
<li>可视化模式 + 操作
<ul>
<li>选中文字,<code>d</code>删除（剪切） 或者<code>c</code>改变</li>
</ul>
</li>
<li><code>u</code>撤销，<code>&lt;C-r&gt;</code>重做</li>
<li><code>y</code>复制 / “yank” （其他一些命令比如<code>d</code>也会复制）</li>
<li><code>p</code>粘贴
<ul>
<li><code>+p</code> 粘贴系统剪贴板</li>
</ul>
</li>
<li><strong>更多值得学习的</strong>:
<ul>
<li><code>:&lt;line&gt;</code> 跳到line行</li>
<li><code>~</code>改变字符的大小写</li>
<li><code>3w</code>向前移动三个词</li>
<li><code>A</code>（大写）可以迅速定位到行尾进行修改</li>
<li><code>:!python prog.py</code> 使用！直接运行shell命令</li>
</ul>
</li>
<li><code>%</code>匹配括号</li>
</ul>
<h2 id="多行操作"><a class="markdownIt-Anchor" href="#多行操作"></a> 多行操作</h2>
<p><code>&lt;C-v&gt;</code> 选中多行，<code>Shift + i</code>输入后<code>Esc</code>，即可多行同步输入</p>
<h1 id="文件操作"><a class="markdownIt-Anchor" href="#文件操作"></a> 文件操作</h1>
<ul>
<li><code>:e filename</code>切换到filename文件</li>
<li><code>:bn/bp</code>切换到下/上个文件</li>
<li><code>&lt;C-x&gt;&lt;C-f&gt;</code> 自动补全路径</li>
</ul>
]]></content>
      <tags>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode使用</title>
    <url>/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/vscode%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="全键盘操作指南"><a class="markdownIt-Anchor" href="#全键盘操作指南"></a> 全键盘操作指南</h1>
<h2 id="终端操作"><a class="markdownIt-Anchor" href="#终端操作"></a> 终端操作</h2>
<ul>
<li><code>code &lt;Folder&gt;</code> 打开工作区；相当于 <code>CTRL+K, CTRL+O</code></li>
<li><code>code -diff file1 file2</code> 对比两个文件（颜色标注）</li>
<li><code>code &lt;File&gt;</code> 打开文件</li>
<li><strong><code>CTRL + ←/→</code> 逐词跳转</strong></li>
<li><code>CTRL+K</code> 清理终端</li>
<li><code>CTRL+P: &gt;Tasks</code> 新建任务，用 <code>CTRL+P: &gt;run</code> 运行；相当于 <code>make</code></li>
</ul>
<h2 id="panel操作"><a class="markdownIt-Anchor" href="#panel操作"></a> Panel操作</h2>
<p><code>CTRL+P</code> 打开Panel</p>
<ul>
<li><code>@</code> 符号：寻找symbol，如函数名、变量名；相当于<code>CRTL+SHIFT+.</code></li>
<li><code># &lt;String&gt;</code> 符号：全局搜索字符串</li>
<li><code>&gt;join line</code> <strong>选中多行合并为一行</strong></li>
</ul>
<h2 id="编辑区操作"><a class="markdownIt-Anchor" href="#编辑区操作"></a> 编辑区操作</h2>
<ul>
<li><code>CTRL+G &lt;Line_Number&gt;</code> 跳到指定行</li>
<li><code>CTRL + ←/→</code> 逐词跳转；相当于vim的 <code>w</code></li>
<li><code>ALT + ↑/↓</code> 移动某行代码</li>
<li><code>ALT + SHIGT+ ↑/↓</code> 复制某行代码</li>
<li><code>CTRL+P: &gt;Snippets</code> 创建代码模板</li>
<li><code>SHIFT+ALT+F12</code> 找到某个命名的全部引用（而不是简单的搜索）</li>
<li><code>SHIFT+ALT+F</code> 格式化代码，相当于 <code>&gt;Format Document</code></li>
</ul>
<h1 id="设置-settingsjson"><a class="markdownIt-Anchor" href="#设置-settingsjson"></a> 设置 settings.json</h1>
<h2 id="显示gitignore屏蔽文件"><a class="markdownIt-Anchor" href="#显示gitignore屏蔽文件"></a> 显示.gitignore屏蔽文件</h2>
<p>关闭 <code>Search: Use Ignore Files</code>，或</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;search.useIgnoreFiles&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br></pre></td></tr></table></figure>
<h2 id="自定义终端"><a class="markdownIt-Anchor" href="#自定义终端"></a> 自定义终端</h2>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;terminal.integrated.defaultProfile.windows&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MSYS2-UCRT64&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;terminal.integrated.profiles.windows&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;MSYS2-UCRT64&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\your\\path\\MSYS2\\msys2_shell.cmd&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;-defterm&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;-no-start&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;-here&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;-ucrt64&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>CSAPP阅读指南</title>
    <url>/ComputerScience/%E6%8C%87%E5%8D%97/CSAPP%E9%98%85%E8%AF%BB%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="10-csapp-阅读指南"><a class="markdownIt-Anchor" href="#10-csapp-阅读指南"></a> 1.0 CSAPP 阅读指南</h1>
<pre><code>参考：https://book.douban.com/review/3150951/
</code></pre>
<ul>
<li>
<p>这本书的简介（引言）部分简介明了：一个简单的hello world程序在计算机上的执行过程，预处理-&gt;编译-&gt;汇编-&gt;链接-&gt;生成可执行目标文件-&gt;载入内存-&gt;数据流-&gt;屏幕输出显示，没有一句废话，简介扼要，总结成一句：计算机系统=位+上下文。</p>
</li>
<li>
<p>关于二进制的内容个人感觉有些冗余，这部分内容偶基本是一扫而过，毕竟从小到大这些内容学了都快有十多遍了，而平时编程真能用到的二进制技巧基本也就移位和bit flag这两招。不过这章里有不少small tricks值得一耍（最经典的就是不用临时变量交换两个数）。话说回来，真要想在二进制上玩出花来，参考Hacker’s delight会有更大的惊喜。</p>
</li>
<li>
<p>程序的机器级表示这一章偶花了不少时间阅读，毕竟偶没学过汇编，基础基本为0。不过这本书里出现的汇编指令绝大多数都由运算、取数存数、跳转这三种指令所组成，所以在阅读上不会存在任何难度。 　　这部分融合了程序员所需了解的编译和汇编这两样课程中的基础知识：想知道for、do…while、while三种循环的实质性区别？想知道多重if和 switch的本质区别？想知道数组的存储方式？想知道数组下标读取和指针读取的区别？想知道递归过程调用的背后实现机理？看看这一章，相信你会对C语言乃至程序设计语言有更深的理解。</p>
</li>
<li>
<p>指令集&amp;体系结构这一章，两位作者为了让读者更好的理解指令集（X86），别具一格的搞出了一个简化版的Y86指令集，并用其表示基本的运算和控制，甚至连数字电路的HCL都来了一笔（暴汗）。数据流、组合逻辑和流水线，图示+详细的讲解，一目了然。国内的计组教科书应该多借鉴一下。</p>
</li>
<li>
<p>程序性能优化这一章对程序员尤其实用，毕竟，正如TDD和XP的开创者Kent Beck所说，make it run, make it right, make it fast。而第三步又是最麻烦的一步，确认和消除性能的瓶颈，有时比Debug还要恐怖，所以Knuth大神说：Premature optimization is the source of evil。 　　 CSAPP通过展示一个简单的连续数求和和求积运算的小程序，通过性能监测，一步步的优化性能：减少过程调用、消除无关存储器引用、将下标引用切换到指针这些还是比较好理解的，然而后面的根据指令集展开循环、通过指令集来编写更具并行性的代码以及转移预测代价这些机器相关的优化的东东就开始颠覆我的世界观了，原来程序还可以这么搞，I服了U。 　　 唯一的遗憾就是这章的篇幅有些短小，对程序员最为重要的机器无关的程序优化介绍的也并不充分，与此相比，偶感觉programming pearls和practice of programming里面对性能优化的介绍更胜一筹。</p>
</li>
<li>
<p>存储器体系结构的内容用五个字概括就是：利用局部性。 　　只有了解了计算机的梯形存储器体系结构，才能体会到为什么同样逻辑的程序会产生如此之大的性能差距，虽然计算机设计者的初衷是把存储器当成一个巨型数组。然而这个大号数组的不同体位的差距还是非常大地，搞不好就郁闷鸟。尤其是DRAM-Disk这一段，足足10的六次方的差距，所以CSAPP专门开了VM 一章来详细讲述。</p>
</li>
<li>
<p>链接这部分内容篇幅不多，原理上讲的很简洁，文件节和符号解析表只是给出了几个图示，并没有过多的关注其实现。CSAPP把重点放在了链接对源代码产生的影响，同时也让偶再次理解到了全局变量很邪恶。动态链接部分让偶恍然大悟，.net里面的反射和程序集，放到C里面就是动态调用和共享库，都是相通的，无非C的代码更诡异一些。</p>
</li>
<li>
<p>异常控制流这一章的名字比较囧，以至于我刚开始认为它会介绍点诸如try…catch的异常处理机制。然而看了才明白，它介绍的是更为广义的exception，既包括硬件中断，也包括故障中断，比如说陷入（trap）和故障（fault）。 　　这一章做的比较绝的是，通过讲述异常流，引入了OS中最核心的概念：进程。然而它并不在进程的具体特性上下文章，而是通过讲述unix下进程相关的api 及使用，从一种程序员的角度告诉你，进程是这么用的，进程之间是这么交换信息的。到最后捎带介绍了一下C里面的非局部跳转（更加强大的Goto，也就是 setjmp和longjmp），别以为只有C++和Java才有异常处理机制，C一样可以做到。</p>
</li>
<li>
<p>程序的时间度量这一章感觉用处不大，遂跳过</p>
</li>
<li>
<p>虚拟内存这一章从原理和实现两个不同的层面介绍了存储器体系结构的核心部分：VM。说实话，之前学习VM顶多就是冲着局部性去的，但没想到VM可以做的事有这么多，无论是存储器磁盘映射，还是malloc在磁盘上分配空间返回地址至PTE，都让偶对VM有了一个崭新的认识，原来VM还可以这么用。为了帮助读者深入理解内存的分配机制，作者甚至搞出了一个malloc的实现，从源代码来讲解内存分配、碎片合并、垃圾回收这些概念，帅气。</p>
</li>
<li>
<p>系统级IO，网络编程以及并发编程这些东东打算之后再慢慢研究，遂跳过</p>
</li>
</ul>
<h1 id="20-csapp重点解读"><a class="markdownIt-Anchor" href="#20-csapp重点解读"></a> 2.0 <a href="https://fengmuzi2003.gitbook.io/csapp3e">CSAPP重点解读</a></h1>
]]></content>
      <tags>
        <tag>指南</tag>
      </tags>
  </entry>
  <entry>
    <title>Github使用指南</title>
    <url>/ComputerScience/%E6%8C%87%E5%8D%97/Github%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="git配置"><a class="markdownIt-Anchor" href="#git配置"></a> Git配置</h1>
<p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/896954117292416">远程仓库 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p>
<ol>
<li>创建ssh key，在c盘用户目录.git文件夹中<br />
<code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code><br />
<code>ssh-keygen -l -f ~/.ssh/id_rsa</code> 可以查看秘钥的配置信息，包括邮箱</li>
<li>在GitHub账号设置页面，添加ssh key，复制<code>.ssh/id_rsa.pub</code>的信息，点击创建即可</li>
<li>测试是否成功：<code>ssh -T git@github.com</code><br />
注意：如果测试不成功，可能是反向代理的问题</li>
</ol>
<h1 id="github-远程仓库"><a class="markdownIt-Anchor" href="#github-远程仓库"></a> Github 远程仓库</h1>
<ol>
<li>在github上新建一个仓库</li>
<li><code>git remote add origin git@github.com:github账号名称/仓库名称.git</code> 关联仓库，origin是远程库的名字</li>
<li><code>git push -u origin master</code>把本地库内容（master分支）推送到远程库（oringin），<code>-u</code> 参数表示会把本地master分支和远程master分支关联起来，方便后面简化命令</li>
</ol>
<ul>
<li><code>git remote set-url origin &lt;URL&gt;</code>更改仓库地址</li>
</ul>
<h1 id="github-trending-热门软件"><a class="markdownIt-Anchor" href="#github-trending-热门软件"></a> github trending 热门软件</h1>
<ul>
<li>项目含金量 stars 1k+</li>
<li>fork 拷贝项目到自己的仓库</li>
<li>pull request 合并分支</li>
</ul>
<h1 id="nju"><a class="markdownIt-Anchor" href="#nju"></a> NJU</h1>
<ul>
<li>学习编程语言如C、Rust</li>
<li>精选精读论文</li>
<li>STFW：比百度更高效的办法</li>
</ul>
]]></content>
      <tags>
        <tag>指南</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客教程</title>
    <url>/ComputerScience/%E6%8C%87%E5%8D%97/Hexo%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="笔记"><a class="markdownIt-Anchor" href="#笔记"></a> 笔记</h1>
<h2 id="命令"><a class="markdownIt-Anchor" href="#命令"></a> 命令</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;postName&quot;</span> <span class="comment"># 新建文章</span></span><br><span class="line">hexo new page <span class="string">&quot;pageName&quot;</span> <span class="comment"># 新建页面</span></span><br><span class="line">hexo generate <span class="comment"># 生成静态页面至public目录</span></span><br><span class="line">hexo server <span class="comment"># 开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span></span><br><span class="line">hexo deploy <span class="comment"># 部署到GitHub</span></span><br><span class="line">hexo <span class="built_in">help</span>  <span class="comment"># 查看帮助</span></span><br><span class="line">hexo version  <span class="comment"># 查看Hexo的版本</span></span><br></pre></td></tr></table></figure>
<h1 id="按文章更新时间排序"><a class="markdownIt-Anchor" href="#按文章更新时间排序"></a> 按文章更新时间排序</h1>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-updated</span> <span class="comment"># 默认是-date</span></span><br></pre></td></tr></table></figure>
<h2 id="背景设置"><a class="markdownIt-Anchor" href="#背景设置"></a> 背景设置</h2>
<p>把你挑选的背景图片命名为：background.jpg，放在blog\themes\next\source\images里，在blog\themes\next\source\css_custom文件的custom.styl首部添加</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">/images/background.jpg</span>);</span><br><span class="line">  <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="符号链接"><a class="markdownIt-Anchor" href="#符号链接"></a> <a href="../%E7%AC%94%E8%AE%B0/Linux%E7%AC%94%E8%AE%B0##%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95">符号链接</a></h2>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># Windows，有些文件需要文件名相同才能打开</span><br><span class="line"># -d 目录符号链接</span><br><span class="line">mklink /d C:\file\<span class="built_in">path</span>\Target C:\file\<span class="built_in">path</span>\Source</span><br></pre></td></tr></table></figure>
<h2 id="安装主题"><a class="markdownIt-Anchor" href="#安装主题"></a> 安装主题</h2>
<ol>
<li>npm安装在modules下</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> hexo-site</span><br><span class="line">npm install hexo-theme-next</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>git clone安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> hexo-site</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next themes/next</span><br><span class="line"><span class="comment"># Upgrade</span></span><br><span class="line"><span class="built_in">cd</span> themes/next</span><br><span class="line">git pull origin master</span><br><span class="line"><span class="comment"># Configuration</span></span><br><span class="line"><span class="built_in">cp</span> themes/next/_config.yml _config.next.yml</span><br></pre></td></tr></table></figure>
<h1 id="hexo"><a class="markdownIt-Anchor" href="#hexo"></a> Hexo</h1>
<h2 id="我的配置"><a class="markdownIt-Anchor" href="#我的配置"></a> 我的配置</h2>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置英文字体</span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Source</span> <span class="string">Serif</span> <span class="string">Pro</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># layout\_partials\head\head.njk 设置中文字体</span></span><br><span class="line">&#123;&#123; <span class="string">next_font()</span> &#125;&#125;</span><br><span class="line">&#123;&#123; <span class="string">next_vendors(&#x27;fontawesome&#x27;)</span> &#125;&#125;</span><br><span class="line"><span class="string">&lt;link</span> <span class="string">href=&quot;https://fonts.googleapis.com/css?family=Noto+Serif+SC&amp;display=swap&quot;</span> <span class="string">rel=&quot;stylesheet&quot;&gt;</span></span><br><span class="line"><span class="comment"># source\css\_variables\base.styl 添加中文字体</span></span><br><span class="line"><span class="string">$font-family-chinese</span> <span class="string">=</span> <span class="string">&quot;Noto Serif SC&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">codes:</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">IBM</span> <span class="string">Plex</span> <span class="string">Mono</span></span><br><span class="line"></span><br><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">stackoverflow-light</span></span><br></pre></td></tr></table></figure>
<hr />
<h1 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blogFolderName</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>指南</tag>
      </tags>
  </entry>
  <entry>
    <title>Deep Reading</title>
    <url>/ComputerScience/%E6%8C%87%E5%8D%97/Deep%20Reading/</url>
    <content><![CDATA[<blockquote>
<p>“When in doubt go to the library.” – J.K.Rowling</p>
</blockquote>
<h1 id="catalog"><a class="markdownIt-Anchor" href="#catalog"></a> Catalog</h1>
<p><a href="#article1">Article1: What Are You Going to Do With That？</a></p>
<h1 id="a-idarticle1what-are-you-going-to-do-with-thata"><a class="markdownIt-Anchor" href="#a-idarticle1what-are-you-going-to-do-with-thata"></a> <a id="article1">What Are You Going to Do With That？</a></h1>
<pre><code>William Deresiewicz（《国家》杂志撰稿人和《新共和》杂志编辑）在斯坦福大学的演讲
</code></pre>
<p>The question my title poses, of course, is the one that is classically aimed at humanities majors. What practical value could there possibly be in studying literature or art or philosophy? So you must be wondering why I’m bothering to raise it here, at Stanford, this renowned citadel of science and technology. What doubt can there be that the world will offer you many opportunities to use your degree?</p>
<p>（学习文学、艺术或哲学能有什么用呢？所以你肯定纳闷，我为什么在在以科技堡垒而闻名的斯坦福提出这个问题呢？在大学学位给人带来众多机会的问题上还有什么可怀疑的吗？）</p>
<p>But that’s not the question I’m asking. By “do” I don’t mean a job, and by “that” I don’t mean your major. We are more than our jobs, and education is more than a major. Education is more than college, more even than the totality of your formal schooling, from kindergarten through graduate school. By “What are you going to do,” I mean, what kind of life are you going to lead? And by “that,” I mean everything in your training, formal and informal, that has brought you to be sitting here today, and everything you’re going to be doing for the rest of the time that you’re in school.</p>
<p>（但那不是我提出的问题。这里的“做”并不是指工作，“那”并不是指你的专业。我们不仅仅是要个工作，教育不仅仅是学一门专业。教育也不仅仅是上大学，甚至也不仅是从幼儿园到研究生院的正规学校教育。我说的“你要做什么”的意思是你要过什么样的生活？我所说的“那”指的是你得到的正规或非正规的任何训练， 那些把你送到这里来的东西，你在学校的剩余时间里将要做的任何事。）</p>
<span id="more"></span>
<p>We should start by talking about how you did, in fact, get here. You got here by getting very good at a certain set of skills. Your parents pushed you to excel from the time you were very young. They sent you to good schools, where the encouragement of your teachers and the example of your peers helped push you even harder. Your natural aptitudes were nurtured so that, in addition to excelling in all your subjects, you developed a number of specific interests that you cultivated with particular vigor. You did extracurricular activities, went to afterschool programs, took private lessons. You spent summers doing advanced courses at a local college or attending skill-specific camps and workshops. You worked hard, you paid attention, and you tried your very best. And so you got very good at math, or piano, or lacrosse, or, indeed, several things at once.</p>
<p>（我们不妨先来讨论你是如何考入斯坦福的吧。你能进入这所大学说明你在某些技能上非常出色。你的父母在你很小的时候就鼓励你追求卓越。他们送你到好学校，老师的鼓励和同伴的榜样激励你更努力地学习。除了在所有课程上都出类拔萃之外，你还注重修养的提高，充满热情地培养了一些特殊兴趣。你用几个暑假在本地大 学里预习大学课程，或参加专门技能的夏令营或训练营。你学习刻苦、精力集中、全力以赴。所以，你在数学、钢琴、曲棍球等众多方面都很出色。）</p>
<p>Now there’s nothing wrong with mastering skills, with wanting to do your best and to be the best. What’s wrong is what the system leaves out: which is to say, everything else. I don’t mean that by choosing to excel in math, say, you are failing to develop your verbal abilities to their fullest extent, or that in addition to focusing on geology, you should also focus on political science, or that while you’re learning the piano, you should also be working on the flute. It is the nature of specialization, after all, to be specialized. No, the problem with specialization is that it narrows your attention to the point where all you know about and all you want to know about, and, indeed, all you can know about, is your specialty.</p>
<p>（掌握这些技能当 然没有错，全力以赴成为最优秀的人也没有错。错误之处在于这个体系遗漏的地方：即任何别的东西。我并不是说因为选择钻研数学，你在充分发展话语表达能力的 潜力方面就失败了；也不是说除了集中精力学习地质学之外，你还应该研究政治学；也不是说你在学习钢琴时还应该学吹笛子。毕竟，专业化的本质就是要专业性。可是，专业化的问题在于它把你的注意力限制在一个点上，即你已经知道和想知道的东西。其实，你能知道的一切就是你的专业。）</p>
<p>The problem with specialization is that it makes you into a specialist. It cuts you off, not only from everything else in the world, but also from everything else in yourself. And of course, as college freshmen, your specialization is only just beginning. In the journey toward the success that you all hope to achieve, you have completed, by getting into Stanford, only the first of many legs. Three more years of college, three or four or five years of law school or medical school or a Ph.D. program, then residencies or postdocs or years as a junior associate. In short, an ever-narrowing funnel of specialization. You go from being a political-science major to being a lawyer to being a corporate attorney focusing on taxation issues in the consumer-products industry. You go from being a biochemistry major to being a doctor to being a cardiologist to being a cardiac surgeon who performs heart-valve replacements.</p>
<p>（专业化的问题是它让你成为专家，切断你与世界上其他任何东西的 联系，不仅如此，还切断你与自身其他潜能的联系。当然，作为大一新生，你的专业才刚刚开始。在你走向所渴望的成功之路的过程中，进入斯坦福是你踏上的众多 阶梯中的一个。再读三年大学，三五年法学院或医学院或博士，然后再干若干年住院实习生或博士后或助理教授。总而言之，进入越来越狭窄的专业化轨道。你可能 从政治学专业的学生变成了律师或者公司代理人，再变成专门研究消费品领域的税收问题的公司代理人。你从生物化学专业的学生变成了博士，再变成心脏病学家，再变成专门做心脏瓣膜移植的心脏病医生。）</p>
<p>Again, there’s nothing wrong with being those things. It’s just that, as you get deeper and deeper into the funnel, into the tunnel, it becomes increasingly difficult to remember who you once were. You start to wonder what happened to that person who played piano and lacrosse and sat around with her friends having intense conversations about life and politics and all the things she was learning in her classes. The 19-year-old who could do so many things, and was interested in so many things, has become a 40-year-old who thinks about only one thing. That’s why older people are so boring. “Hey, my dad’s a smart guy, but all he talks about is money and livers.”</p>
<p>（再次，做这些事没有任何错。只不过，在你越来越深入地进入这个轨道后，再记得你最初的样子就变得越来越困难了。你开始怀念那个曾经谈钢琴和打曲棍球的人，思考那个曾经和朋友热烈讨论人生和政治以及在课堂内容的人在做什么。那个活泼能干的19岁年轻人已经变成了只想一件事的40岁中年人。难怪年长的人这 么乏味无趣。“哎，我爸爸曾经是非常聪明的人，但他现在除了谈论钱和肝脏外再无其他。”）</p>
<p>And there’s another problem. Maybe you never really wanted to be a cardiac surgeon in the first place. It just kind of happened. It’s easy, the way the system works, to simply go with the flow. I don’t mean the work is easy, but the choices are easy. Or rather, the choices sort of make themselves. You go to a place like Stanford because that’s what smart kids do. You go to medical school because it’s prestigious. You specialize in cardiology because it’s lucrative. You do the things that reap the rewards, that make your parents proud, and your teachers pleased, and your friends impressed. From the time you started high school and maybe even junior high, your whole goal was to get into the best college you could, and so now you naturally think about your life in terms of “getting into” whatever’s next. “Getting into” is validation; “getting into” is victory. Stanford, then Johns Hopkins medical school, then a residency at the University of San Francisco, and so forth. Or Michigan Law School, or Goldman Sachs, or Mc Kinsey, or whatever. You take it one step at a time, and the next step always seems to be inevitable.</p>
<p>（还有另外一个问题。或许你从来没有想过当心脏病医生，只是碰巧发生 了而已。随大流最容易，这就是体制的力量。我不是说这个工作容易，而是说做出这种选择很容易。或者，这些根本就不是自己做出的选择。你来到斯坦福这样的名 牌大学是因为聪明的孩子都这样。你考入医学院是因为它的地位高，人人都羡慕。你选择心脏病学是因为当心脏病医生的待遇很好。你做那些事能给你带来好处，让 你的父母感到骄傲，令你的老师感到高兴，也让朋友们羡慕。从你上高中开始，甚至初中开始，你的唯一目标就是进入最好的大学，所以现在你会很自然地从“进入 下个阶段”的角度看待人生。“进入”就是能力的证明，“进入”就是胜利。先进入斯坦福，然后是约翰霍普金斯医学院，再进入旧金山大学做实习医生等。或者进入密歇根法学院，或高盛集团（Goldman Sachs）或麦肯锡公司（McKinsey）或别的什么地方。你迈出了这一步，下一步似乎就必然在等着你。）</p>
<p>Or maybe you did always want to be a cardiac surgeon. You dreamed about it from the time you were 10 years old, even though you had no idea what it really meant, and you stayed on course for the entire time you were in school. You refused to be enticed from your path by that great experience you had in AP history, or that trip you took to Costa Rica the summer after your junior year in college, or that terrific feeling you got taking care of kids when you did your rotation in pediatrics during your fourth year in medical school.</p>
<p>（也许你确实想当心脏病学家。十岁时就梦想成为医生，即使你根本不知道医生意味着什么。你在上学期间全身心都在朝着这个目标前进。你拒绝了上大学预修历史课时的美妙体验的诱惑，也无视你在医学院第四年的儿科学轮流值班时照看孩子的可怕感受。）</p>
<p>But either way, either because you went with the flow or because you set your course very early, you wake up one day, maybe 20 years later, and you wonder what happened: how you got there, what it all means. Not what it means in the “big picture,” whatever that is, but what it means to you. Why you’re doing it, what it’s all for. It sounds like a cliché, this “waking up one day,” but it’s called having a midlife crisis, and it happens to people all the time.</p>
<p>（但不管是什么，要么因为你随大流要么因为你早就选定了道路，20年后某天醒来，你或许会纳闷到底发生了什么：你怎么变成现在这个样子，这一切意味着什么。不是它是什么，不在于它是否“大画面”而是它对你意味着什么。你为什么做它，到底为了什么。这听起来像老生常谈，但这个被称为中年危机的“有一天醒 来”一直就发生在每个人身上。）</p>
<p>There is an alternative, however, and it may be one that hasn’t occurred to you. Let me try to explain it by telling you a story about one of your peers, and the alternative that hadn’t occurred to her. A couple of years ago, I participated in a panel discussion at Harvard that dealt with some of these same matters, and afterward I was contacted by one of the students who had come to the event, a young woman who was writing her senior thesis about Harvard itself, how it instills in its students what she called self-efficacy, the sense that you can do anything you want. Self-efficacy, or, in more familiar terms, self-esteem. There are some kids, she said, who get an A on a test and say, “I got it because it was easy.” And there are other kids, the kind with self-efficacy or self-esteem, who get an A on a test and say, “I got it because I’m smart.”</p>
<p>（不过，还有另外一种情况，或许中年危机并不会发生在你身上。让我通过告诉你们一个同伴的故事来解释我的意思吧，即她没有遭遇的情况。几年前，我在哈佛参加了一次小组讨论会，谈到这些问题。后来参加这次讨论的一个学生给我联系，这个哈佛学生正在写有关哈佛的毕业论文，讨论哈佛是如何给学生灌输她所说的“自 我效能”（self-efficacy），一种相信自己能做一切的意识。自我效能或更熟悉的说法‘自我尊重’。她说在考试中得了优秀的有些学生会说“我得 优秀是因为试题很简单。”）</p>
<p>Again, there’s nothing wrong with thinking that you got an A because you’re smart. But what that Harvard student didn’t realize—and it was really quite a shock to her when I suggested it—is that there is a third alternative. True self-esteem, I proposed, means not caring whether you get an A in the first place. True self-esteem<br />
means recognizing, despite everything that your upbringing has trained you to believe about yourself, that the grades you get—and the awards, and the test scores, and the trophies, and the acceptance letters—are not what defines who you are.</p>
<p>（但另外一些学生，那种具有自我效能感或自我尊重的学生在考 试中得了优秀后会说“我得优秀是因为我聪明。” 再次，认为得了优秀是因为自己聪明的想法并没有任何错，不过，哈佛学生没有认识到的是他们没有第三种选择。当我指出这一点时，她十分震惊。我指出，真正的 自尊意味着最初根本就不在乎成绩是否优秀。真正的自尊意味着承认你取得的成绩，虽然你在成长过程中的一切都在训练你相信自己，但奖励、成绩、奖品、录取通 知书等所有这一切都不能来定义你是谁。）</p>
<p>She also claimed, this young woman, that Harvard students take their sense of self-efficacy out into the world and become, as she put it, “innovative.” But when I asked her what she meant by innovative, the only example she could come up with was “being CEO of a Fortune 500.” That’s not innovative, I told her, that’s just successful, and successful according to a very narrow definition of success. True innovation means using your imagination, exercising the capacity to envision new possibilities.</p>
<p>（她还说，这个年轻的女孩子说哈佛 学生把他们的自我效能带到了世界上，如她所说的“创新”（innovative）。但当我问她“创新”意味着什么时，她能够想到的唯一例子不过是“世界大 公司五百强的首席执行官。”我告诉她这不是创新，这只是成功，而且是根据非常狭隘的成功定义而认定的成功而已。真正的创新意味着使用你的想象力，发挥你的潜力，创造新的可能性。）</p>
<p>But I’m not here to talk about technological innovation, I’m here to talk about a different kind. It’s not about inventing a new machine or a new drug. It’s about inventing your own life. Not following a path, but making your own path. The kind of imagination I’m talking about is moral imagination. “Moral” meaning not right or wrong, but having to do with making choices. Moral imagination means the capacity to envision new ways to live your life.</p>
<p>（但这里我并不是在谈论技术创新，不是发明新机器或者制造一种新药，我谈论的是另外一种创新，是创造你自己的生活。不是走现成的道路而是创造一条属于自己的道路。我谈论的想象力是道德想象力。“道德”在这里不是对与错，而是与选择有关。道德想象力意味着创造自己新生的能力。）</p>
<p>It means not just going with the flow. It means not just “getting into” whatever school or program comes next. It means figuring out what you want for yourself, not what your parents want, or your peers want, or your school wants, or your society wants. Originating your own values. Thinking your way toward your own definition of success. Not simply accepting the life that you’ve been handed. Not simply accepting the choices you’ve been handed. When you walk into Starbucks, you’re offered a choice among a latte and a macchiato and an espresso and a few other things, but you can also make another choice. You can turn around and walk out. When you walk into college, you are offered a choice among law and medicine and investment banking and consulting and a few other things, but again, you can also do something else, something that no one has thought of before.</p>
<p>（它意味着不随波逐流，不是下一步要“进 入”什么名牌大学或研究生院。而是要弄清楚自己到底想要什么，而不是父母、同伴、学校、或社会想要什么。即确认你自己的价值观，思考迈向自己所定义的成功 的道路，而不仅仅是接受别人给你的生活，不仅仅是接受别人给你的选择。当今走进星巴克咖啡馆，服务员可能让你在牛奶咖啡（latte）、加糖咖啡 （macchiato）、特制咖啡（espresso）等几样东西之间做出选择。但你可以做出另外的选择，你可以转身走出去。当你进入大学，人家给你众多选择，或法律或医学或投资银行和咨询以及其他，但你同样也可以做其他事，做从前根本没有人想过的事。）</p>
<p>Let me give you another counterexample. I wrote an essay a couple of years ago that touched on some of these same points. I said, among other things, that kids at places like Yale or Stanford tend to play it safe and go for the conventional rewards. And one of the most common criticisms I got went like this: What about Teach for America? Lots of kids from elite colleges go and do TFA after they graduate, so therefore I was wrong. TFA, TFA—I heard that over and over again. And Teach for America is undoubtedly a very good thing. But to cite TFA in response to my argument is precisely to miss the point, and to miss it in a way that actually confirms what I’m saying. The problem with TFA—or rather, the problem with the way that TFA has become incorporated into the system—is that it’s just become another thing to get into.</p>
<p>（让我再举一个反面的例子。几年前我写过一篇涉及同类问题的文章。我说，那些在耶鲁和斯坦福这类名校的孩子往往比较谨慎，去追求一些稳妥的奖励。我得到的最常 见的批评是：教育项目“为美国而教”（Teach for America）如何？从名校出来的很多学生毕业后很多参与这个教育项目，因此我的观点是错误的。我一再听到TFA这个术语。“为美国而教”当然是好东西，但引用这个项目来反驳我的观点恰恰是不得要领，实际上正好证明了我想说的东西。“为美国而教”的问题或者“为美国而教”已经成为体系一部分的问题是它已经成为另外一个需要“进入”的门槛。）</p>
<p>In terms of its content, Teach for America is completely different from Goldman Sachs or McKinsey or Harvard Medical School or Berkeley Law, but in terms of its place within the structure of elite expectations, of elite choices, it is exactly the same. It’s prestigious, it’s hard to get into, it’s something that you and your parents can brag about, it looks good on your résumé, and most important, it represents a clearly marked path. You don’t have to make it up yourself, you don’t have to do anything but apply and do the work —just like college or law school or McKinsey or whatever. It’s the Stanford or Harvard of social engagement. It’s another hurdle, another badge. It requires aptitude and diligence, but it does not require a single ounce of moral imagination.</p>
<p>（从其内容来看，“为美国而教”完全不同于高盛或者麦肯锡公司或哈佛医学院或者伯克利法学院，但从它在精英期待的体系中的地位来说，完全是一样的。它享有盛名，很难进入，是值得你和父母夸耀的东西，如果写在简历上会很光彩，最重要的是，它代表了清晰标记的道路。你根本不用自己创造，什么都不用做，只需申请然后按要求做就行了，就像上大学或法学院或麦肯锡公司或别的什么。它是社会参与方面的斯坦福或哈佛，是另一个栅栏，另一枚奖章。该项目需要能力和勤奋，但不需要一丁点儿的道德想象力。）</p>
<p>Moral imagination is hard, and it’s hard in a completely different way than the hard things you’re used to doing. And not only that, it’s not enough. If you’re going to invent your own life, if you’re going to be truly autonomous, you also need courage: moral courage. The courage to act on your values in the face of what everyone’s going to say and do to try to make you change your mind. Because they’re not going to like it. Morally courageous individuals tend to make the people around them very uncomfortable. They don’t fit in with everybody else’s ideas about the way the world is supposed to work, and still worse, they make them feel insecure about the choices that they themselves have made—or failed to make. People don’t mind being in prison as long as no one else is free. But stage a jailbreak, and everybody else freaks out.</p>
<p>（道德想象力是困难的，这种 困难与你已经习惯的困难完全不同。不仅如此，光有道德想象力还不够。如果你要创造自己的生活，如果你想成为真正的独立思想者，你还需要勇气：道德勇气。不管别人说什么，有按自己的价值观行动的勇气，不会因为别人不喜欢而试图改变自己的想法。具有道德勇气的个人往往让周围的人感到不舒服。他们和其他人对世界的看法格格不入，更糟糕的是，让别人对自己已经做出的选择感到不安全或无法做出选择。只要别人也不享受自由，人们就不在乎自己被关进监狱。可一旦有人越狱，其他人都会跟着跑出去。）</p>
<p>In A Portrait of the Artist as a Young Man, James Joyce has Stephen Dedalus famously say, about growing up in Ireland in the late 19th century, “When the soul of a man is born in this country there are nets flung at it to hold it back from flight. You talk to me of nationality, language, religion. I shall try to fly by those nets.”</p>
<p>（在《青年艺术家的肖像》中，詹姆斯•乔伊斯（James Joyce）让主人公斯蒂芬•迪达勒斯（Stephen Dedalus）就19世纪末期的爱尔兰的成长环境说出了如下名言“当一个人的灵魂诞生在这个国家时，有一张大网把它罩住，防止它飞翔。你会给我谈论民族 性、语言和宗教。我想冲出这些牢笼。”）</p>
<p>Today there are other nets. One of those nets is a term that I’ve heard again and again as I’ve talked with students about these things. That term is “self-indulgent.” “Isn’t it self-indulgent to try to live the life of the mind when there are so many other things I could be doing with my degree?” “Wouldn’t it be self-indulgent to pursue painting after I graduate instead of getting a real job?”</p>
<p>（今天，我们面临的是其他的网。其中之一是我在就这些问题与学生交流时经常听到的一个术语“自我放任”。“在攻读学位过程中有这么多事要做的时候，试图按照自己的感觉生活难道不是自我放任吗？”“毕业后不去找个真正的工作而去画画难道不是自我放任吗？”）</p>
<p>These are the kinds of questions that young people find themselves being asked today if they even think about doing something a little bit different. Even worse, the kinds of questions they are made to feel compelled to ask themselves. Many students have spoken to me, as they navigated their senior years, about the pressure they felt from their peers—from their peers—to justify a creative or intellectual life. You’re made to feel like you’re crazy: crazy to forsake the sure thing, crazy to think it could work, crazy to imagine that you even have a right to try.</p>
<p>（这些是年轻人只要思考一下稍稍出格的事就不由自主地质问自己的问题。更糟糕的是，他们觉得提出这些问题是理所应当的。许多学生在毕业前夕的未来探索中跟我说，他们感受到来自同伴那里的压力，需要为创造性的生活或思想生活辩护。好像自己已经走火入魔了似的：抛弃确定无疑的东西是疯了，认为思想生活可行是疯了，想象你有权尝试是疯了。）</p>
<p>Think of what we’ve come to. It is one of the great testaments to the intellectual—and moral, and spiritual—poverty of American society that it makes its most intelligent young people feel like they’re being self-indulgent if they pursue their curiosity. You are all told that you’re supposed to go to college, but you’re also told that you’re being “self-indulgent” if you actually want to get an education. Or even worse, give yourself one. As opposed to what? Going into consulting isn’t self-indulgent? Going into finance isn’t self-indulgent? Going into law, like most of the people who do, in order to make yourself rich, isn’t self-indulgent? It’s not OK to play music, or write essays, because what good does that really do anyone, but it is OK to work for a hedge fund. It’s selfish to pursue your passion, unless it’s also going to make you a lot of money, in which case it’s not selfish at all.</p>
<p>（想象我们现在面临的局面。这是美国社会的贫困—思想、道德和精神贫困的最明显症状，美国最聪明的年轻人竟然认为听从自己的好奇心行动就是自我放任。你们得到的教导是应该上大学，但你们同时也被告知如果真的想得到教育，那就是“自我放任”。如果你自我教育的话，更糟糕。这是什么道理？进入证券咨询业是 不是自我放任？进入金融业是不是自我放任？像许多人那样进入律师界发财是不是自我放任？搞音乐，写文章就不行，因为它不能给人带来利益。但为风险投资公司 工作就可以。追求自己的理想和激情是自私的，除非它能让你赚很多钱。那样的话，就一点儿也不自私了。）</p>
<p>Do you see how absurd this is? But these are the nets that are flung at you, and this is what I mean by the need for courage. And it’s a never-ending proc ess. At that Harvard event two years ago, one person said, about my assertion that college students needed to keep rethinking the decisions they’ve made about their lives, “We already made our decisions, back in middle school, when we decided to be the kind of high achievers who get into Harvard.” And I thought, who wants to live with the decisions that they made when they were 12? Let me put that another way. Who wants to let a 12-year-old decide what they’re going to do for the rest of their lives? Or a 19-year-old, for that matter?</p>
<p>（你看到这些观点是多么荒谬了吗？这就是罩在你们身上的网，就是我说的需要勇气的意思。这是永不停息的过程。在两年前的哈佛事件中，有个学生谈到我说的大 学生需要重新思考人生决定的观点，他说“我们已经做出了决定，我们早在中学时就已经决定成为能够进入哈佛的高材生。”我在想，谁会打算按照他在12岁时做出的决定生活呢？让我换一种说法，谁愿意让一个12岁的孩子决定他们未来一辈子要做什么呢？在此问题上，谁又愿意让19岁的孩子做决定呢？）</p>
<p>All you can decide is what you think now, and you need to be prepared to keep making revisions. Because let me be clear. I’m not trying to persuade you all to become writers or musicians. Being a doctor or a lawyer, a scientist or an engineer or an economist—these are all valid and admirable choices. All I’m saying is that you need to think about it, and think about it hard. All I’m asking is that you make your choices for the right reasons. All I’m urging is that you recognize and embrace your moral freedom.</p>
<p>（你能做出的决定是你现在想什么， 你需要准备好不断修改自己的决定。让我说得更明白一些。我不是在试图说服你们都成为音乐家或者作家。成为医生、律师、科学家、工程师或者经济学家没有什么不好，这些都是可靠的、可敬的选择。我想说的是你需要思考它，认真地思考。我请求你们做的是根据正确的原因做出你的选择。我在敦促你们的是认识到你的道德自由并热情拥抱它。）</p>
<p>And most of all, don’t play it safe. Resist the seductions of the cowardly values our society has come to prize so highly: comfort, convenience, security, predictability, control. These, too, are nets. Above all, resist the fear of failure. Yes, you will make mistakes. But they will be your mistakes, not someone else’s. And you will survive them, and you will know yourself better for having made them, and you will be a fuller and a stronger person.</p>
<p>（最重要的是，不要过分谨慎。抗拒我们社会给予最高奖励的那些懦弱的价值观的 诱惑：舒服、方便、安全、可预测性、可控制性。这些也都是网。最重要的是，抗拒失败的恐惧。是的，你可能犯错误，但它们是你的错误，不是别人的。你将从错误中幸存下来，将会因为这些错误对自己有更好的认识。你将因此成为更完整和更强大的人。）</p>
<p>It’s been said—and I’m not sure I agree with this, but it’s an idea that’s worth taking seriously—that you guys belong to a “postemotional” generation. That you prefer to avoid messy and turbulent and powerful feelings. But I say, don’t shy away from the challenging parts of yourself. Don’t deny the desires and curiosities, the doubts and dissatisfactions, the joy and the darkness, that might knock you off the path that you have set for yourself. College is just beginning for you, adulthood is just beginning. Open yourself to the possibilities they represent. The world is much larger than you can imagine right now. Which means, you are much larger than you can imagine.</p>
<p>（人们常说你们年轻人属于“后情感”一代，我不敢肯定我赞同这个说法，但这是值得认真考虑的一个观点。你们更愿意避免混乱、动荡和强烈的感情，但我想说，不要回避挑战自我，不要否认欲望和好奇心、怀疑和不满、快乐和郁闷，它们可能把你从事先设定的人生道路上打倒。大学不过是人生的开始，成年时代才刚刚开始。张开双臂去迎接成年生活的各种可能性吧。这个世界比你现 在能够想象的情况广大得多。这意味着你比你能想象的情况大得多。）</p>
<h1 id="you-and-your-research"><a class="markdownIt-Anchor" href="#you-and-your-research"></a> You and your research</h1>
<p>It’s a pleasure to be here. I doubt if I can live up to the Introduction. The title of my talk is, “You and<br />
Your Research.” It is not about managing research, it is about how you individually do your research.<br />
I could give a talk on the other subject - but it’s not, it’s about you. I’m not talking about ordinary<br />
run-of-the-mill research; I’m talking about great research. And for the sake of describing great research<br />
I’ll occasionally say Nobel-Prize type of work. It doesn’t have to gain the Nobel Prize, but I mean those<br />
kinds of things which we perceive are significant things. Relativity, if you want, Shannon’s information<br />
theory, any number of outstanding theories - that’s the kind of thing I’m talking about.</p>
<p>我演讲的题目是“你和你的研究”。这不是有关研究管理方面的，而是关于你如何独自做研究的。我也可以作别的方面的专题演讲–但是不，今天是专门谈你。我不是谈什么平常的“车轱辘转”（run-of-mill）的研究，我是谈重大的研究。并且，为了描述重大的研究，我将时常要谈及相当诺贝尔奖那一类的“大事”。这和获奖不获奖无关，我指的是我们认为有重大价值的事情。如相对论，<a href="http://www.bell-labs.com/news/2001/february/26/1.html"><em>香农(Shannon)</em></a> （信息理论之父，<a href="http://www.rangang.com/" title="译者注"><em>译者注</em></a>）信息论，以及其他杰出的理论 —- 这就是我要讲的。</p>
<p>Now, how did I come to do this study? At Los Alamos I was brought in to run the computing machines<br />
which other people had got going, so those scientists and physicists could get back to business. I saw I<br />
was a stooge. I saw that although physically I was the same, they were different. And to put the thing<br />
bluntly, I was envious. I wanted to know why they were so different from me. I saw Feynman up close.<br />
I saw Fermi and Teller. I saw Oppenheimer. I saw Hans Bethe: he was my boss. I saw quite a few very<br />
capable people. I became very interested in the difference between those who do and those who might<br />
have done.</p>
<p>那么，我是怎样搞起这样的研究的呢？还在Los Alamos(美国洛斯阿拉莫斯国家实验室Los Alamos National Laboratory的所在地，1943年由能源部为研制原子弹而建立。<a href="http://www.rangang.com/" title="译者注"><em>译者注</em></a>）的时候，我负责运行有关计算机方面的事，以便那些科学家们、物理学家们可以去干他们的（大）事了。我无非是个“跑龙套”的。尽管我在身体上与他们无异，但我还是与他们不同。说实话，我挺嫉妒的。我见过Feynman (1965年获诺贝尔物理学奖。<a href="http://www.rangang.com/" title="译者注"><em>译者注</em></a>)，我见过Fermi和Teller，我见过奥本海默，尤（里乌斯）·罗伯特(Oppenheimer)(1902-1967美国原子物理学家, 原子弹计划主持人。<a href="http://www.rangang.com/" title="译者注"><em>译者注</em></a>)，我见过贝蒂(Hans Albrecht, 1906-, 美国物理学家, 曾获1967诺贝尔物理学奖。<a href="http://www.rangang.com/" title="译者注"><em>译者注</em></a>)—他就是我的“老板”。我见过不少非常有才能的人，我于是有兴趣去了解自己与那些正在做事和已经成事的人之间的差别。（瞧瞧那龙套跑的，啧啧。<a href="http://www.rangang.com/" title="译者注"></a><a href="http://www.rangang.com/" title="译者注"><em>译者注</em></a>）</p>
<p>When I came to Bell Labs, I came into a very productive department. Bode was the department head at<br />
the time; Shannon was there, and there were other people. I continued examining the questions, “Why?”<br />
and “What is the difference?” I continued subsequently by reading biographies, autobiographies, asking<br />
people questions such as: “How did you come to do this?” I tried to find out what are the differences.<br />
And that’s what this talk is about.</p>
<p>当年我刚到贝尔实验室的时候，我进入到了一个硕果累累的部门。Bode是那时的部门头，香农(Shannon)也在那里。我一直问自己这样的问题：“为什么”和“差别是什么”。我于是去读有关的传记、自传，去问他们这样的问题：“你是怎么干起来这样的事的？” 我试着搞清差别是什么。这就是今天要谈的内容。</p>
<p>Now, why is this talk important? I think it is important because, as far as I know, each of you has one<br />
life to live. Even if you believe in reincarnation it doesn’t do you any good from one life to the next! Why<br />
shouldn’t you do significant things in this one life, however you define significant? I’m not going to define<br />
it - you know what I mean. I will talk mainly about science because that is what I have studied. But<br />
so far as I know, and I’ve been told by others, much of what I say applies to many fields. Outstanding<br />
work is characterized very much the same way in most fields, but I will confine myself to science.</p>
<p>那么，为什么这样的话题重要呢？那是因为，就我所知，你一生只有一次生命。即使你相信来世，那也无助于你对待来世的“来世”！为什么你不在这次生命中就做一些意义重大的事呢，不管你是如何定义你的“意义重大”？我不会去定义它 —- 你懂我的意思。我将主要谈论科学，因为这是我研究的领域。尽管就我所知，别人也多次告诉我，我所讲的（道理）也适用于其他很多领域。尽管杰出的工作在很多不同的领域里都具有相同的特点，我还是将我自己限定在科学的领域。(他老人家的意思是说，他要去当总统或“政协委员”的话，实在是大材小用，驴头不对马嘴。<a href="http://www.rangang.com/" title="译者注"><em>译者注</em></a>)</p>
<p>In order to get at you individually, I must talk in the first person. I have to get you to drop modesty and<br />
say to yourself, “Yes, I would like to do first-class work.” Our society frowns on people who set out to do<br />
really good work. You’re not supposed to; luck is supposed to descend on you and you do great things<br />
by chance. Well, that’s a kind of dumb thing to say. I say, why shouldn’t you set out to do something<br />
significant. You don’t have to tell other people, but shouldn’t you say to yourself, “Yes, I would like to<br />
do something significant.”</p>
<p>为了让你感觉到专门针对你个人的，我必须使用第一人称。我必须让你抛开谦逊并对自己说：“对，我想做一流的事。” 我们的社会会对那些着手去做像样的事的人皱起眉头，他们会怀疑：“你是那块料吗？运气会光顾你吗？或许你侥幸做成某件大事。” 好吧，随这些闲言碎语去吧。我要说的是：你为什么不现在就动手去做一点大事呢？！你不用告诉别人，但是你可以告诉你自己啊：“对，我就是喜欢做一些重要的 事。”</p>
<p>In order to get to the second stage, I have to drop modesty and talk in the first person about what I’ve<br />
seen, what I’ve done, and what I’ve heard. I’m going to talk about people, some of whom you know, and<br />
I trust that when we leave, you won’t quote me as saying some of the things I said.</p>
<p>为了达到第二个层次，我自己也得放下谦逊并以第一人称来谈我见识了什么，我做了什么，以及我听到什么。我会谈及一些人，其中一些你们认识，但我相信当我们离开的时候，你们不会把我的话当成“话柄”到处说事儿。</p>
<p>Let me start not logically, but psychologically. I find that the major objection is that people think great<br />
science is done by luck. It’s all a matter of luck. Well, consider Einstein. Note how many different things<br />
he did that were good. Was it all luck? Wasn’t it a little too repetitive? Consider Shannon. He didn’t<br />
do just information theory. Several years before, he did some other good things and some which are still<br />
locked up in the security of cryptography. He did many good things.</p>
<p>请让我从心理学的角度开始，而不是逻辑的。我主要不赞成人们认为重大科学成果是因运气而成。要说什么事情都和运气有关。但是，想想爱因斯坦，看看他做了多少 不凡的事，那全都是运气使然吗？难道就没有一点可重复性？想想香农，他不仅仅搞了信息理论，多年以前他就做了一些别的好的事，以及为确保密码学不被攻破而 无法公开的其他一些技术。 他可做了不少的好事。</p>
<p>You see again and again, that it is more than one thing from a good person. Once in a while a person<br />
does only one thing in his whole life, and we’ll talk about that later, but a lot of times there is repetition.<br />
I claim that luck will not cover everything. And I will cite Pasteur who said, “Luck favors the prepared<br />
mind.” And I think that says it the way I believe it. There is indeed an element of luck, and no, there<br />
2<br />
isn’t. The prepared mind sooner or later finds something important and does it. So yes, it is luck. The<br />
particular thing you do is luck, but that you do something is not.</p>
<p>你一次又一次地看到一个“好”人不只做一件“好”事。但有时一个人一生就做一件事，关于这一点我们一会儿再谈，只是更多时候是存在可重复性的。我坚持认为运气并不推及所有的事。我在此引用巴斯德(Louis Pasteur，19世纪法国化学家。<a href="http://www.rangang.com/" title="译者注"><em>译者注</em></a>)的话：“运气只光顾有准备之士。” 他的话说出了我心里所想。的确有运气的因素，同时也有没有运气的成分。有准备之士早晚会找到重要的事并去做它。所以，的确，是有运气。你去做的那件特定的事是偶然，但是，你总归要做某事却不是(The particular thing you do is luck, but that you do something is not)。</p>
<p>For example, when I came to Bell Labs, I shared an office for a while with Shannon. At the same time<br />
he was doing information theory, I was doing coding theory. It is suspicious that the two of us did it at<br />
the same place and at the same time - it was in the atmosphere. And you can say, “Yes, it was luck.”<br />
On the other hand you can say, “But why of all the people in Bell Labs then were those the two who did<br />
it?” Yes, it is partly luck, and partly it is the prepared mind; but ‘partly’ is the other thing I’m going<br />
to talk about. So, although I’ll come back several more times to luck, I want to dispose of this matter of<br />
luck as being the sole criterion whether you do great work or not. I claim you have some, but not total,<br />
control over it. And I will quote, finally, Newton on the matter. Newton said, “If others would think as<br />
hard as I did, then they would get similar results.”</p>
<p>举一个例子，我当初来到贝尔实验室，和香农共用一个办公室。他在那间办公室搞出了他的信息理论的同时，我也做出我的编码理论。真有点奇怪，我们两人居然在同一办公室、同一时刻做了这些“事”—-在 某种气氛中。你可以说：那是运气。另一方面你也可以问：“但是为什么那时所有在贝尔实验室的人只有我们两个做了这事呢？” 是的，那里面部分是“运气”，部分是“有准备”。 “部分”一概念也是我后面要谈到的另一问题。所以， 尽管我会不时提及“运气”这个问题，但我不会把运气这东西看成与你的工作出色与否有没有关联的的唯一砝码（谢谢海涛帮我“掰斥”这句。<a href="http://www.rangang.com/" title="译者注"><em>译者注</em></a>）我主张即使不是全部你也要对“运气”有部分掌控。最后我引用牛顿对此的原话：“如果别人也和我一样努力思考的话，那么他们也许会得出差不多的结论。”（<a href="http://www.rangang.com/" title="译者注"><em>译者注</em></a>：问问自己，用一卡车苹果往你头上砸，直把你砸晕看能砸出个什么来。）</p>
<p>One of the characteristics you see, and many people have it including great scientists, is that usually<br />
when they were young they had independent thoughts and had the courage to pursue them. For example,<br />
Einstein, somewhere around 12 or 14, asked himself the question, “What would a light wave look like<br />
if I went with the velocity of light to look at it?” Now he knew that electromagnetic theory says you<br />
cannot have a stationary local maximum. But if he moved along with the velocity of light, he would see<br />
a local maximum. He could see a contradiction at the age of 12, 14, or somewhere around there, that<br />
everything was not right and that the velocity of light had something peculiar. Is it luck that he finally<br />
created special relativity? Early on, he had laid down some of the pieces by thinking of the fragments.<br />
Now that’s the necessary but not sufficient condition. All of these items I will talk about are both luck<br />
and not luck.</p>
<p>包括许多（大）科学家在内的很多人所具有的一个特质，如你所见，就是通常在他们年轻的时候，他们具有独立的思维并有勇气去追求。举一个例子，爱因斯坦，大概在他12或14岁的时候，他问自己：如果我有光速那么快，那么光波看起来是个什么样子？现在他知道了光电理论告诉你不可能有稳定的局部极大(local maximum)，但是你随着光速移动，你就能看到局部极大(local maximum)。他能在12或14的时候就难能看到这样的“矛盾”—-所有的事物在光速条件下看起来不一样。是运气使得他最后创造了相对论吗？(那是由于)他早就开始积累对此问题的思考。这，就是必要条件，而非充分条件。所有这些就是我要谈论的“运气”和“非运气”。</p>
<p>How about having lots of ‘brains?’ It sounds good. Most of you in this room probably have more than<br />
enough brains to do first-class work. But great work is something else than mere brains. Brains are<br />
measured in various ways. In mathematics, theoretical physics, astrophysics, typically brains correlates<br />
to a great extent with the ability to manipulate symbols. And so the typical IQ test is apt to score them<br />
fairly high. On the other hand, in other fields it is something different. For example, Bill Pfann, the<br />
fellow who did zone melting, came into my office one day. He had this idea dimly in his mind about<br />
what he wanted and he had some equations. It was pretty clear to me that this man didn’t know much<br />
mathematics and he wasn’t really articulate. His problem seemed interesting so I took it home and<br />
did a little work. I finally showed him how to run computers so he could compute his own answers. I<br />
gave him the power to compute. He went ahead, with negligible recognition from his own department,<br />
but ultimately he has collected all the prizes in the field. Once he got well started, his shyness, his<br />
awkwardness, his inarticulateness, fell away and he became much more productive in many other ways.<br />
Certainly he became much more articulate.</p>
<p>那么，把很多聪明的头脑都凑在一起会怎样？这主意听起来不错。这屋子里的听众们大概都具有从事一流工作还富余的头脑。“有头脑”可用不同的方式来衡量。在数学、物理、天体物理方面，一般来说，头脑在很大程度上与处理那些“符号”有关。因此标准的IQ测试就能测定出他们的高智商程度。但另一方面，在其他领域里有点不同。举个例子，Bill Pfann，此人发明了区域溶化(zome melting)理论，有一天走进我的办公室。他那时只是模模糊糊地有了一些想法和提出了一些式子。当时我非常清楚此人不太懂数学，而且有点“茶壶煮汤圆—-有话说不出”的意思。但我觉得他的问题挺有意思的，于是我就把他的问题带回家琢磨了一下。我最后教他如何使用计算机以便帮他计算自己的答案。我给他提供了用数学计算的动力，他于是径直干了下去，他们自己部门的人都没人理解他。终于他收获了在此领域里的全部声誉。只要他有了一个良好的开头，他的胆怯、他的不熟练、他的含糊不清都会消失。他在其他很多方面也更强了。当然，他也更加融会贯通(articulate)。（<a href="http://www.rangang.com/" title="译者注"><em>译者注</em></a>：也许你对articulate会有不同翻译，对我，这里articulate就是“融会贯通”。原文的字面意思是“他的表达能力也大大增强了”。在很多方面，如果不是完全意义上的语言问题，表达不清主要原因是没有融会贯通。这里Hamming并没有教Pfann表达的事，所以我认为是“融会贯通”的问题。）</p>
<p>And I can cite another person in the same way. I trust he isn’t in the audience, i.e. a fellow named<br />
Clogston. I met him when I was working on a problem with John Pierce’s group and I didn’t think he<br />
had much. I asked my friends who had been with him at school, “Was he like that in graduate school?”<br />
“Yes,” they replied. Well I would have fired the fellow, but J. R. Pierce was smart and kept him on.<br />
Clogston finally did the Clogston cable. After that there was a steady stream of good ideas. One success<br />
brought him confidence and courage.</p>
<p>我还要举另一个人的例子，希望他不在场。一个叫Clogson的家伙。我遇到他的时候正值我和他一起在John Pierce（贝尔实验室研究总监，在通信理论、电子光学和行波管研究方面有突出贡献。<a href="http://www.rangang.com/" title="译者注"><em>译者注</em></a>。）小组一起攻克一个难题，我那时可没觉得他有肚里没有什么料(I didn’t think he had much)。我问那些和他同过学的同事们：“他在学校里就这德性吗？”“是的”，他们回答。那好，我还是把他辞退了吧。但是John Pierce明智地把他保了下来。Clogston最终做成了Clogston Cable (想想吧，能以他的名字命名东西的人是什么牛吧。<a href="http://www.rangang.com/" title="译者注"><em>译者注</em></a>)。他并从此一发不可收拾—-一次成功给他带来了自信和勇气。</p>
<p>One of the characteristics of successful scientists is having courage. Once you get your courage up and<br />
believe that you can do important problems, then you can. If you think you can’t, almost surely you are<br />
not going to. Courage is one of the things that Shannon had supremely. You have only to think of his<br />
major theorem. He wants to create a method of coding, but he doesn’t know what to do so he makes<br />
a random code. Then he is stuck. And then he asks the impossible question, “What would the average<br />
random code do?” He then proves that the average code is arbitrarily good, and that therefore there<br />
must be at least one good code. Who but a man of infinite courage could have dared to think those<br />
thoughts? That is the characteristic of great scientists; they have courage. They will go forward under<br />
incredible circumstances; they think and continue to think.</p>
<p>成功科学家的重要品质之一就是勇气。一旦你鼓起了自己的勇气并相信自己能解决重要的问题，那么你就行。如果你觉得你不行，几乎肯定你不会去做。勇气就是香农（Shannon）所拥有的最重要的东西之一。想一想他的主要定理。他想建立一种编码方法，但是他并不清楚如何做，所以他搞了一个随机码(a random code)。然后他又卡了壳。然后他问了一个“不可能”的问题：“一个平均随机码（the average random code）会怎样？” 他于是去证明了平均码(average code)是arbitrarily good（随意性良好？），并且因而一定存在至少一个好的编码。除了一个拥有无限勇气的人，还有谁胆敢有如此勇气想此所想! 这就是伟大的科学家的品质—-他们有勇气。他们不管周围境况，勇往直前；他们思考、思考、再思考。</p>
<p>Age is another factor which the physicists particularly worry about. They always are saying that you<br />
have got to do it when you are young or you will never do it. Einstein did things very early, and all the<br />
quantum mechanic fellows were disgustingly young when they did their best work. Most mathematicians,<br />
theoretical physicists, and astrophysicists do what we consider their best work when they are young. It is not that they don’t do good work in their old age but what we value most is often what they did early.<br />
On the other hand, in music, politics and literature, often what we consider their best work was done<br />
late. I don’t know how whatever field you are in fits this scale, but age has some effect.</p>
<p>年龄是另外一个自然科学家们（physicists）担心的因素。他们总是说你要做就得趁年轻，否则就别做。爱因斯坦做事就早，所有的量子理论的同仁们做他们的“事”的时候都早得吓人（disgustingly young）。 大多数数学家、理论物理学家，以及天体物理学家都在他们的早年作出了我们公认的他们最好的成就。这并不是说他们岁数大了以后就不能做有益的工作，只是我们 认为他们最有价值的事是他们年青的时候所为。在另一方面，在音乐、政治和文学方面，通常的情况是，那些我们仰慕的大作品往往出炉较晚。我不知道你的情况适 合以上的哪种情况，但年龄总是有影响。</p>
<p>But let me say why age seems to have the effect it does. In the first place if you do some good work you<br />
will find yourself on all kinds of committees and unable to do any more work. You may find yourself as<br />
I saw Brattain when he got a Nobel Prize. The day the prize was announced we all assembled in Arnold<br />
Auditorium; all three winners got up and made speeches. The third one, Brattain, practically with tears<br />
in his eyes, said, “I know about this Nobel-Prize effect and I am not going to let it affect me; I am going<br />
to remain good old Walter Brattain.” Well I said to myself, “That is nice.” But in a few weeks I saw it<br />
was affecting him. Now he could only work on great problems.</p>
<p>就让我说说为什么年龄产生那些影响。 首先，如果你干得不错的话，你就发现你被拉进了各种各样的委员会，然后你就没法做更多的事了。你也许发现你就和我见到获诺贝尔奖时的布拉顿(Brattain, 美国物理学家, 曾获1956年诺贝尔物理学奖)差不多。颁奖的那天我们全都聚集Arnold大厅（Arnold Auditorium），三个获奖者都上台发表了演讲。第三个是布拉顿，他差不多噙着泪水说：“我知道这个诺贝尔奖的影响但我不会让它影响我。我会继续保持做个好的老瓦尔特.布拉顿。” 我于是对自己说：“说的真好！”。 但是仅仅几周的功夫我就看见（诺贝尔奖）对他产生影响。现在他只能对付那些“伟大的”的问题了。（<a href="http://www.rangang.com/" title="译者注"><em>译者注</em></a>：既然如此的大牛科学家都为身外之物所累，我们又怎可幸免？所以，你没有做好“出名”的准备之前，不可妄自出名。“名”可不是什么人都可以出的。）</p>
<p>When you are famous it is hard to work on small problems. This is what did Shannon in. After<br />
information theory, what do you do for an encore? The great scientists often make this error. They fail<br />
to continue to plant the little acorns from which the mighty oak trees grow. They try to get the big thing<br />
right off. And that isn’t the way things go. So that is another reason why you find that when you get<br />
early recognition it seems to sterilize you. In fact I will give you my favorite quotation of many years.<br />
The Institute for Advanced Study in Princeton, in my opinion, has ruined more good scientists than any<br />
institution has created, judged by what they did before they came and judged by what they did after.<br />
Not that they weren’t good afterwards, but they were superb before they got there and were only good<br />
afterwards.</p>
<p>当你成名后再做一些“小”事就难了，香农（Shannon）也难逃此运。有了信息理论(information theory)，你还能有什么“招”让人叫好呢？（ingot的建议太妙了！受用。译者）那些伟大的科学家也经常犯这样的“晕”。他们未能继续燃烧心中本可以燎原的星星之火（They fail to continue to plant the little acorns from which the mighty oak trees grow）。他们想一下子做成一件大事。这并不是事情的本来面目。所以，这解释了为什么你明白一旦成名太早你就往往“废”了（sterilize you）。实际上我要给你我多年的最爱的例子：普林斯顿高级研究院，比起其他的学院，在我看来，已经毁了无数好的科学家，你只要比比那些科学家去“普高”之前和之后的成就就可以分辨这点。他们进去之前可谓超级牛（superb），出来之后就变得一般牛了(only good)。</p>
<p>This brings up the subject, out of order perhaps, of working conditions. What most people think are<br />
the best working conditions, are not. Very clearly they are not because people are often most productive<br />
when working conditions are bad. One of the better times of the Cambridge Physical Laboratories was<br />
when they had practically shacks - they did some of the best physics ever.</p>
<p>从这又引出工作条件的话题，也许有点次序颠倒。多数人想的是最好的工作条件。非常清楚，事实并非如此，因为人们常常在条件不好的时候富有成果。剑桥物理实验室有史以来最好的时期恰逢他们实际上是最简陋的时期—-他们做出了有史以来最好的物理。</p>
<p>I give you a story from my own private life. Early on it became evident to me that Bell Laboratories was<br />
not going to give me the conventional acre of programming people to program computing machines in<br />
absolute binary. It was clear they weren’t going to. But that was the way everybody did it. I could go to<br />
the West Coast and get a job with the airplane companies without any trouble, but the exciting people<br />
were at Bell Labs and the fellows out there in the airplane companies were not. I thought for a long<br />
while about, “Did I want to go or not?” and I wondered how I could get the best of two possible worlds.<br />
I finally said to myself, “Hamming, you think the machines can do practically everything. Why can’t<br />
you make them write programs?” What appeared at first to me as a defect forced me into automatic<br />
programming very early. What appears to be a fault, often, by a change of viewpoint, turns out to be one<br />
of the greatest assets you can have. But you are not likely to think that when you first look the thing and<br />
say, “Gee, I’m never going to get enough programmers, so how can I ever do any great programming?”</p>
<p>我给你一个我个人生活的故事。早些时候，对我来讲似乎表明贝尔实验室不像是常说的搞二进制的计算机程序的人聚集的地方。的确不是。但是每个人的确就是这样做出来的。（贝尔实验室自1925年成立至今，科学家们共获31000多项专利，他们中的11人获诺贝尔奖，他们中的其他人选择获得别的奖或其他的东西。<a href="http://www.rangang.com/" title="译者注"><em>译者注</em></a>。）我本可以去西海岸找个什么飞机公司的差事也不是什么问题，但是贝尔实验室的人是些让人兴奋的人，而那些飞机公司的同仁不是。我想了好长一阵子，我去还是不去？我一直在想两全其美的是。最后我对自己说：“Hamming， 你一直想计算机能做任何事，为什么你不能让他们写程序？” 首先跳进我脑海的是“毛病”，并促使我非常早的进入自动程序系统。所以，那些看起来像缺陷的东西，通过换位思考，常常变成你可能拥有的最有价值的财富。但 你似乎不太可能头一次看到它时就说：“哇塞，我不可能召集足够的程序员，那么我怎能搞成任何大事呢？”</p>
<p>And there are many other stories of the same kind; Grace Hopper has similar ones. I think that if you<br />
look carefully you will see that often the great scientists, by turning the problem around a bit, changed<br />
a defect to an asset. For example, many scientists when they found they couldn’t do a problem finally<br />
began to study why not. They then turned it around the other way and said, “But of course, this is what<br />
it is” and got an important result. So ideal working conditions are very strange. The ones you want<br />
aren’t always the best ones for you.</p>
<p>这类的故事多的是。Grace Hopper (Grace Murray Hopper 是共享代码库、编译器验证软件以及编译器标准的使用的早期倡导者。促进了计算机科学的发展,促成了COBOL的产生。<a href="http://www.rangang.com/" title="译者注"><em>译者注</em></a>) 也有一个。我想只要你用点心你就能明白，伟大的科学家常常通过换一个角度看问题，就能把瑕疵变成财富。例如，许多科学家每当不能解决一个难题时，他们终究转而去研究为什么“不能”的问题。他们然后反过来看问题：“本来嘛，这才是问题所在。” 于是，就有了一个重要的结果。所以，理想的工作条件非常奇特—-你想要的往往不是对你来说最好的。</p>
<h1 id="9大关于生产力的错误认知"><a class="markdownIt-Anchor" href="#9大关于生产力的错误认知"></a> <a href="https://www.cnblogs.com/joe-yang/p/18173932">9大关于生产力的错误认知</a></h1>
<p>9大关于生产力的错误认知<br />
以及你应该做的9个有用的替代方法</p>
<h2 id="生产力"><a class="markdownIt-Anchor" href="#生产力"></a> 生产力</h2>
<p>大量文章不断提供新的方法来提高生产力,或者以新的方式重新包装相同的建议。然而,无论我们读了多少文章,我们大多数人仍然对自己的坏习惯感到无助。部分挑战在于,养成提高生产力的习惯需要时间。</p>
<p>但是很大一部分问题在于,许多建议实际上并没有帮助,甚至可能适得其反。这里列出了关于生产力的9大错误认知——这些被普遍认为正确的观点实际上站不住脚,可能会让你误入歧途。</p>
<p>因为我们喜欢给你可行的信息,所以也提出了一些替代方法,帮助你保持高效——以及心理健康!</p>
<h2 id="神话1模仿高度成功人士的习惯"><a class="markdownIt-Anchor" href="#神话1模仿高度成功人士的习惯"></a> 神话1:模仿高度成功人士的习惯。</h2>
<p>许多生产力文章喜欢罗列高度成功人士的日常习惯:史蒂夫·乔布斯每周只吃两种食物,西格蒙德·弗洛伊德每天都修胡子,奥普拉从不错过会议,蒂姆·库克凌晨3:45起床(真的吗?),等等。然而,把高度成功人士的习惯当作圭臬是有缺陷的,原因有几个。</p>
<p>一个原因是这在统计学上值得质疑。</p>
<p>心理学家Aditya Shukla在他的博客Cognition Today上说:“对于少数人来说,培养高效习惯可以让他们成功,然而尽管使用了相同的习惯,许多人仍然不成功。”</p>
<p>此外,它让人觉得高度成功的人总是保持巅峰状态。但是,就连本杰明·富兰克林这样知名的人物,他为自己制定了一套要求很高的美德和目标,可能还是待办事项的发明者,也&quot;天生不擅长保持文件和其他物品井井有条,他觉得这种努力非常烦人,几乎因沮丧而放弃,&quot;正如《每日仪式:艺术家如何工作》的作者梅森·库里所说。“此外,印刷生意的需求意味着他不能总是遵循自己制定的严格每日时间表。”</p>
<p>把高度成功的人放在神坛上可能在不知不觉中阻碍了我们自己的努力。Thrive Global网站的健康教练Casey von Iderstein表示:“我们很容易忘记他们在成功道路上经历过并且仍在经历自己的一系列挣扎和挑战。”“我们可能觉得他们的生活完美无缺,遥不可及。”</p>
<h3 id="相反把成功人士当作激励而不是偶像"><a class="markdownIt-Anchor" href="#相反把成功人士当作激励而不是偶像"></a> 相反:把成功人士当作激励,而不是偶像</h3>
<p>从你欣赏的人那里获得激励,尝试他们的生产力方法,效仿那些真正帮助你提高工作效率的想法——其他的就抛到一边。</p>
<p>&quot;当我们看到某人创造了一种对我们有吸引力的生活方式时,重要的是要把他们当作真实的、人性化的激励(这与崇拜偶像大不相同)——因为我们从这个角度看问题时,就能对整体情况有更清晰的认识,&quot;von Iderstein说。</p>
<h2 id="神话2最大化利用每一刻时间"><a class="markdownIt-Anchor" href="#神话2最大化利用每一刻时间"></a> 神话2:最大化利用每一刻时间。</h2>
<p>最根深蒂固的神话之一——以至于人们把它等同于生产力本身——是认为高效工作就是要最大化利用一天中的每个清醒时刻,以尽可能快的速度完成尽可能多的事情。</p>
<p>事实上,试图成为一台永不停歇的成就机器,与人性不符。根据&quot;深度工作&quot;专家Cal Newport和其他研究,我们每天大约有3到4个高效时段。</p>
<p>&quot;多产与时间管理无关,&quot;沃顿商学院的组织心理学家Adam Grant说。 “一天中的时间是有限的,专注于时间管理只会让我们更清楚地意识到我们浪费了多少时间。”</p>
<p>事实上,专注于最大化利用时间实际上可能会削弱我们的创造力。Grant说:“生产力和创造力需要相反的注意力管理策略。生产力通过提高注意力过滤来排除不相关或分散注意力的想法。但是创造力则是通过降低注意力过滤来吸纳那些想法。”</p>
<p>心理学家Mihaly Csikszentmihalyi指出,创造力的能量是非常复杂的,其中包含许多矛盾的元素。</p>
<p>他说,有创造力的人&quot;经常休息,睡眠充足。&quot;“关键是他们能控制自己的精力;不受日历、时钟、外部日程的支配。必要时,他们可以把精力集中起来像激光束一样;不需要时,创造型人格会立即给自己充电。”</p>
<h3 id="相反确定并专注于一天中你最有效率的几个小时"><a class="markdownIt-Anchor" href="#相反确定并专注于一天中你最有效率的几个小时"></a> 相反:确定并专注于一天中你最有效率的几个小时。</h3>
<p>把精力集中在你最专注的那几个小时里。找出你一天中效率最高的时间段,使用&quot;吃掉那只青蛙&quot;或&quot;时间划分&quot;等方法来完成最重要的工作。在工作时间之外,一定要抽出时间放松,保证充足睡眠。</p>
<h2 id="神话3设定大目标"><a class="markdownIt-Anchor" href="#神话3设定大目标"></a> 神话3:设定大目标。</h2>
<p>在自我提升的语境下,常常给人的印象是,目标定得最大的人最成功。</p>
<p>但是,如果你设定了一些目标,比如报名参加一个半程马拉松以激励自己多跑步,或者出版小说以促使自己写作,你可能会因为目标太大、太急而不知所措,可能会适得其反。从长远来看,它可能会让你觉得这些行为——跑步、写作等——太吓人了。</p>
<p>芝加哥大学和韩国商学院的研究人员的一组研究发现了这一点。过于关注目标——无论是在跑步机上锻炼、折纸、使用牙线还是练习瑜伽——都与更早放弃有关。</p>
<p>在其中一个实验中,研究人员将一组被告知要把锻炼视为减肥手段的学生,与另一组被告知要关注锻炼体验的学生进行了比较。然后要求每组说明他们的锻炼目的。有减肥目标的学生计划在跑步机上跑的时间比被告知要关注体验的学生长,但实际情况却相反:关注目标的学生实际上跑的时间比关注锻炼体验的学生少(34分钟,而后者为43分钟)。</p>
<p>正如99u在描述这项研究时总结的那样:“过于专注于目标会分散我们对追求这些目标所需活动的内在乐趣的注意力。”</p>
<h3 id="相反从极其微小的-持续的习惯开始"><a class="markdownIt-Anchor" href="#相反从极其微小的-持续的习惯开始"></a> 相反:从&quot;极其微小的&quot;、持续的习惯开始。</h3>
<p>要养成可持续的生产力习惯,最好从容易实现的任务开始。心理学家尼克·威格纳尔说:“我们中的许多人很快就会失去动力,灰心丧气,过早地放弃目标,因为我们想一口吃成个胖子。”</p>
<p>他建议&quot;从非常小的事情开始&quot;。想出一个看似可管理的、有规律的例行工作,然后再从中降低几个步骤。例如,如果你的目标是写一部小说,可以从每天早上写一个小时开始,然后缩减到每天500字,接着是每个工作日500字,最后定为每个工作日300字。</p>
<p>基本上,任务越小,就越容易养成坚持的习惯。最终,这些小小的成就累积起来就能成就一件大事——比如写出那部小说。</p>
<h2 id="神话4优化你的生产力应用和系统"><a class="markdownIt-Anchor" href="#神话4优化你的生产力应用和系统"></a> 神话4:优化你的生产力应用和系统。</h2>
<p>对于一个Doist的作者来说,驳斥这一点有点可笑,但是请听我说完。调整(或彻底改造)我们的生产力应用和系统,让我们觉得自己正在取得进展。问题是,这种&quot;进展&quot;是在管理我们的生产力应用和系统,而不是真正朝着目标努力。</p>
<p>尽管找到合适的应用程序(对我来说是Todoist)或系统(对我来说是番茄工作法)很好,但过于依赖它们可能会适得其反,尤其是当它侧重于数量——完成尽可能多的待办事项——而不是质量——优先处理对目标影响最大的任务时。杜克大学心理学和行为经济学教授丹·艾瑞里(Dan Ariely)也有同感。</p>
<p>以努力实现&quot;收件箱归零&quot;为例。如果目标是每天结束时收件箱里没有邮件,那就会花大量时间查看邮件,创建精细的归档系统。但这只会导致收件箱变成一个空白屏幕。它实际上并没有实现任何更大的目标。(这甚至可能是浪费时间。根据IBM研究人员的一项研究,使用文件夹整理电子邮件的人找邮件的速度并不比直接搜索邮件的人快)。</p>
<p>在某种程度上,优化生产力系统的边际效用会变成负面影响。通过使用应用程序和系统来量化自己是令人兴奋甚至上瘾的,但它可能会分散我们对更需要认知能力——从根本上更令人满意——的工作的注意力。</p>
<p>只使用几个应用程序和系统,不要为了跟上每一个新东西而焦虑。</p>
<h3 id="相反有选择地使用应用程序和系统"><a class="markdownIt-Anchor" href="#相反有选择地使用应用程序和系统"></a> 相反:有选择地使用应用程序和系统。</h3>
<p>离线设定你的优先事项。然后,使用你最喜欢的应用程序或系统来分解和实现你的优先事项。只使用几个应用程序和系统,不要为了跟上每一个新东西而焦虑。选择应用程序应基于它们是否能帮助你实现目标,而不是因为你觉得应该使用热门新应用。</p>
<h2 id="神话5使用奖励"><a class="markdownIt-Anchor" href="#神话5使用奖励"></a> 神话5:使用奖励。</h2>
<p>美国文化大力宣扬,人们最强烈的动力来自外部奖励,比如金钱或有声望的头衔。</p>
<p>但是,一个人意识到自己想要的所有金钱和权力并没有让他们感到快乐,这样的故事由来已久。</p>
<p>相反,我们往往通过&quot;内在动机&quot;获得最有意义、最持久的生产力。</p>
<p>根据对约3500名德国中小学生进行的一项2013年研究,那些为了获得好成绩而努力学习的学生短期内表现不错,但那些因为对某个学科感兴趣并想掌握它而努力学习的学生长期表现更好。</p>
<p>有趣的是,当人们已经对某项任务感兴趣时,使用外部奖励——比如加薪、晋升和福利——会削弱内在动机。如果对一个已经对某个项目感兴趣的人引入外部奖励,就会取代内在动机,这种现象被称为&quot;动机拥挤理论&quot;。即使后来把外部奖励从情境中移除,人们也很难重新唤起原有的内在动机。</p>
<h3 id="相反培养内在动机"><a class="markdownIt-Anchor" href="#相反培养内在动机"></a> 相反:培养内在动机。</h3>
<p>专注于培养你的内在动机。首先,花点时间用艾森豪威尔矩阵之类的框架列举你生活中的主要价值观。这将有助于你确定优先事项,了解你最想在工作中培养的技能。</p>
<p>然后,关注过程而不是结果。例如,如果你正在尝试写一部小说,你可以分时段写作,甚至可以制定一个待办事项清单,将要打勾的项目设为时间增量。这会让你朝着一个非常真实和有限的目标努力,即在特定时间内写作,而不是朝着更抽象、面向结果的目标,比如写一部小说,甚至是写一章。</p>
<p>正如作家兼艺术家奥斯汀·克莱恩所说,要关注动词而不是名词:</p>
<p>“很多人想当名词,却不想做动词所代表的事。他们想要头衔,却不想工作……做动词所指的事情会带你去一个比仅仅想要当名词更远、更有趣的地方。”</p>
<h2 id="神话6意志力是有限的"><a class="markdownIt-Anchor" href="#神话6意志力是有限的"></a> 神话6:意志力是有限的。</h2>
<p>意志力是社会心理学中最具争议的主题之一。多年来,一种叫做&quot;自我损耗&quot;的理论一直主导着传统观点。根据这一理论,行使意志力和抵制诱惑(吃零食、查看社交媒体、小睡等)是一项认知要求很高的任务,会削弱我们的表现能力。</p>
<p>但是这一理论最近因广泛难以复制其研究结果而受到质疑。新的研究表明,意志力可能更多地取决于环境和文化。例如,一项比较了来自印度的400人和来自美国的450人的研究发现,与印度人相比,美国人在坚持完成任务方面的自制力更差。</p>
<p>研究人员之一Veronika Job解释说:“在东亚文化背景下,通过日常锻炼自制力来变得更强大是哲学传统的一部分。<br />
自我损耗&quot;取决于文化影响和背景。”</p>
<p>Job、Carol Dweck和Gregory Walton的相关研究发现,与那些认为意志力有限的参与者相比,认为意志力无限的参与者表现出较少的自我损耗迹象。甚至&quot;自我损耗&quot;理论的创始人Roy Baumeister也发表了一篇论文,指出&quot;动机、个人信念和有限的资源&quot;是影响意志力的不同因素。</p>
<p>未能复制Baumeister理论的研究人员Michael Inzlicht和Brandon J. Schmeichel表示:&quot;[自我损耗]不是神秘的自控资源丧失的结果,而是动机、注意力和情绪转变的结果。&quot;</p>
<h3 id="相反通过积极的自我肯定和习惯养成随着时间的推移增强你的意志力"><a class="markdownIt-Anchor" href="#相反通过积极的自我肯定和习惯养成随着时间的推移增强你的意志力"></a> 相反:通过积极的自我肯定和习惯养成,随着时间的推移增强你的意志力。</h3>
<p>养成小习惯或仪式有助于随时间增强意志力。夏天,我养成了朱莉娅·卡梅伦的《艺术之路》一书中推荐的一个叫做&quot;晨间日记&quot;的习惯,即每天早上写三页,不用担心技巧或内容。这样做让我养成了不想写作时也要写作的习惯,我发现随之而来的是写作动力和实际写作时间的增加。当一个行为成为习惯时,它就不需要任何意志力了。(关于习惯的重要性,可以看查尔斯·杜希格的《习惯的力量》一书)。</p>
<p>根据2009年的一项研究,自我肯定也有助于增强意志力。试着对自己说或写一段积极的话,或者留意自己的消极想法并修正它们(例如,把&quot;不能&quot;变成&quot;能&quot;)。这听起来可能有点俗气,但似乎很有效。</p>
<p>尽管意志力是可塑的,但重要的是不要以牺牲休闲和放松为代价过度工作。休息和腾出时间玩耍会帮助你学会喜欢自己的习惯,从而坚持下去。</p>
<h2 id="神话7想象自己实现目标"><a class="markdownIt-Anchor" href="#神话7想象自己实现目标"></a> 神话7:想象自己实现目标。</h2>
<p>实现目标与你的想象力之间唯一的障碍就是你自己,对吗?如果你能简单地看到自己达到目标——跑完马拉松的终点线,把小说寄给经纪人,得到梦想中的工作——你就会实现它。像&quot;秘密&quot;这样的可视化技巧听起来应该管用,但实际上往往不奏效。</p>
<p>根据一篇直截了当地题为&quot;对理想化未来的积极幻想会消耗能量&quot;的论文,可视化不会激励我们跳得更高,反而会让我们变得自满。</p>
<p>&quot;积极幻想预示着较差成就的一个原因是,它们不会产生追求理想未来的能量,&quot;作者总结道。</p>
<p>人们也更容易因挫折而气馁,因为在我们的幻想版本中,一切都很顺利。</p>
<h3 id="相反现实地运用你的想象力"><a class="markdownIt-Anchor" href="#相反现实地运用你的想象力"></a> 相反:现实地运用你的想象力。</h3>
<p>论文作者建议尝试&quot;批判性可视化&quot;,即想象&quot;现实中的障碍、挫折和其他绝对不那么积极的因素&quot;,正如大卫·迪萨尔沃在《福布斯》杂志上总结的那样。例如,你可以想象如果没有得到理想的工作或不得不推迟旅行计划会发生什么。这有助于你不至于执着于一个特定的结果,同时保持实现目标的过程可行且更现实。</p>
<h2 id="神话8保持忙碌"><a class="markdownIt-Anchor" href="#神话8保持忙碌"></a> 神话8:保持忙碌。</h2>
<p>我们都抱怨自己很忙,但却不断地给自己安排过多的事情。这在一定程度上归因于现代工作文化。</p>
<p>它也与一种信念有关,即我们做的事情越多,成就就越大。看看劳伦·麦古德温在《Self》杂志上的这段话吧,她是一名全职招聘人员,同时在洛杉矶攻读传播学硕士学位:</p>
<p>那些偶尔允许自己思考这个问题的时候,她承认自己从排满日程、列一长串待办事项并全部完成中获得快感。这个长长的清单可能是焦虑的源头,有时她会把自己逼到筋疲力尽的地步。但一想到另一种可能——待办清单上几乎没有任何内容?这感觉不对劲。</p>
<p>虽然哥伦比亚大学的一项研究提供了一些证据,表明忙碌的人之所以高效,是因为他们&quot;认为自己在有效利用时间&quot;,但忙碌往往意味着对优先事项的困惑。</p>
<p>根据《欧洲心理学学生杂志》,忙碌和高效之间有几个关键区别:</p>
<ul>
<li>目标&quot;没有明确界定&quot;与&quot;明确界定&quot;</li>
<li>“有多个优先事项,从事多任务处理&quot;与&quot;有明确的优先事项,专注于单一任务”</li>
<li>&quot;对大多数事情说’好’(冲动的’好’)“与&quot;对许多事情说’不’(经过深思熟虑的’好’)”<br />
-“立即回应任何给定的任务&quot;与&quot;安排任务”</li>
</ul>
<h3 id="相反尝试这些避免忙碌陷阱的技巧"><a class="markdownIt-Anchor" href="#相反尝试这些避免忙碌陷阱的技巧"></a> 相反:尝试这些避免忙碌陷阱的技巧。</h3>
<p>有几种方法可以避免&quot;忙碌陷阱&quot;:</p>
<ul>
<li>企业家丹·沙利文建议,每天只专注于做三件重要的事情。</li>
<li>哈佛商学院管理实践教授托马斯·J·德隆建议,每天有一个小时的电子设备断网期。</li>
<li>商业心理学家托尼·克拉布说,认识到你的&quot;行动偏见&quot;——这在企业家中很常见——并意识到你不总是需要做点什么。</li>
<li>对不能推进你目标的事情说不。</li>
<li>养成一个晨间惯例,花时间思考你将如何安排这一天来实现你的一些价值观。</li>
</ul>
<h2 id="神话9不妥协的生活方式会让你保持高效"><a class="markdownIt-Anchor" href="#神话9不妥协的生活方式会让你保持高效"></a> 神话9:不妥协的生活方式会让你保持高效。</h2>
<p>我们眼中高效的人是那些早上起床、喝蛋白质奶昔、在我们还没起床时就完成了待办事项的人。可能真的有人就是这么高效。但我们中的许多人之所以难以保持不妥协的作息,是有原因的。</p>
<p>&quot;在我作为心理学家的工作中,我经常遇到一些militial高效心态带来的非常低效的副作用,其中最常见的就是苛责的自我对话,&quot;威格纳尔在他的博客上说。</p>
<p>&quot;虽然一个严厉的内心批评者在短期内可以带来表面的激励作用,但从长远来看,它往往会因为导致焦虑和抑郁而对生产力产生严重影响,&quot;威格纳尔补充道。</p>
<p>导致抑郁和焦虑的自我批评往往会让我们感到渺小。生产力来自于感觉轻松、开放,而不是封闭。</p>
<h3 id="相反尝试积极的自我对话"><a class="markdownIt-Anchor" href="#相反尝试积极的自我对话"></a> 相反:尝试积极的自我对话</h3>
<p>威格纳尔建议,当你试图激励自己做某事时,改变与自己对话的方式。当你没有达到自己的期望时,不要对自己太苛刻(“在理财方面我太没有纪律了”),要多支持自己,理解自己面临的挑战(“即使理财是我最不喜欢做的事情之一,我总是设法记录开支,而且在生活的其他领域我更有纪律”)。</p>
<p>关于生产力的神话的问题在于,如果你无法达到那些标准,它们会让你觉得自己是个失败者。它们提倡为了提高生产力而提高生产力,而不是为了完成你真正在乎的事情。</p>
<p>这就是为什么本文中大部分&quot;相反&quot;建议的要点都集中在设计方法,在管理期望的同时更好地享受工作和挑战自我——这样当你达不到目标时,你就不会觉得自己是个失败者,你会继续前进。</p>
<p>你尝试过哪些生产力神话——你发现什么更有效?在评论区分享你的经验。</p>
]]></content>
      <tags>
        <tag>指南</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown模板</title>
    <url>/ComputerScience/%E6%8C%87%E5%8D%97/Markdown%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h1 id="一号标题"><a class="markdownIt-Anchor" href="#一号标题"></a> 一号标题</h1>
<h2 id="title-2"><a class="markdownIt-Anchor" href="#title-2"></a> Title 2</h2>
<h3 id="三号标题"><a class="markdownIt-Anchor" href="#三号标题"></a> 三号标题</h3>
<h4 id="title-4"><a class="markdownIt-Anchor" href="#title-4"></a> Title 4</h4>
<h5 id="五号标题"><a class="markdownIt-Anchor" href="#五号标题"></a> 五号标题</h5>
<h6 id="title-6"><a class="markdownIt-Anchor" href="#title-6"></a> Title 6</h6>
<hr />
<table>
<thead>
<tr>
<th style="text-align:left">标题</th>
<th style="text-align:center">标题</th>
<th style="text-align:right">标题</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">左对齐</td>
<td style="text-align:center">两端对齐</td>
<td style="text-align:right">右对齐</td>
</tr>
</tbody>
</table>
<ul>
<li>Unordered List
<ul>
<li>Unordered List</li>
</ul>
</li>
</ul>
<ol>
<li>Ordered List<br />
2. Ordered List</li>
</ol>
<ul>
<li>[x] TO-DO List</li>
<li>[] TO-DO List</li>
</ul>
<p><s>Delete Line</s><br />
<strong>Blod</strong><br />
<em>Italic</em><br />
<code>Code</code><br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>=</mo><mi>M</mi><msup><mi>C</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">E = MC^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><br />
<a href="#">Link</a></p>
<p><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>Hello, World!</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="comment">--- auto_detect: ture</span></span><br><span class="line"><span class="comment">+++ auto_detect: false</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>No Silver Bullet</p>
<blockquote>
<p>By Brooks</p>
</blockquote>
</blockquote>
<blockquote>
<p>[!NOTE]<br />
Note that it is a note.</p>
</blockquote>
<blockquote>
<p>[!WARNING]<br />
WARNING!</p>
</blockquote>
<blockquote>
<p>[!DANGER]<br />
Notice the DANGER!</p>
</blockquote>
<blockquote>
<p>[!SUCCESS]<br />
Now it is SUCCESS.</p>
</blockquote>
<blockquote>
<p>[!INFO]<br />
Here is some INFO.</p>
</blockquote>
<div class="note primary"><p>primary 提示块标签</p>
</div>
<hr class="footnotes-sep" />
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>Hello World! <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <tags>
        <tag>指南</tag>
      </tags>
  </entry>
  <entry>
    <title>Read Origin</title>
    <url>/ComputerScience/%E6%8C%87%E5%8D%97/Read%20Origin/</url>
    <content><![CDATA[<h1 id="技术博主"><a class="markdownIt-Anchor" href="#技术博主"></a> 技术博主</h1>
<ul>
<li>多看开发者大会！</li>
</ul>
<ol>
<li>ThePrimeTime</li>
<li>CodeAesthetic</li>
<li>Molly Rocket</li>
</ol>
<h1 id="a-idarticle1whats-so-special-about-2147483648a"><a class="markdownIt-Anchor" href="#a-idarticle1whats-so-special-about-2147483648a"></a> <a id="article1">What’s so special about 2147483648?</a></h1>
<pre><code>by Sandra Henry-Stocker, Unix Dweeb, from NetWorkWorld 945870
tags: Data Center, Linux, Open Source
难度：EASY
</code></pre>
<p>First of all, it’s a power of 2. That’s undoubtedly not the most obvious thing unless you’re some kind of mathematical genius. And, to be exact, it’s 2^31. That’s significant — as you’ll see in a minute.</p>
<p>In binary, 2147483647 is 01111111111111111111111111111111 and it’s the biggest positive number that will fit in 32 bits when using the “two’s complement” notation (补码) — the way of representing numbers that allows for negative values. If we could use that leftmost (high order) bit, the largest possible number would be twice as large since every extra bit doubles the range of numbers that a binary number can represent.</p>
<p>And 2147483648 just happens to be the number you’d get if you multiplied 256 * 256 * 256 * 256 and then divided the result by 2.  Not excited yet? Give me a moment.</p>
<span id="more"></span>
<p>The 32nd bit that remains in our 4 byte or 32 bit number is used to represent whether the number is positive or negative. If it’s a 0, as in 0111 1111 1111 1111 1111 1111 1111 1111, the number is +2147483647 If it’s a 1, as in 1111 1111 1111 1111 1111 1111 1111 1111, the number is <s>-2147483648</s> (错误，应该是-2147483647！).</p>
<blockquote>
<p>负数的补码 = 正数各位取反 + 1<br />
2147483647(011…111B) + 1 = 2147483648(100…000B), 则<br />
-2147483648 = 011…111B + 1 = 100.000B</p>
</blockquote>
<p>So, Unix systems have a way to express a wide range of numeric values and a way to represent negative numbers. This doesn’t mean that you can’t work with numbers that are much larger. On today’s Linux systems, 2147483648 is NOT even close to the largest numbers that you can manipulate. Just take a look at this little excerpt from my playing around on the command line on my AWS system:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ echo $n</span><br><span class="line">25227339711002779721296336059113506713437716431793799076536161744218926098</span><br><span class="line">42688929348009219253857839258425602022609412708599928289785519021711589989</span><br><span class="line">59576178192</span><br><span class="line">$ n=`expr $n * 9999`</span><br><span class="line">$ echo $n</span><br><span class="line">25224816977031679443324206425507595362766372660150619696628508128044504205</span><br><span class="line">81704660455074418331932453474499759462407151767329068296956540469809418830</span><br><span class="line">596802205741808</span><br></pre></td></tr></table></figure>
<p>Obviously, the numbers that you can work with on the command line can take on a much larger range of values. Even so, 2147483647 has a certain claim to fame. This number represents the latest (i.e., furthest into the future) date that can be represented on Unix systems — at least for now. Sometime before 2038, the developers of various “flavors” of Unix will have to figure out what to do next. Why is this important and why 2038?</p>
<p>To understand why this is so important, you have to consider how Unix stores dates.   To see the current date and time expressed in binary, use the date command like this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">date +%s</span><br><span class="line">1449012345</span><br></pre></td></tr></table></figure>
<p>You’ve probably heard references to the Unix “epoch”. Meant to imply, more or less, the birth of Unix, the epoch refers to Jan 1, 1970. If you had created a file at the start of that day, the date associated with it would be stored in the system as 0. If we use the date command’s -d option, we can get it to translate the date “0” to a date/time string like this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ date -d @0</span><br><span class="line">Thu Jan  1 00:00:00 UTC 1970</span><br></pre></td></tr></table></figure>
<p>And if we, instead, use the maximum value for dates, we would get this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ date -d @2147483647</span><br><span class="line">Tue Jan 19 03:14:07 UTC 2038</span><br></pre></td></tr></table></figure>
<p>Conversely, the minimum date jumps back from the epoch (Jan 1, 1970) the same number of seconds as the maximum date jumps forward:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ date -d@-2147483648</span><br><span class="line">Fri Dec 13 20:45:52 UTC 1901</span><br></pre></td></tr></table></figure>
<p>This means that the largest date that can be stored on a Unix system is Jan 19, 2038 and, much like the Y2K that worried people sixteen years ago, the 2038 problem threatens to disrupt systems and devices when the date rolls over from 01111111111111111111111111111111 to 10000000000000000000000000000000 and are likely interpreted as December 13, 1901. By that time, the powers that be might add another byte or two to date/time representations or might stop using the two’s complement format, giving us another 68 years or so to worry about the problem. And hopefully we won’t have too many systems driving the planet or rotating around it that can’t be adjusted to the new dates.</p>
<p>The Y2K issue was really only a problem because numerous applications stored years as 2 digit fields so, once the year 2000 began, it would look to them like 1900. And yet, in spite of all the sturm and drang, we moved into the 21st century with a lot fewer problems that many of us were anticipating.</p>
<p>The 2038 problem will take a lot more time and attention because it involves the internal representation of dates with second by second precision. And those dates and times are critical to a lot of processes and a lot of equipment. But it’s only 1449012345. We still have time.</p>
]]></content>
      <tags>
        <tag>指南</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61B sp18</title>
    <url>/ComputerScience/%E8%AF%BE%E7%A8%8B/CS61B%20sp18/</url>
    <content><![CDATA[<h1 id="gradescope-autograder"><a class="markdownIt-Anchor" href="#gradescope-autograder"></a> Gradescope Autograder</h1>
<h2 id="spring-2018"><a class="markdownIt-Anchor" href="#spring-2018"></a> <a href="https://sp18.datastructur.es/">Spring 2018</a></h2>
<p>44个Assn，偏向数据结构<br />
邀请码：<code>MNXYKX</code><br />
学校：<code>UC Berkeley</code><br />
直接输入，不要选择<code>2U-UC Berkeley</code>，否则将提示<code>COURSE ENTRY CODE IS INVALID</code></p>
<h2 id="spring-2021"><a class="markdownIt-Anchor" href="#spring-2021"></a> <a href="https://sp21.datastructur.es/">Spring 2021</a></h2>
<p>19个Assn，偏向软件工程<br />
邀请码：<code>MB7ZPY</code></p>
<h1 id="文章收录"><a class="markdownIt-Anchor" href="#文章收录"></a> 文章收录</h1>
<p><a href="https://mathwithbaddrawings.com/2015/04/08/the-math-ceiling-wheres-your-cognitive-breaking-point/">The Law of the Broken Futon</a> 浮沙筑高台法则</p>
<blockquote>
<p>“Since I’m fine now, can’t I add that missing piece later, when it’s actually needed?” Sometimes, yes. But it’s much harder.<br />
Adding the missing piece later means waiting until the damage is already underway, and hellishly difficult to undo.</p>
</blockquote>
<p><a href="https://henrikwarne.com/2014/09/04/a-response-to-why-most-unit-testing-is-waste/">A Response to “Why Most Unit Testing is Waste”</a></p>
<blockquote>
<p>(Unit Tests) They are based on <em>programmers’ fantasies about how the function should work</em>. But programmers break down requirements into smaller components all the time – this is how you program. Sometimes there are misunderstandings, but that is the exception, not the rule, in my opinion.</p>
</blockquote>
<h1 id="21-mystery-of-java-restore"><a class="markdownIt-Anchor" href="#21-mystery-of-java-restore"></a> 2.1 Mystery of Java Restore</h1>
<blockquote>
<p>When instantiate an Object, <code>obj = new Object()</code>, <code>obj</code> <strong>stores the address</strong> of the Object, not the specific data struction.</p>
</blockquote>
<p>(That is why all type of variables create memory boxes of 64 bits. It is just the memory of the address.)</p>
<p>Therefore, When we use <code>obj2 = obj</code>, Java simply copy the addr of <code>obj</code> and assign it to <code>obj2</code> (They are pointing to the same Object), that is why when we change <code>obj2.weight</code> it effects <code>obj.weight</code> too.</p>
<span id="more"></span>
<h1 id="22-sllist"><a class="markdownIt-Anchor" href="#22-sllist"></a> 2.2 SLList</h1>
<h2 id="static"><a class="markdownIt-Anchor" href="#static"></a> Static</h2>
<blockquote>
<p>if you don’t use any instance members of the outer class, make the nested class static.</p>
</blockquote>
<h2 id="overloaded"><a class="markdownIt-Anchor" href="#overloaded"></a> Overloaded</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Share the same name but have different parameters.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">(IntNode p)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (p.next == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + size(p.next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> size(first);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="sentinel-node"><a class="markdownIt-Anchor" href="#sentinel-node"></a> Sentinel Node</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">SLList</span><span class="params">()</span> &#123;</span><br><span class="line">    first = <span class="literal">null</span>;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">        addFirst(x);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// This solution works, but special case code like that shown above should be avoided when necessary.</span></span><br><span class="line">    <span class="type">IntNode</span> <span class="variable">p</span> <span class="operator">=</span> first;</span><br><span class="line">    <span class="keyword">while</span> (p.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    p.next = <span class="keyword">new</span> <span class="title class_">IntNode</span>(x, <span class="literal">null</span>);</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>We can do this by creating a special node that is always there, which we will call a <strong>sentinel node</strong>. The sentinel node will hold a value, which we won’t care about.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="type">IntNode</span> <span class="variable">p</span> <span class="operator">=</span> sentinel;</span><br><span class="line">    <span class="keyword">while</span> (p.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    p.next = <span class="keyword">new</span> <span class="title class_">IntNode</span>(x, <span class="literal">null</span>);</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="30-testing"><a class="markdownIt-Anchor" href="#30-testing"></a> 3.0 Testing</h1>
<h2 id="the-operator"><a class="markdownIt-Anchor" href="#the-operator"></a> The <code>==</code> operator</h2>
<blockquote>
<p><code>==</code> operator simply compares the literal bits in the memory boxes. (e.g., for objects it only compares their address.)</p>
</blockquote>
<h2 id="private-recursive-helper"><a class="markdownIt-Anchor" href="#private-recursive-helper"></a> Private Recursive Helper</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Sorts strings destructively starting from item start. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(String[] x, <span class="type">int</span> start)</span> &#123; </span><br><span class="line">   <span class="type">int</span> <span class="variable">smallestIndex</span> <span class="operator">=</span> findSmallest(x);</span><br><span class="line">   swap(x, start, smallestIndex);</span><br><span class="line">   sort(x, start + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Sorts strings destructively. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(String[] x)</span> &#123; </span><br><span class="line">   sort(x, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>This approach is quite common when trying to use recursion on a data structure that is not inherently recursive, e.g. arrays.</p>
</blockquote>
<h2 id="junit"><a class="markdownIt-Anchor" href="#junit"></a> JUnit</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// your test code</span></span><br><span class="line">    assertEquals(actual, expected);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="autograder-vs-junit"><a class="markdownIt-Anchor" href="#autograder-vs-junit"></a> Autograder vs JUnit</h2>
<p>Rely on an Autograder, there is plenty of time that you’re not in control of neither your workflow or your code.</p>
<h2 id="test-driven-development-tdd"><a class="markdownIt-Anchor" href="#test-driven-development-tdd"></a> Test-Driven Development (TDD)</h2>
<p>TDD is a development process in which we write tests for code before writing the code itself. The steps are as follows:</p>
<ol>
<li>Identify a new feature.</li>
<li>Write a unit test for that feature.</li>
<li>Run the test. It should fail.</li>
<li>Write code that passes the test. Yay!</li>
<li>Optional: refactor code to make it faster, cleaner, etc. Except now we have a reference to tests that should pass.</li>
</ol>
<blockquote>
<p>You should <strong>definitely write tests but only when they might be useful!</strong></p>
</blockquote>
<h1 id="41-overload"><a class="markdownIt-Anchor" href="#41-overload"></a> 4.1 Overload</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">longest</span><span class="params">(SLList&lt;String&gt; list)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">longest</span><span class="params">(AList&lt;String&gt; list)</span>;</span><br></pre></td></tr></table></figure>
<p>Java will choose the right method according to the parameter you pass in.</p>
<blockquote>
<p>However, it is ugly, repetitive and hard to maintain.</p>
</blockquote>
<h2 id="override"><a class="markdownIt-Anchor" href="#override"></a> @Override</h2>
<blockquote>
<p>Override is something like a proofreader. It will remind you when you make a typo and named method in error.</p>
</blockquote>
<h1 id="42-interface"><a class="markdownIt-Anchor" href="#42-interface"></a> 4.2 Interface</h1>
<p>Summary:</p>
<ul>
<li>All methods must be public.</li>
<li>All variables must be public static final.</li>
<li>Cannot be instantiated</li>
<li>All methods are by default abstract unless specified to be <code>default</code></li>
<li>Can implement more than one interface per class</li>
</ul>
<h2 id="default"><a class="markdownIt-Anchor" href="#default"></a> Default</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Use `default` to define a method in `interface`</span></span><br><span class="line"><span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// your code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="extends"><a class="markdownIt-Anchor" href="#extends"></a> Extends</h2>
<blockquote>
<p>The <code>extends</code> keyword defines “is-a”.</p>
</blockquote>
<blockquote>
<p>By using the <code>extends</code> keyword, subclasses inherit all <strong>members</strong> of the parent class. “Members” includes:</p>
</blockquote>
<ol>
<li>All instance and static variables</li>
<li>All methods</li>
<li>All nested classes</li>
</ol>
<blockquote>
<p>Note that constructors are not inherited, and private members cannot be directly accessed by subclasses.</p>
</blockquote>
<h3 id="subclass-constructor"><a class="markdownIt-Anchor" href="#subclass-constructor"></a> Subclass Constructor</h3>
<p>A subclass is firstly its parentclass. Using the <code>super</code> keyword.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">VengefulSLList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    deletedItems = <span class="keyword">new</span> <span class="title class_">SLList</span>&lt;Item&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Or, if we choose not to, Java will automatically make a call to the superclass’s <em>no-argument</em> constructor for us.</p>
<h2 id="compile-time-error"><a class="markdownIt-Anchor" href="#compile-time-error"></a> Compile-time Error</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">VengefulSLList&lt;Integer&gt; vsl = <span class="keyword">new</span> <span class="title class_">VengefulSLList</span>&lt;Integer&gt;(<span class="number">9</span>);</span><br><span class="line">SLList&lt;Integer&gt; sl = vsl;</span><br><span class="line"></span><br><span class="line">sl.addLast(<span class="number">50</span>);</span><br><span class="line">sl.removeLast();</span><br><span class="line"></span><br><span class="line">sl.printLostItems(); <span class="comment">// 会出错</span></span><br><span class="line">VengefulSLList&lt;Integer&gt; vsl2 = sl; <span class="comment">// 会出错</span></span><br></pre></td></tr></table></figure>
<p>尽管运行时sl是动态的<code>VengefulSLList</code>类型，Java编译器将对象看作静态类型；<code>SLList</code>没有<code>printLostItems</code>方法，因此会报错；最后一句也是一样。</p>
<h1 id="43-polymorphism"><a class="markdownIt-Anchor" href="#43-polymorphism"></a> 4.3 Polymorphism</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OurComparable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> OurComparable <span class="title function_">max</span><span class="params">(OurComparable[] items)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxDex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; items.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> items[i].compareTo(items[maxDex]);</span><br><span class="line">            <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                maxDex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> items[maxDex];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">uddaDog</span> <span class="operator">=</span> (Dog) o;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.size - uddaDog.size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用多态，就可以写出一个统一的max()方法，而不需要考虑各个类的数据结构</p>
<h1 id="final"><a class="markdownIt-Anchor" href="#final"></a> Final</h1>
<blockquote>
<p>The <code>final</code> keyword prevents the variable from being changed after its first assignment.</p>
</blockquote>
<p>Notice: it doesn’t work for reference!</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> ArrayDeque&lt;String&gt;() deque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;String&gt;();</span><br></pre></td></tr></table></figure>
<p>deque不可改变，然而deque指向的ArrayDeque可变</p>
<h1 id="specific-generic-types"><a class="markdownIt-Anchor" href="#specific-generic-types"></a> Specific Generic Types</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;K <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;K&gt;, V&gt; K <span class="title function_">maxKey</span><span class="params">(Map61B&lt;K, V&gt; map)</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>The <code>K extends Comparable&lt;K&gt;</code> means keys must implement the comparable interface and can be compared to other K’s.</p>
</blockquote>
<h1 id="arrayset"><a class="markdownIt-Anchor" href="#arrayset"></a> ArraySet</h1>
<blockquote>
<p>注意Set的add()方法需要检查是否已包含元素。</p>
</blockquote>
<h1 id="iterator"><a class="markdownIt-Anchor" href="#iterator"></a> Iterator</h1>
<p>For code on the right to work:</p>
<ol>
<li>Compiler checks that Lists have a method called iterator() that returns an  Iterator&lt;Integer&gt;.</li>
<li>Then, compiler checks that Iterators have:
<ul>
<li>hasNext()</li>
<li>next()</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArraySet</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;T&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArraySetIterator</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ArraySetIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> wizPos;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ArraySetIterator</span><span class="params">()</span> &#123;</span><br><span class="line">            wizPos = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> wizPos &lt; size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> T <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">T</span> <span class="variable">returnItem</span> <span class="operator">=</span> items[wizPos];</span><br><span class="line">            wizPos += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> returnItem;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="the-philosophy-of-exceptions"><a class="markdownIt-Anchor" href="#the-philosophy-of-exceptions"></a> The Philosophy of Exceptions</h1>
<blockquote>
<p>Exceptions keep error handling separate from the rest of the program.</p>
</blockquote>
<p>Program without exceptions:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (theFileIsOpen) &#123;</span><br><span class="line">    determine its size;</span><br><span class="line">    <span class="keyword">if</span> (gotTheFileLength) &#123;</span><br><span class="line">        allocate that much memory;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> error(<span class="string">&quot;fileLengthError&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>Program with exceptions:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    open the file;</span><br><span class="line">    determine its size;</span><br><span class="line">    allocate that much memory;</span><br><span class="line">    read the file into memory;</span><br><span class="line">    close the file;</span><br><span class="line">&#125; <span class="keyword">catch</span> (fileOpenFailed) &#123;</span><br><span class="line">    doSomething;</span><br></pre></td></tr></table></figure>
<h1 id="exceptions-catch-and-specify"><a class="markdownIt-Anchor" href="#exceptions-catch-and-specify"></a> Exceptions: Catch and Specify</h1>
<blockquote>
<p><strong>Catch</strong> the error when you can handle the problem there. Keep it from escaping!</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        gulgate();</span><br><span class="line">    &#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Averted!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>Specify</strong> the error when someone else should handle the error. Make sure the caller knows the method is dangerous!</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    gulgate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="abstract"><a class="markdownIt-Anchor" href="#abstract"></a> Abstract</h1>
<blockquote>
<p>If an implementing class fails to implement any abstract methods inherited from an interface, then that class must be declared abstract.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractBoundedQueue</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* the method must be defined with the abstract keyword </span></span><br><span class="line"><span class="comment">     * and without an implementation (without braces, and </span></span><br><span class="line"><span class="comment">     * followed by a semicolon) </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">moveTo</span><span class="params">(<span class="type">double</span> deltaX, <span class="type">double</span> deltaY)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="package"><a class="markdownIt-Anchor" href="#package"></a> Package</h1>
<blockquote>
<p>It is very possible that with all the code in this world, you would create classes that share names with those from a different project.</p>
</blockquote>
<blockquote>
<p>the <strong>package</strong> — a namespace that organizes classes and interfaces.<br />
naming convention: package name starts with the website address, backwards.</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.joshh.animal // joshh.com</span><br></pre></td></tr></table></figure>
<h1 id="jar"><a class="markdownIt-Anchor" href="#jar"></a> JAR</h1>
<blockquote>
<p>JAR files are just like zip files.<br />
JAR files do not keep your code safe, and thus you should not share your .jar files of your projects with other students.</p>
</blockquote>
<h1 id="access-control"><a class="markdownIt-Anchor" href="#access-control"></a> Access Control</h1>
<ul>
<li><code>private</code>: Only the given class can access. Subclass cannot.</li>
<li><code>package private</code>: Only the class from the same package can access.</li>
<li><code>protected</code>: the same package or subclass can access.</li>
</ul>
<h1 id="encapsulation"><a class="markdownIt-Anchor" href="#encapsulation"></a> Encapsulation</h1>
<blockquote>
<p>A module is said to be encapsulated if its implementation is completely hidden, and it can be accessed only through a documented interface.</p>
</blockquote>
<h1 id="delegation"><a class="markdownIt-Anchor" href="#delegation"></a> Delegation</h1>
<blockquote>
<p>Extension tends to be used when you know what is going on in the parent class.</p>
</blockquote>
<blockquote>
<p>Delegation is when you do not want to consider your current class to be a version of the class that you are pulling the method from.</p>
</blockquote>
<h1 id="assn"><a class="markdownIt-Anchor" href="#assn"></a> Assn</h1>
<h2 id="proj0"><a class="markdownIt-Anchor" href="#proj0"></a> Proj0</h2>
<blockquote>
<p>[!NOTE]<br />
注意严格按照讲义要求编程，不要有讲义以外的函数或方法，否则Gradescope OJ会扣掉API的10分！</p>
</blockquote>
<p>计算<code>ForceExertedByX/Y</code>，不要使用<code>Math.abs()</code>或者<code>a &lt; 0 ? -a : a</code>来通过本地测试，否则OJ会报错。力的方向（正负）需要根据行星的相对位置来定。</p>
<h2 id="proj1"><a class="markdownIt-Anchor" href="#proj1"></a> Proj1</h2>
<ul>
<li>注意构造空的Deque时，确保哨兵正确指向自己。</li>
<li>add()需要更改4个指针的方向。修改指针指向时，注意备份原指针指向位置。</li>
<li>对于循环Deque，注意print()的迭代条件。</li>
<li>remove()方法需要检查isEmpty()，否则不应该执行。</li>
<li>get()方法，index从0开始，LinkedList和ArrayList的对应关系是一样的。</li>
</ul>
<h3 id="array-deque"><a class="markdownIt-Anchor" href="#array-deque"></a> Array Deque</h3>
<ul>
<li>先设计，再编码。好好想想要设计怎样的ArrayDeque。分离传入index和实际index。</li>
<li>取模！！！一定要注意<code>-1 % size = -1</code>是取余数，<code>Math.floorMod(-1, size) = size-1</code>才是取模！（当Gradescope出现index=-1一般就是取模问题）</li>
<li><code>addFirst()</code>后调用<code>removeLast()</code>时，size变回0，但是没有调整下标的话head和end不会连在一起（错误状态）</li>
<li>考虑<code>resize()</code>的实现方法。浮点数运算比整数运算慢很多！</li>
</ul>
<h2 id="proj2"><a class="markdownIt-Anchor" href="#proj2"></a> Proj2</h2>
<p>思路：在房间旁边画房间，并在房间重合边缘处打洞，实现迷宫。</p>
<ol>
<li>首先设计<code>Room.java</code>，内置画一个房间，在房间旁边生成房间的方法。<br />
稀里糊涂地生成了不错的迷宫出来。但是不好打洞！</li>
</ol>
<h1 id="hw2"><a class="markdownIt-Anchor" href="#hw2"></a> HW2</h1>
<p>蒙特卡罗渗透实验。原理是使用集合连接打通的节点，检查是否从top到bottom都连通了，连通了即渗透成功。<br />
因此使用集合UF时，可以生成N*N+2个节点，作为top节点和bottom节点。但是这样做会导致倒灌(backwash)，可以创建两个UF，一个有bottom，另一个没有。一个用于检查是否渗透，另一个用于检查isFull。</p>
]]></content>
      <tags>
        <tag>课程</tag>
      </tags>
  </entry>
  <entry>
    <title>DD 数字逻辑</title>
    <url>/ComputerScience/%E8%AF%BE%E7%A8%8B/DD%20%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91/</url>
    <content><![CDATA[<h3 id="30-数据选择器分配器"><a class="markdownIt-Anchor" href="#30-数据选择器分配器"></a> 3.0 数据选择器&amp;分配器</h3>
<h4 id="1-数据分配器"><a class="markdownIt-Anchor" href="#1-数据分配器"></a> 1 数据分配器</h4>
<ul>
<li>根据输入（地址信号）将一路数据分配到指定输出通道</li>
<li>一路输入，多路输出<br />
![[…/Source/Photo/数字逻辑/数据分配器.png]]</li>
</ul>
<h4 id="2-数据选择器"><a class="markdownIt-Anchor" href="#2-数据选择器"></a> 2 数据选择器</h4>
<ul>
<li>从多路输入选择一条输出</li>
<li>又称为多路选择器，多路开关</li>
<li>多路输入，一路输出<br />
![[…/Source/Photo/数字逻辑/数据选择——定义.png]]</li>
</ul>
<h4 id="3-ls151制图步骤"><a class="markdownIt-Anchor" href="#3-ls151制图步骤"></a> 3 LS151制图步骤</h4>
<ul>
<li>情况1：三个输入端正好对应三个变量</li>
<li>根据Y = A2、A1、A0列出最小项，按顺序写出Y=1时有D几</li>
<li>存在的项D取1<br />
![[…/Source/Photo/数字逻辑/151制图步骤.png]]</li>
<li>情况2：三个输入端对应四个变量</li>
<li>列出最小项，尽可能合并成只有三项的形式</li>
<li>将第四项作为变量接入<br />
![[…/Source/Photo/数字逻辑/151制图-3输入4变量情况1.png]]<br />
![[…/Source/Photo/数字逻辑/151制图-3输入4变量情况2.png]]</li>
</ul>
<span id="more"></span>
<h3 id="40-触发器"><a class="markdownIt-Anchor" href="#40-触发器"></a> 4.0 触发器</h3>
<pre><code>触发器是有计数功能的双稳态电路，是组成时序逻辑电路的基本单元。可以实现如寄存器、加法器、计数器的功能。
</code></pre>
<ol>
<li>RS触发器<br />
![[…/Source/Photo/数字逻辑/RS触发器.png]]
<ul>
<li>特性方程：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>Q</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mi>S</mi><mo>+</mo><mover accent="true"><mi>R</mi><mo stretchy="true">‾</mo></mover><msub><mi>Q</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">Q_{n+1} = S + \overline RQ_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0777700000000001em;vertical-align:-0.19444em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> （与S状态一致）</li>
<li>约束条件：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>R</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">SR = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> （SR不能同时为1）</li>
</ul>
</li>
<li>JK触发器<br />
![[…/Source/Photo/数字逻辑/JK触发器.png]]
<ul>
<li>特性方程：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>Q</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>=</mo><mi>J</mi><mover accent="true"><msup><mi>Q</mi><mi>n</mi></msup><mo stretchy="true">‾</mo></mover><mo>+</mo><mover accent="true"><mi>K</mi><mo stretchy="true">‾</mo></mover><msup><mi>Q</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">Q^{n+1} = J\overline {Q^n} + \overline K{Q^n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.09618em;">J</span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0777700000000001em;vertical-align:-0.19444em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span> （与J状态相同，双1时<strong>翻转</strong>）</li>
<li>约束条件：<strong>无</strong></li>
</ul>
</li>
<li>D触发器（D与!D接RS触发器构成）
<ul>
<li>特性方程：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>Q</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>=</mo><mi>D</mi></mrow><annotation encoding="application/x-tex">Q^{n+1} = D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span> （与D状态相同）</li>
<li>约束条件：<strong>无</strong></li>
</ul>
</li>
<li>T和T`触发器（T<strong>同时</strong>接JK触发器构成）
<ul>
<li>特性方程（T触发器）：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>Q</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>=</mo><mi>T</mi><mo>⊕</mo><msup><mi>Q</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">Q^{n+1} = T \oplus Q^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span> （T为1时发生翻转，T为0保持）</li>
<li>T`触发器：T恒为1的触发器，只有翻转，没有保持功能</li>
</ul>
</li>
<li>触发方程：（高/低）电平触发、（上升/下降）边沿触发
<ul>
<li>电平触发会有空翻现象，边沿触发在时钟脉冲变化时采样1次</li>
</ul>
</li>
</ol>
<h3 id="50-时序逻辑电路寄存器"><a class="markdownIt-Anchor" href="#50-时序逻辑电路寄存器"></a> 5.0 时序逻辑电路&amp;寄存器</h3>
<ol>
<li>时序逻辑电路：包括组合电路和存储电路（触发器），<strong>存储电路必不可少</strong>
<ul>
<li>分析方法：1. 输出方程； 2. 驱动方程； 3. 状态方程（带入触发器特性方程）</li>
<li>如：1. <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>Y</mi><mn>0</mn></msub><mo>=</mo><msup><msub><mi>Q</mi><mn>0</mn></msub><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">Y_0 = {Q_0}^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.932062em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.737622em;"><span style="top:-3.1362300000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>; 2. <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>D</mi><mn>0</mn></msub><mo>=</mo><mover accent="true"><mrow><msup><msub><mi>Q</mi><mn>0</mn></msub><mi>n</mi></msup><msup><msub><mi>Q</mi><mn>1</mn></msub><mi>n</mi></msup></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">D_0 = \overline { {Q_0}^n {Q_1}^n }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1320620000000001em;vertical-align:-0.19444em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9376220000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.737622em;"><span style="top:-3.1362300000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.737622em;"><span style="top:-3.1362300000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span><span style="top:-3.857622em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span>; 3. <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><msub><mi>Q</mi><mn>0</mn></msub><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>=</mo><msub><mi>D</mi><mn>0</mn></msub><mo>=</mo><mover accent="true"><mrow><msup><msub><mi>Q</mi><mn>0</mn></msub><mi>n</mi></msup><msup><msub><mi>Q</mi><mn>1</mn></msub><mi>n</mi></msup></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">{Q_0}^{n+1} = D_0 = \overline { {Q_0}^n {Q_1}^n }</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.081778em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.887338em;"><span style="top:-3.1362300000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1320620000000001em;vertical-align:-0.19444em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9376220000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.737622em;"><span style="top:-3.1362300000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.737622em;"><span style="top:-3.1362300000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span><span style="top:-3.857622em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span><br />
![[…/Source/Photo/数字逻辑/同步时序分析方法.png]]<br />
![[…/Source/Photo/数字逻辑/时序驱动方程.png]]<br />
![[…/Source/Photo/数字逻辑/时序状态方程.png]]<br />
![[…/Source/Photo/数字逻辑/时序输出方程.png]]</li>
</ul>
</li>
<li>同步和异步：同步由同一CP时钟脉冲信号控制所有触发器，异步则不是</li>
<li>寄存器：由n位触发器构成，每位触发器存储1位二进制代码。
<ol>
<li>数码寄存器：<br />
![[…/Source/Photo/数字逻辑/数码寄存器.png]]</li>
<li>左移寄存器：<br />
![[…/Source/Photo/数字逻辑/左移寄存器.png]]</li>
<li>移位寄存器（位操作&gt;&gt;）：<br />
![[…/Source/Photo/数字逻辑/移位寄存器.png]]</li>
<li>双向移位寄存器（74LS194）<br />
![[…/Source/Photo/数字逻辑/双向位移寄存器.png]]<br />
![[…/Source/Photo/数字逻辑/双向位移寄存器1.png]]</li>
</ol>
</li>
</ol>
<h3 id="60-计数器"><a class="markdownIt-Anchor" href="#60-计数器"></a> 6.0 计数器</h3>
<pre><code>计数器，即实现技术功能的电路。有效状态为2^n的计数器即为2进制计数器，有效状态为n的计数器即为n进制计数器；
</code></pre>
<ol>
<li>二进制加法计数器
<ol>
<li>加法原理：每次相加，a) 最低位必翻转； b) 第i位1前全1时，翻转第i位<br />
![[…/Source/Photo/数字逻辑/加法计数原理.png]]<br />
![[…/Source/Photo/数字逻辑/加法器波形图.png]]</li>
</ol>
</li>
<li>二进制减法计数器
<ol>
<li>减法原理：a) 最低位必翻转； b) 第i为前全0时，翻转<br />
![[…/Source/Photo/数字逻辑/减法计数器.png]]</li>
</ol>
</li>
<li>同步/异步的实现<br />
同步计数器必异步计数器快（延迟不会积累），异步计数器构造简单</li>
<li><strong>利用74LS161实现16以下进制计数器</strong><br />
![[…/Source/Photo/数字逻辑/161端口功能图解.png]]<br />
![[…/Source/Photo/数字逻辑/161功能表.png]]
<ol>
<li>异步清零法
<ol>
<li>开启计数状态（LD、CT置1），输入端不接</li>
<li>若实现n进制，则当计数器加到n时激活清零端CR，实现逢n重置</li>
</ol>
</li>
<li>同步置数法
<ol>
<li>开启计数状态（CR、CT置1），输入端全部接0（或需要的初始数）</li>
<li>若实现n进制，则当计数器加到n-1时（<strong>因为是同步的，不需要多加1</strong>）激活置数端LD，实现逢n重置</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="70-绘制状态转换图"><a class="markdownIt-Anchor" href="#70-绘制状态转换图"></a> 7.0 绘制状态转换图</h3>
<ul>
<li>写出输入、现态与对应次态的真值表。</li>
<li>每个圆圈代表一个输出状态，连接圆圈箭头旁边写输入的状态（需要注明是哪个输入变量变化）</li>
<li>箭头左边就是现态，箭头右边就是次态<br />
![[…/Source/Photo/数字逻辑/利用现态和次态真值表绘制状态转换图.png]]</li>
</ul>
<h3 id="80-分析时序逻辑电路"><a class="markdownIt-Anchor" href="#80-分析时序逻辑电路"></a> 8.0 分析时序逻辑电路</h3>
<ul>
<li>输出方程：Y的方程，例如<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Y</mi><mo>=</mo><mo stretchy="false">[</mo><msub><mi>Q</mi><mn>2</mn></msub><msup><mo stretchy="false">]</mo><mi>n</mi></msup><mo stretchy="false">[</mo><msub><mi>Q</mi><mn>0</mn></msub><msup><mo stretchy="false">]</mo><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">Y=[Q_2]^n[Q_0]^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></li>
<li>驱动方程：每个触发器<strong>输入</strong>的方程，例如<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>J</mi><mn>2</mn></msub><mo>=</mo><mo stretchy="false">[</mo><msub><mi>Q</mi><mn>1</mn></msub><msup><mo stretchy="false">]</mo><mi>n</mi></msup><mo>∗</mo><mo stretchy="false">[</mo><msub><mi>Q</mi><mn>0</mn></msub><msup><mo stretchy="false">]</mo><mi>n</mi></msup><mo separator="true">,</mo><msub><mi>K</mi><mn>2</mn></msub><mo>=</mo><mo stretchy="false">[</mo><msub><mi>Q</mi><mn>0</mn></msub><msup><mo stretchy="false">]</mo><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">J_2=[Q_1]^n*[Q_0]^n, K_2=[Q_0]^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.09618em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></li>
<li>状态方程：将驱动方程代入触发器的特性方程，求得每个Q的次态方程，例如<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><msub><mi>Q</mi><mn>1</mn></msub><msup><mo stretchy="false">]</mo><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>=</mo><mover accent="true"><mrow><mo stretchy="false">[</mo><msub><mi>Q</mi><mn>2</mn></msub><msup><mo stretchy="false">]</mo><mi>n</mi></msup></mrow><mo stretchy="true">‾</mo></mover><mover accent="true"><mrow><mo stretchy="false">[</mo><msub><mi>Q</mi><mn>1</mn></msub><msup><mo stretchy="false">]</mo><mi>n</mi></msup></mrow><mo stretchy="true">‾</mo></mover><mo>∗</mo><mo stretchy="false">[</mo><msub><mi>Q</mi><mn>0</mn></msub><msup><mo stretchy="false">]</mo><mi>n</mi></msup><mo>+</mo><mo stretchy="false">[</mo><msub><mi>Q</mi><mn>1</mn></msub><msup><mo stretchy="false">]</mo><mi>n</mi></msup><mo>∗</mo><mover accent="true"><mrow><mo stretchy="false">[</mo><msub><mi>Q</mi><mn>0</mn></msub><msup><mo stretchy="false">]</mo><mi>n</mi></msup></mrow><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">[Q_1]^{n+1}=\overline {[Q_2]^n} \overline {[Q_1]^n} * [Q_0]^n+[Q_1]^n * \overline {[Q_0]^n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2000000000000002em;vertical-align:-0.25em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9500000000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span><span style="top:-3.87em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25em;"><span></span></span></span></span></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9500000000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span><span style="top:-3.87em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.2000000000000002em;vertical-align:-0.25em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9500000000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.590392em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span><span style="top:-3.87em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25em;"><span></span></span></span></span></span></span></span></span><br />
![[…/Source/Photo/数字逻辑/6进制计数器.png]]</li>
<li>设电路初始状态为全0，然后根据每个现态写出次态，以及输出结果（这里Y每到第6状态会输出1）<br />
![[…/Source/Photo/数字逻辑/6进制计数器状态转换图.png]]</li>
</ul>
]]></content>
      <tags>
        <tag>课程</tag>
      </tags>
  </entry>
  <entry>
    <title>OS 操作系统</title>
    <url>/ComputerScience/%E8%AF%BE%E7%A8%8B/OS%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="chapter3-操作系统结构"><a class="markdownIt-Anchor" href="#chapter3-操作系统结构"></a> Chapter3 操作系统结构</h1>
<h2 id="复杂度管理方法-malh"><a class="markdownIt-Anchor" href="#复杂度管理方法-malh"></a> 复杂度管理方法 M.A.L.H</h2>
<p>Modularity: 模块化，分而治之<br />
Abstraction: 抽象，接口与实现分离，遵循宽进严出原则。例如虚拟内存、文件系统</p>
<blockquote>
<p>对于大型系统，只有模块化和抽象，可能导致划分模块太多，交互关系复杂，因此还需要引入分层和层次结构控制复杂度。</p>
</blockquote>
<p>Layering: 分层，每个层级是一套完整机制。通常一个模块只能与本层和上下层交互，不能跨层。例如OSI、TCP/IP<br />
Hierarchy: 层次结构，大的子系统由多个小的子系统组织成。即同级模块的分层</p>
<blockquote>
<p>宽进严出原则：容忍各种输入（包括恶意输入），严格控制模块的对外输出</p>
</blockquote>
<h2 id="微内核"><a class="markdownIt-Anchor" href="#微内核"></a> 微内核</h2>
<p>宏内核架构：单点bug使整个系统崩溃。<br />
微内核：解耦单个功能/模块（如文件系统、设备驱动）作为独立服务隔离运行，使内核成为一个最小功能集。</p>
<blockquote>
<p>微内核架构服务隔离，单点出问题系统不会崩溃</p>
</blockquote>
<blockquote>
<p>内核态部分，称为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>μ</mi><mi>k</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>e</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">\mu kernel</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">μ</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span></p>
</blockquote>
<p>微内核优势：</p>
<ol>
<li>弹性硬件拓展能力</li>
<li>硬件异构实现</li>
<li>功能安全</li>
<li>信息安全</li>
<li>时延确定</li>
</ol>
<blockquote>
<p>现代操作系统特征：1）虚拟内存；2）用户态、内核态隔离。</p>
</blockquote>
<span id="more"></span>
<h3 id="抽象的缺点"><a class="markdownIt-Anchor" href="#抽象的缺点"></a> 抽象的缺点</h3>
<ol>
<li>过度抽象会损失性能（原则：abstract but don’t hide power)</li>
<li>通用的抽象对数据库、Web服务器来说不是最优抽象。（软件比操作系统更了解如何使用抽象来使用硬件资源）</li>
</ol>
<h2 id="外核-exokernel"><a class="markdownIt-Anchor" href="#外核-exokernel"></a> 外核 Exokernel</h2>
<p>外核将硬件资源抽象为LibOS，按需最小化调用</p>
<blockquote>
<p>外核的缺点：LibOS针对应用定制，不通用、复用差（增大内存开销）</p>
</blockquote>
<blockquote>
<p>开源的缺点：开放设备驱动源码会透露实现细节</p>
</blockquote>
<h2 id="策略与机制"><a class="markdownIt-Anchor" href="#策略与机制"></a> 策略与机制</h2>
<blockquote>
<p>重要的操作系统设计原则：分离 policy 与 mechanism</p>
</blockquote>
<p>policy：做什么。就像房子。例如什么用户、什么权限<br />
mechanism：怎么做。就像盖房子的砖块。例如输入处理、桌面加载</p>
<h1 id="chapter4-内存管理"><a class="markdownIt-Anchor" href="#chapter4-内存管理"></a> Chapter4 内存管理</h1>
<h2 id="虚拟内存"><a class="markdownIt-Anchor" href="#虚拟内存"></a> 虚拟内存</h2>
<p>两种内存管理</p>
<ol>
<li>一个程序占用全部内存。程序切换时，将内存的数据写入硬盘（写入慢）</li>
<li>程序共享内存。无需频繁写入硬盘（问题：隔离性、地址不连续）<br />
方法2更好，于是催生了虚拟内存这个中间层来解决隔离性和地址不连续的问题。</li>
</ol>
<blockquote>
<p>有了虚拟内存技术，程序连续地存储在硬盘里，通过页表映射的方式高效使用内存。</p>
</blockquote>
<h2 id="内存分段与分页"><a class="markdownIt-Anchor" href="#内存分段与分页"></a> 内存分段与分页</h2>
<p>分段：早期内存划分成大小不一样的段。缺点是容易产生内存碎片，不能充分利用内存资源。<br />
分页：按规格划分内存和硬盘，任意虚拟页可以被映射到物理页。</p>
<h2 id="多级页表"><a class="markdownIt-Anchor" href="#多级页表"></a> 多级页表</h2>
<p>如果每个程序只维护1张页表，那么每张页表的大小将会是3千万GB！</p>
<blockquote>
<p>单级页表每一项都要存在：因为整个页表必须连续，没有用到的页也预留着。</p>
</blockquote>
<h2 id="tlb-translation-buffer"><a class="markdownIt-Anchor" href="#tlb-translation-buffer"></a> TLB Translation Buffer</h2>
<p>TLB缓存了虚拟页与物理页的映射关系。<br />
其中，每项TLB有一个标签（ASID/PCID）来区别不同的程序，切换程序时只需要刷新那个程序的页表，无需全部刷新。</p>
<blockquote>
<p>页表切换时，操作系统需要主动刷新TLB。</p>
</blockquote>
<h2 id="换页与缺页"><a class="markdownIt-Anchor" href="#换页与缺页"></a> 换页与缺页</h2>
<p>打开PS，占用2G内存；打开游戏，占用3G内存。一共占用5G内存，却可以在总共4G的电脑上运行。</p>
<blockquote>
<p>换页：物理内存容量不够，将物理页写入磁盘，并回收资源。</p>
</blockquote>
<blockquote>
<p>缺页异常：内存找不到页，从磁盘找到对应页，写入内存。</p>
</blockquote>
<blockquote>
<p>预取：预测即将被访问的页，提前换入内存，减少不命中。</p>
</blockquote>
<blockquote>
<p>按需页分配：程序申请内存，只标记不换入，等到缺页异常再换入，提高利用率。</p>
</blockquote>
<h2 id="工作集模型"><a class="markdownIt-Anchor" href="#工作集模型"></a> 工作集模型</h2>
<p>将程序使用的内存页集合共同保持在物理页中，避免颠簸，优先换出非工作集的物理页。<br />
原理：时钟算法。通过定时比较当前内存页与上次检测结果的访问位，判断出哪些内存是当前工作集。</p>
<h2 id="写时拷贝"><a class="markdownIt-Anchor" href="#写时拷贝"></a> 写时拷贝</h2>
<p>对于两个程序共用的物理页，只在内存保留1份数据，只读地映射到页表。当其中一个程序对共享部分修改时，再拷贝一份可读写的数据（由异常处理完成操作）来完成修改。</p>
<h2 id="内存去重"><a class="markdownIt-Anchor" href="#内存去重"></a> 内存去重</h2>
<p>操作系统定期扫描内存中的相同内容，只保留其中一份。缺点是修改时需要写时拷贝，加大了时延。</p>
<blockquote>
<p>针对内存去重的攻击：伪造数据，如果被去重了（表现为时延变长）就说明内存中存在相同的数据。</p>
</blockquote>
<h2 id="大页"><a class="markdownIt-Anchor" href="#大页"></a> 大页</h2>
<blockquote>
<p>TLB中翻译每个内存页要占用1个TLB缓存项。使用大页来解决缓存不够用的问题，提高命中率。大页的大小可以是2MB到1GB（普通页仅为4KB）。</p>
</blockquote>
<h2 id="物理内存分配与管理"><a class="markdownIt-Anchor" href="#物理内存分配与管理"></a> 物理内存分配与管理</h2>
<blockquote>
<p>内存碎片：无法被利用的内存。</p>
</blockquote>
<blockquote>
<p>外部碎片：有足够的内存却不是连续的，无法被分配使用。解决方法是按规格切分并分配内存。</p>
</blockquote>
<blockquote>
<p>内部碎片：切分并分配内存后（解决外部碎片），每块内存都没有被充分使用。</p>
</blockquote>
<h3 id="伙伴系统"><a class="markdownIt-Anchor" href="#伙伴系统"></a> 伙伴系统</h3>
<p>物理内存分块，每块由<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>个（1，2，4，8）物理页构成。2块相同大小的块为<strong>伙伴</strong>，可以合并成大一号的块；大块也可以分裂出2个小一号的伙伴块。</p>
<blockquote>
<p>伙伴系统：一个块被释放后，<strong>自动寻找伙伴块向上合并</strong>成大块，直到没有伙伴块为止。</p>
</blockquote>
<h3 id="slab分配器"><a class="markdownIt-Anchor" href="#slab分配器"></a> SLAB分配器</h3>
<p>伙伴系统最小分配4KB，然而许多服务只需要几十、几百B，SLAB用于分配这些小内存。<br />
SLAB后来被改进成SLUB；还有一个最小开销、用于嵌入式的SLOB，这三者共称“SLAB分配器”。</p>
<blockquote>
<p>SLUB：2^n Byte(3\leq n \textless 12) 的伙伴系统。有2个指针，partial指向一块空闲内存slab，current指向slab中的空闲块。</p>
</blockquote>
<h3 id="软件着色软件方案"><a class="markdownIt-Anchor" href="#软件着色软件方案"></a> 软件着色（软件方案）</h3>
<blockquote>
<p>对放到不同位置的物理页标记不同颜色。对于连续虚拟内存，优先分别到不同颜色的位置，避免不命中。</p>
</blockquote>
<h1 id="chapter5-进程与线程"><a class="markdownIt-Anchor" href="#chapter5-进程与线程"></a> Chapter5 进程与线程</h1>
<blockquote>
<p>进程：每个进程对应一个运行中的程序。</p>
</blockquote>
<p>有了进程的抽象，应用程序再运行时仿佛独占了整个CPU。</p>
<blockquote>
<p>上下文切换：通过保存/回复进程的运行状态（上下文），使进程可以暂停、切换、恢复，实现CPU资源共享。</p>
</blockquote>
<blockquote>
<p>操作系统为每个进程提供独立虚拟地址空间（页表）。</p>
</blockquote>
<blockquote>
<p>线程：更轻量的执行单元，解决进程间数据不易共享、通信开销问题。</p>
</blockquote>
<blockquote>
<p>纤程：允许上下文在用户态而非内核态切换，再次减小开销。</p>
</blockquote>
<h2 id="进程"><a class="markdownIt-Anchor" href="#进程"></a> 进程</h2>
<table>
<thead>
<tr>
<th>名称</th>
<th>状态</th>
</tr>
</thead>
<tbody>
<tr>
<td>new</td>
<td>进程被创建，未初始化，不能调度</td>
</tr>
<tr>
<td>ready</td>
<td>进程初始化完成，未被调度器选择</td>
</tr>
<tr>
<td>running</td>
<td>进程被调度器选择，在CPU上运行</td>
</tr>
<tr>
<td>blocked</td>
<td>进程需要等待外部事件，暂时无法被调度</td>
</tr>
<tr>
<td>terminated</td>
<td>进程完成执行，不会再被调度</td>
</tr>
</tbody>
</table>
<h3 id="进程内存空间布局"><a class="markdownIt-Anchor" href="#进程内存空间布局"></a> 进程内存空间布局</h3>
<table>
<thead>
<tr>
<th>内核</th>
<th>最顶端</th>
</tr>
</thead>
<tbody>
<tr>
<td>用户栈</td>
<td>自顶向下拓展</td>
</tr>
<tr>
<td>代码库</td>
<td>共享，只读</td>
</tr>
<tr>
<td>用户堆</td>
<td>自底向上拓展</td>
</tr>
<tr>
<td>数据、代码段</td>
<td>静态</td>
</tr>
</tbody>
</table>
<p><code>cat /proc/PID/maps</code> 可以查看某个进程的空间布局</p>
<h3 id="进程控制块与上下文切换"><a class="markdownIt-Anchor" href="#进程控制块与上下文切换"></a> 进程控制块与上下文切换</h3>
<p>进程通过一个数据结构来保存它的相关状态（PID、进程状态、VM状态、打开的文件…）。</p>
<blockquote>
<p>这个数据结构称为PCB（Process Control Block）</p>
</blockquote>
<blockquote>
<p>上下文切换：将前一个进程的寄存器状态保存到PCB，将下一个进程之前保存的状态写入寄存器。</p>
</blockquote>
<h2 id="fork"><a class="markdownIt-Anchor" href="#fork"></a> fork</h2>
<p>fork创建一个与父进程一样子进程（PID与VM不同）。</p>
<h1 id="chapter6-操作系统调度"><a class="markdownIt-Anchor" href="#chapter6-操作系统调度"></a> Chapter6 操作系统调度</h1>
<h2 id="调度策略"><a class="markdownIt-Anchor" href="#调度策略"></a> 调度策略</h2>
<ul>
<li>
<p>FCFS，First Come First Served<br />
先到先服务。用时短的服务需要等待，用户体验不好。</p>
</li>
<li>
<p>SFJ， Shortest Job First<br />
最短运行时间先服务。依赖到达时间，如果长时间任务先到，仍然是长时间任务占用系统。</p>
</li>
<li>
<p>STCF，Shortest Time-to Completion First<br />
最短剩余时间先服务。容易饿死长时间服务。</p>
</li>
<li>
<p>RR，Round Robin<br />
时间片循环服务。平均把时间放在所有任务上。</p>
</li>
<li>
<p>MLQ，Multi-Level Queue<br />
多级队列，高优先级的队列执行完后，才执行低优先级队列。同级别的队列，随机选择。同样，低优先级会饿死。而且一个任务锁定内存时，高优先级实质上执行不了。</p>
</li>
<li>
<p>MLFQ，Multi-Level Feedback Queue<br />
多级队列加上反馈。假设所有任务是短时间任务，优先执行，超过一定时间后降级，处理其他事务。定时刷新，重设任务为高优先级，防止饿死。</p>
</li>
</ul>
<p>上面的所有调度方案，都是单用户下的调度；对多用户的调度和分配，我们需要引入<strong>份额</strong>。</p>
<ul>
<li>
<p>彩票调度<br />
生成随机数，例如生成32，则份额为10的不会执行，份额为20-40的会执行。<br />
这个方法显然不是完全按概率调度的。</p>
</li>
<li>
<p>彩票货币<br />
A任务份额10，B任务份额5。在实际执行过程中，B可能会锁死A需要的内存，这时就需要A转让份额，让B快点执行完。<br />
通过在份额上，再增加一层抽象货币，即A分配1/3的份额给B时，转换成A给B100货币，更容易计算。</p>
</li>
<li>
<p>步幅调度<br />
步幅调度设置虚拟时间T，严格按照1：3的分配执行两个任务。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>课程</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法</title>
    <url>/ComputerScience/%E8%AF%BE%E7%A8%8B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="00-pta实录"><a class="markdownIt-Anchor" href="#00-pta实录"></a> 0.0 PTA实录</h1>
<h2 id="011-最大子列和plus"><a class="markdownIt-Anchor" href="#011-最大子列和plus"></a> 0.1.1 最大子列和plus</h2>
<ul>
<li>如何利用语句先后顺序记录上一条信息<code>pre_start_tag</code></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sum_max_sequence</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> this_sum, max_sum;</span><br><span class="line">    <span class="type">int</span> start_tag, end_tag, pre_start_tag, neg_tag;</span><br><span class="line">    </span><br><span class="line">    start_tag = pre_start_tag = end_tag = <span class="number">0</span>;</span><br><span class="line">    this_sum = max_sum = <span class="number">0</span>;</span><br><span class="line">    neg_tag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">list</span>[i] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            neg_tag = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        this_sum += <span class="built_in">list</span>[i];</span><br><span class="line">        <span class="keyword">if</span> (this_sum &gt; max_sum)</span><br><span class="line">        &#123;</span><br><span class="line">            max_sum = this_sum;</span><br><span class="line">            end_tag = i;</span><br><span class="line">            pre_start_tag = start_tag; <span class="comment">// 我没有想到的代码！</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (this_sum &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            this_sum = <span class="number">0</span>;</span><br><span class="line">            start_tag = i+<span class="number">1</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(neg_tag) <span class="comment">// 输出0，第一个和最后一个数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld %d %d\n&quot;</span>, max_sum, <span class="built_in">list</span>[<span class="number">0</span>], <span class="built_in">list</span>[num<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (max_sum == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0 0 0\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld %d %d\n&quot;</span>, max_sum, <span class="built_in">list</span>[pre_start_tag], <span class="built_in">list</span>[end_tag]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="012-二分查找"><a class="markdownIt-Anchor" href="#012-二分查找"></a> 0.1.2 二分查找</h2>
<ul>
<li>不递归，用循环实现二分查找线性表</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Position <span class="title function_">BinarySearch</span><span class="params">( List L, ElementType X )</span></span><br><span class="line">&#123;</span><br><span class="line">    Position mid, start, end;</span><br><span class="line">    start = <span class="number">1</span>;</span><br><span class="line">    end = L-&gt;Last;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (start &lt;= end)</span><br><span class="line">    &#123;</span><br><span class="line">        mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (L-&gt;Data[mid] == X)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (L-&gt;Data[mid] &gt; X)</span><br><span class="line">        &#123;</span><br><span class="line">            end = mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (L-&gt;Data[mid] &lt; X)</span><br><span class="line">        &#123;</span><br><span class="line">            start = mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> NotFound;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="021-一元多项式的乘法与加法"><a class="markdownIt-Anchor" href="#021-一元多项式的乘法与加法"></a> 0.2.1 一元多项式的乘法与加法</h2>
<ol>
<li>操作链表或指针，一定要来一个temp变量copy原来的链表！不然顺序就没了！</li>
<li>不是结构链表（存储的值&gt;=2）的话不需要专门写一个插入函数</li>
<li>在运算之前一定要先检查有没有0，值不值得算，并且加上相应的处理代码</li>
<li>记得释放！free()用起来</li>
<li>有序插入链表：
<ol>
<li>要把链表遍历几次，每次都要找到可以插入的位置（按指数大小排序的位置）</li>
<li>处理系数为0的情况（不用插入，直接修改值）</li>
<li>插入链表：<code>temp-&gt;next = rear-&gt;next; rear-&gt;next = temp; rear = rear-&gt;next;</code></li>
</ol>
</li>
<li>仔细读题，把一些细节处理到位，如末尾不输出空格</li>
</ol>
<h2 id="022-两个有序链表的合并"><a class="markdownIt-Anchor" href="#022-两个有序链表的合并"></a> 0.2.2 两个有序链表的合并</h2>
<ol>
<li>5步：初始化、rear做下标、比较赋值（不需要新增项，只需要指向目标项！记得更新下标，非常重要hh）、处理剩余项，free()</li>
</ol>
<h2 id="031-树的同构"><a class="markdownIt-Anchor" href="#031-树的同构"></a> 0.3.1 树的同构</h2>
<ol>
<li>“最大N，层序遍历结果相同，但树不同”测试不通过：程序逻辑有问题，先判断了是否空，再判断是否值不同。把确认树是同构的代码<code>return 1</code>放在排除树是同构的代码<code>return 0</code>后面，即可解决问题。</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Isomorphic</span><span class="params">(Tree R1, Tree R2)</span> <span class="comment">// R1、R2是两个下标</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((R1 == Null &amp;&amp; R2 != Null) || (R2 == Null &amp;&amp; R1 != Null) ) <span class="comment">// 一个空一个非空，不一样</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (T1[R1].Element != T2[R2].Element) <span class="comment">// 值不一样</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (R1 == Null &amp;&amp; R2 == Null) </span><br><span class="line">    <span class="comment">// 排除法，前面的树都没返回0，直到叶节点才返回1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/* 记得加return！ */</span></span><br><span class="line">    <span class="keyword">if</span> (T1[R1].Left == Null &amp;&amp; T2[R2].Left == Null) <span class="comment">// 左子树空，看右子树</span></span><br><span class="line">        <span class="keyword">return</span> Isomorphic(T1[R1].Right, T2[R2].Right);</span><br><span class="line">    <span class="keyword">if</span> ( ((T1[R1].Left!=Null) &amp;&amp; (T2[R2].Left!=Null)) &amp;&amp; </span><br><span class="line">        (T1[T1[R1].Left].Element) == (T2[T2[R2].Left].Element)) &#123;</span><br><span class="line">        <span class="comment">// 左子树都不空，且左子树是同一棵树</span></span><br><span class="line">        <span class="keyword">return</span> Isomorphic(T1[R1].Left, T2[R2].Left);</span><br><span class="line">        <span class="keyword">return</span> Isomorphic(T1[R1].Right, T2[R2].Right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 左子树都不空，但两边交换了</span></span><br><span class="line">        <span class="keyword">return</span> Isomorphic(T1[R1].Left, T2[R2].Right);</span><br><span class="line">        <span class="keyword">return</span> Isomorphic(T1[R1].Right, T2[R2].Right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="033-tree-traversals-again"><a class="markdownIt-Anchor" href="#033-tree-traversals-again"></a> 0.3.3 Tree Traversals Again</h2>
<ul>
<li>本题的核心思想是：两种遍历就能确定一棵树。那么如何依靠前序遍历和中序遍历，得到树的后序遍历结果呢？</li>
</ul>
<ol>
<li>根据前序遍历结果，容易确定树的根；树根是最后一个输出的，放后序数组最后一个位置</li>
<li>根据树根和中序遍历结果，划分树</li>
<li>递归上面两步，把树划分好，按顺序填入左右节点、根节点即可</li>
</ol>
<ul>
<li><code>solve()</code>函数仅仅做了两件事：放好根节点和叶节点，真简洁， hecd真精妙！</li>
</ul>
<h2 id="041-判断是否按同一颗二叉搜索树"><a class="markdownIt-Anchor" href="#041-判断是否按同一颗二叉搜索树"></a> 0.4.1 判断是否按同一颗二叉搜索树</h2>
<ol>
<li>流程：读入数据（基准树，节点数+数据数），按顺序处理数据；读入数据</li>
<li>处理方法：首先构造基准树，然后处理数据。通过在基准树内按顺序查找节点，来判断是否同一颗树（寻找一个节点，必须经过已经查找过的节点，这就是同一颗搜索树；而二叉树保证了数据的位置）</li>
</ol>
<h2 id="042-list-leaves"><a class="markdownIt-Anchor" href="#042-list-leaves"></a> 0.4.2 List Leaves</h2>
<ul>
<li>用结构数组建树，判断叶节点并设置flag，用层序遍历输出</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Tree是int 表示下标，树用结构数组T1[MaxTree]实现</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">LevelorderTraversal</span> <span class="params">( Tree BT )</span></span><br><span class="line">&#123; </span><br><span class="line">    Queue Q; </span><br><span class="line">    Tree T;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( BT == Null ) <span class="keyword">return</span>; <span class="comment">/* 若是空树则直接返回 */</span></span><br><span class="line">    </span><br><span class="line">    Q = CreateQueue(MaxTree); <span class="comment">/* 创建空队列Q */</span></span><br><span class="line">    AddQ( Q, T1[BT].Element );</span><br><span class="line">    <span class="keyword">while</span> ( !IsEmpty(Q) ) &#123;</span><br><span class="line">        T = DeleteQ( Q );</span><br><span class="line">        <span class="keyword">if</span> (T1[T].flag) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, T); <span class="comment">/* 访问取出队列的结点 */</span></span><br><span class="line">            <span class="keyword">if</span> ( !IsEmpty(Q) ) <span class="comment">// 保证格式</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( T1[T].Left != Null )</span><br><span class="line">            AddQ( Q, T1[T1[T].Left].Element );</span><br><span class="line">        <span class="keyword">if</span> ( T1[T].Right != Null )</span><br><span class="line">            AddQ( Q, T1[T1[T].Right].Element );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="045-root-of-avl-tree"><a class="markdownIt-Anchor" href="#045-root-of-avl-tree"></a> 0.4.5 Root of AVL Tree</h2>
<ul>
<li>使用树高来判断需不需要平衡，因此需要注意更新树高</li>
<li>基本上按照示例代码编写了右旋与右左旋</li>
<li>双旋只需要两次单旋就可实现！</li>
<li><code>GetHeight(AVLTree)</code>函数需要注意传入树为空的情况</li>
</ul>
<h2 id="057-最小堆的路径"><a class="markdownIt-Anchor" href="#057-最小堆的路径"></a> 0.5.7 最小堆的路径</h2>
<ul>
<li>堆最好的表示方式是数组（完全二叉树）</li>
<li>插入堆从底部开始，把大于插入值的节点顺位下去</li>
</ul>
<h2 id="058-file-transfer-算法优化"><a class="markdownIt-Anchor" href="#058-file-transfer-算法优化"></a> 0.5.8 File Transfer 算法优化</h2>
<h3 id="按秩归并"><a class="markdownIt-Anchor" href="#按秩归并"></a> 按秩归并</h3>
<ul>
<li>让树不要越长越高，不要成为单链表</li>
<li>如何避免树会越来越高？把矮的树连接到高的树上，根节点下标-n代表n树高
<ol>
<li>比高度</li>
<li>比规模</li>
</ol>
</li>
</ul>
<h3 id="路径压缩"><a class="markdownIt-Anchor" href="#路径压缩"></a> 路径压缩</h3>
<ul>
<li>不是把连接的节点组织成单分支树，而是根-叶，所有节点直接指向父节点！</li>
<li>尾（伪）递归：编译器自动转换为循环</li>
</ul>
<h2 id="074-哈利波特的考试打瞌睡"><a class="markdownIt-Anchor" href="#074-哈利波特的考试打瞌睡"></a> 0.7.4 哈利·波特的考试（打瞌睡）</h2>
<ul>
<li>使用Floyd算法找出任意两点的最短路径，再比较每一行最长的路径，找出最小的那个</li>
</ul>
<h1 id="10-基本概念"><a class="markdownIt-Anchor" href="#10-基本概念"></a> 1.0 基本概念</h1>
<h2 id="11-什么是数据结构"><a class="markdownIt-Anchor" href="#11-什么是数据结构"></a> 1.1 什么是数据结构</h2>
<ul>
<li>如何在书架上摆放图书？
<ul>
<li>这个问题不科学，没有告诉我们书架长什么样。<strong>不一样规模的问题，处理起来的难度不一样。</strong></li>
<li>两个问题：新书如何插入、如何查找。</li>
<li>方法
<ol>
<li>随便放（插入一步到位，找书很难）</li>
<li>二分查找，按字母排放（查找很容易，插入需要一本一本往后放）</li>
<li>书城，按书的类别分，再细分（图书规模变小，查找、插入难度也变小）问题：每类书的规模不同，预留多少空间；类别分的多细？</li>
</ol>
</li>
<li>总结：解决问题方法的效率，跟数据的组织方式有关</li>
</ul>
</li>
<li>循环与递归
<ul>
<li>数据量达到10w时，递归罢工</li>
<li>总结：解决问题方法的效率，跟空间的利用效率有关</li>
</ul>
</li>
<li>用<code>time.h</code>统计调用函数所用时间</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">clock_t</span> start, stop; <span class="comment">// clock()返回类型clock_t</span></span><br><span class="line"><span class="type">double</span> duration; <span class="comment">// 以秒为单位</span></span><br><span class="line"></span><br><span class="line">start = clock();</span><br><span class="line"><span class="comment">// MyFunction();</span></span><br><span class="line">stop = clock();</span><br><span class="line">duration = ((<span class="type">double</span>)(stop-start)) / CLK_TCK;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;duration: %lf&quot;</span>, duration);</span><br></pre></td></tr></table></figure>
<pre><code>- 总结：解决问题方法的效率，跟算法的巧妙程度有关系
</code></pre>
<ul>
<li>什么是数据结构
<ul>
<li><strong>数据对象</strong>在计算机中的组织方式就是数据结构
<ul>
<li>逻辑结构</li>
<li>物理结构</li>
</ul>
</li>
<li>数据对象必定与一系列加在其上的<strong>操作</strong>相关联</li>
<li>完成这些操作所用的方法就是<strong>算法</strong></li>
</ul>
</li>
<li>ADT：描述数据结构的方法
<ul>
<li>只描述数据对象集和相关操作集 <strong>“是什么”</strong> ，并不涉及 <strong>“如何做到”</strong> 的问题</li>
<li><code>int, float, double</code> 用宏定义 <code>ElementType</code> 代替</li>
<li>不考虑用二维数组还是十字链表</li>
</ul>
</li>
</ul>
<h2 id="12-什么是算法"><a class="markdownIt-Anchor" href="#12-什么是算法"></a> 1.2 什么是算法</h2>
<ul>
<li>算法
<ul>
<li>有限指令集</li>
<li>接受输入或不需要输入</li>
<li>产生输出</li>
<li>一定在有限步骤后终止</li>
<li>每条指令必须
<ol>
<li>明确无歧义</li>
<li>计算机处理范围内（如递归别爆内存）</li>
<li>伪代码，不依赖特定语言和实现手段</li>
</ol>
</li>
<li>例子</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 将N个整数List[0]...List[N-1]进行非递减排序 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SelectionSort</span><span class="params">(<span class="type">int</span> List[], <span class="type">int</span> N)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        MinPosition = ScanForMin( List, i, N–<span class="number">1</span> );</span><br><span class="line">        <span class="comment">/* 从List[i]到List[N–1]中找最小元,并将其位置赋给MinPosition */</span></span><br><span class="line">        Swap( List[i], List[MinPosition] );</span><br><span class="line">        <span class="comment">/* 将未排序部分的最小元换到有序部分的最后位置 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>什么是好的算法
<ul>
<li>空间复杂度S(n)和时间复杂度T(n)</li>
<li>S(n)：递归PrintN(int N)占用跟N大小呈线性增长；而循环始终占用1个函数空间</li>
<li>T(n)：多项式例子，直接算的方法执行(1+2+…+n)次乘法，巧妙方法只执行n次乘法
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>w</mi></msub><mi>o</mi><mi>r</mi><mi>s</mi><mi>t</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mtext>和</mtext><msub><mi>T</mi><mi>a</mi></msub><mi>v</mi><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T_worst(n)\text{和}T_avg(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mord text"><span class="mord cjk_fallback">和</span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></li>
</ul>
</li>
<li>复杂度运算
<ol>
<li>两算法分别有复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msub><mi>f</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo separator="true">,</mo><mtext> </mtext><msub><mi>T</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msub><mi>f</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T_1(n) = O(f_1(n)),\  T_2(n) = O(f_2(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><msub><mi>T</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>O</mi><mo stretchy="false">(</mo><msub><mi>f</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo separator="true">,</mo><mtext>  </mtext><mi>O</mi><mo stretchy="false">(</mo><msub><mi>f</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T_1(n) + T_2(n) = max(O(f_1(n)),\; O(f_2(n)))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>×</mo><msub><mi>T</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msub><mi>f</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>×</mo><mi>O</mi><mo stretchy="false">(</mo><msub><mi>f</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T_1(n) \times T_2(n) = O(f_1(n)) \times O(f_2(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></li>
</ul>
</li>
<li>T(n)是关于n的k阶多项式，那么<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mi>k</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n) = \Theta(n^k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li>
<li>for循环：循环体复杂度 * 循环次数</li>
<li>if-else分支：if条件判断和两个分支部分复杂度，取最大的那个</li>
</ol>
</li>
</ul>
</li>
<li><strong>例子：判断下面代码的复杂度</strong> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*if-else分支：if条件判断和两个分支部分复杂度，取最大的那个*/</span></span><br><span class="line"><span class="keyword">if</span> ( A &gt; B ) &#123; <span class="comment">// n^3</span></span><br><span class="line">    <span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;N; i++ ) <span class="comment">// n</span></span><br><span class="line">        <span class="keyword">for</span> ( j=N*N; j&gt;i; j-- ) <span class="comment">// n^2</span></span><br><span class="line">            A += B; <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;  <span class="comment">// 4n^2</span></span><br><span class="line">    <span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;N*<span class="number">2</span>; i++ ) <span class="comment">// 2n</span></span><br><span class="line">        <span class="keyword">for</span> ( j=N*<span class="number">2</span>; j&gt;i; j-- )  <span class="comment">// 2n</span></span><br><span class="line">            A += B; <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="线性表"><a class="markdownIt-Anchor" href="#线性表"></a> 线性表</h1>
<h2 id="如何用程序表示多项式"><a class="markdownIt-Anchor" href="#如何用程序表示多项式"></a> 如何用程序表示多项式？</h2>
<ul>
<li>关键信息：1) 项数n; 2) 系数a以及指数i</li>
<li>array: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>:</mo><mtext>项</mtext><msup><mi>x</mi><mi>i</mi></msup><mtext>的系数</mtext><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a[i]: \text{项}x^i\text{的系数}a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.974664em;vertical-align:-0.15em;"></span><span class="mord text"><span class="mord cjk_fallback">项</span></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span><span class="mord text"><span class="mord cjk_fallback">的系数</span></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>4</mn><msup><mi>x</mi><mn>5</mn></msup><mo>−</mo><mn>3</mn><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">f(x) = 4x^5-3x^2+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>
<ul>
<li>表示成：a[6] = {1, 0, -3, 0, 0, 4}</li>
<li>问题：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>+</mo><mn>3</mn><msup><mi>x</mi><mn>2000</mn></msup></mrow><annotation encoding="application/x-tex">x+3x^{2000}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">0</span><span class="mord mtight">0</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>需要2001大小的数组，浪费，循环无效0</li>
</ul>
</li>
<li>把多项式看成 (a, j) 二元组，用结构数组，只表示非0项（两个数组，一个表示系数，一个表示指数）</li>
<li>链表</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PolyNode</span> *<span class="title">Polynomial</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PolyNode</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> coef;</span><br><span class="line">    <span class="type">int</span> expon;</span><br><span class="line">    Polynomial link;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="什么是线性表"><a class="markdownIt-Anchor" href="#什么是线性表"></a> 什么是线性表</h2>
<ul>
<li>类型名称：线性表List</li>
<li>数据对象集：线性表是n个元素构成的<strong>有序</strong>序列</li>
<li>操作集</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">List <span class="title function_">MakeEmpty</span><span class="params">()</span> <span class="comment">// 初始化空线性表</span></span><br><span class="line">ElementType <span class="title function_">FindKth</span><span class="params">(<span class="type">int</span> K, List L)</span> <span class="comment">// 根据位置K，返回相应元素</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Find</span><span class="params">(ElementType X, List L)</span>  <span class="comment">// 寻找X第一次出现的位置</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Insert</span><span class="params">(ElementType X, <span class="type">int</span> i, List L)</span> <span class="comment">// 在位序i前插入一个新元素X</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delete</span><span class="params">(<span class="type">int</span> i, List L)</span> <span class="comment">// 删除指定位序i的元素；</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Length</span><span class="params">(List L)</span> <span class="comment">// 返回线性表L的长度n</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>在矩阵的多重链表表示中，第i行的head和第i列的head实际上是同一个结点</strong> 对</li>
<li><strong>下面的统计列表长度函数是否正确？</strong> 错</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Length</span><span class="params">(List *PtrL)</span> &#123;  </span><br><span class="line">    List *p = PtrL;  </span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span> (p) &#123;  </span><br><span class="line">        p++; <span class="comment">// 错误，应为p = p-&gt;next; </span></span><br><span class="line">        j++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> j; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="树"><a class="markdownIt-Anchor" href="#树"></a> 树</h1>
<ul>
<li>分层次组织在管理上具有更高的效率</li>
<li>两种查找
<ul>
<li>静态</li>
<li>动态：不仅查找，还有插入、删除</li>
</ul>
</li>
<li>哨兵
<ul>
<li>可以少些一个判断分支：把array[0]=K，设0（哨兵项）为K，则每次到0比为K，退出循环；同时少了条件判断，提高效率</li>
</ul>
</li>
<li>二分查找：必须用数组，顺序存放</li>
<li>题目：在二分查找的程序实现中，如果left和right的更新不是取mid+1和mid-1而是都取mid，程序也是正确的（错误）</li>
<li>树：摆脱了数组这种结构限制，可以动态查找
<ul>
<li>有一个m棵树的集合（也叫森林）共有k条边，问这m颗树共有多少个结点？</li>
<li>m + k个，如图，1棵树4条边</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  A    // root</span><br><span class="line"> / \   // side</span><br><span class="line">B   C  // tree</span><br><span class="line"> \   \</span><br><span class="line">  D   E</span><br></pre></td></tr></table></figure>
<ul>
<li>术语
<ul>
<li>degree：节点子树个数</li>
<li>树的度：节点最大度</li>
<li>leaf：无子树节点</li>
<li>sibling：兄弟节点</li>
</ul>
</li>
<li>树的表示（链表）：儿子兄弟表示法（二叉树） 统一结构</li>
<li>题目：一棵度为m的树有n个节点。若每个节点直接用m个链指向相应的儿子，则表示这个树所 需要的总空间是n*(m+1）（假定每个链以及表示节点的数据域都是一个单位空间)。当采用 儿子/兄弟（FirstChild/NextSibling）表示法时，所需的总空间是<strong>3n</strong>。一个数据、两个指针（二子、兄弟）</li>
</ul>
<h2 id="二叉树"><a class="markdownIt-Anchor" href="#二叉树"></a> 二叉树</h2>
<ul>
<li>第k层最多<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{k-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>个节点</li>
<li>任何二叉树满足下面关系 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub><mo>=</mo><msub><mi>n</mi><mn>2</mn></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n_0 = n_2 + 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，推导：边的总数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>=</mo><msub><mi>n</mi><mn>0</mn></msub><mo>+</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>1</mn><mo>=</mo><mn>0</mn><mo>∗</mo><msub><mi>n</mi><mn>0</mn></msub><mo>+</mo><msub><mi>n</mi><mn>1</mn></msub><mo>∗</mo><mn>1</mn><mo>+</mo><msub><mi>n</mi><mn>2</mn></msub><mo>∗</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">S = n_0 + n_1 + n_2 - 1 = 0*n_0 + n_1*1 + n_2*2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.61528em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.61528em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   A</span><br><span class="line">  / \</span><br><span class="line"> B   C // N2 = 3</span><br><span class="line">/ \ /</span><br><span class="line">D E F</span><br><span class="line"> / \ \</span><br><span class="line">J   K H // N0 = 4</span><br></pre></td></tr></table></figure>
<ul>
<li>完全二叉树用数组很方便，可以完全顺序编号：并且可以容易地找出子节点、父节点；可以把树填充成完全二叉树，然后用数组存放（会造成空间浪费）</li>
</ul>
<h3 id="二叉树遍历"><a class="markdownIt-Anchor" href="#二叉树遍历"></a> 二叉树遍历</h3>
<ul>
<li>递归方法：同样路径，不同打印顺序
<ol>
<li>先序(preOrder)：根节点，先序遍历左子树、右子树</li>
<li>中序(inOrder)：中序左子树，根节点，中序右子树</li>
<li>后序(postOrder)：后序左子树，后序右子树，根节点</li>
</ol>
</li>
<li>非递归遍历：用堆栈
<ol>
<li>中序：遇到一个结点，就把它压栈，并去遍历它的左子树；当左子树遍历结束后，从栈顶弹出这个结点并访问它；然后按其右指针再去中序遍历该结点的右子树</li>
</ol>
</li>
</ul>
<h3 id="层序遍历"><a class="markdownIt-Anchor" href="#层序遍历"></a> 层序遍历</h3>
<ul>
<li>二叉树：线性化序列</li>
<li>遍历二叉树：二维变一维</li>
<li>难点：不访问父节点就找不到子节点；访问了左节点，右节点怎么办（保存：堆栈、队列）</li>
<li>队列实现
<ul>
<li>把子节点全部放进队列，依次出队</li>
</ul>
</li>
</ul>
<h3 id="树的应用"><a class="markdownIt-Anchor" href="#树的应用"></a> 树的应用</h3>
<ol>
<li>求树叶节点的个数</li>
<li>求树的深度</li>
<li>实现前缀、后缀、中缀（不准）表达式</li>
<li>必须有中序遍历，再加上其他方式遍历，才可以唯一确定一颗二叉树</li>
</ol>
<ul>
<li>题目：已知有颗5个结点的二又树，其前序遍历序列是a???？，中序遍历序列是a？??？，可以断定 A.该树根结点是a，且没有左子树<br />
前序遍历：根-&gt;左-&gt;右；中序：左-&gt;根-&gt;右；由此可判断</li>
</ul>
<h3 id="二叉搜索树"><a class="markdownIt-Anchor" href="#二叉搜索树"></a> 二叉搜索树</h3>
<ul>
<li>二分查找：事先有效组织数据</li>
<li>二叉树：比线性结构更好组织；所有的左子节点要比根节点小，右子节点要比根节点大</li>
<li>删除：右子树最小元素替代或左子树最大元素替代（这两个元素一定只有1个节点）</li>
</ul>
<h3 id="平衡二叉树"><a class="markdownIt-Anchor" href="#平衡二叉树"></a> 平衡二叉树</h3>
<ul>
<li>左右两边节点、高度差不多</li>
<li>平衡因子Balace Factor: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>B</mi><mi>F</mi><mo stretchy="false">(</mo><mi>T</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>h</mi><mi>L</mi></msub><mo>−</mo><msub><mi>h</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">BF(T) = h_L - h_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li>
<li>最少几个节点才能构造一个4层平衡二叉树？7个（保持高度差=1）</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">    A</span><br><span class="line">   / \</span><br><span class="line">  B   C</span><br><span class="line"> / \  /</span><br><span class="line"> D  E F</span><br><span class="line">/</span><br><span class="line">G</span><br></pre></td></tr></table></figure>
<h2 id="堆"><a class="markdownIt-Anchor" href="#堆"></a> 堆</h2>
<ul>
<li>不按顺序处理，按优先级</li>
<li>优先队列(Priority Queue)：特殊的队列，按优先权（关键字）大小取元素</li>
<li>用完全二叉树存储，任何节点都比左右子节点要大</li>
<li>建堆时，最坏情况下需要挪动元素次数是等于树中各结点的高度和。问：对于元素个数为 12的堆，其各结点的高度之和是多少？<strong>10</strong>，3+2+2+1+1+1=10 要看棵树举例子节点的举例</li>
</ul>
<h2 id="哈夫曼树"><a class="markdownIt-Anchor" href="#哈夫曼树"></a> 哈夫曼树</h2>
<h3 id="哈弗曼编码"><a class="markdownIt-Anchor" href="#哈弗曼编码"></a> 哈弗曼编码</h3>
<ul>
<li>不等长编码</li>
</ul>
<h3 id="哈夫曼树最小优二叉树"><a class="markdownIt-Anchor" href="#哈夫曼树最小优二叉树"></a> 哈夫曼树（最小/优二叉树）</h3>
<ul>
<li>寻找最有效的检索树</li>
<li><strong>生成步骤</strong>
<ul>
<li>每次把权值最小的两棵二叉树合并</li>
</ul>
</li>
<li>哈弗曼树的左子树也是哈弗曼树</li>
<li>用最小堆实现
<ul>
<li>找到两个最小的</li>
<li>堆顶为两个值合并值</li>
</ul>
</li>
<li>同一组权值，哈弗曼树不一定同构，但是WPL一样</li>
</ul>
<h3 id="不等长编码"><a class="markdownIt-Anchor" href="#不等长编码"></a> 不等长编码</h3>
<ul>
<li>问题：二义性</li>
<li>解决二义性：任何字符的前缀码都不是另一字符编码的前缀；让所有编码都落在二叉树的叶节点上（哈弗曼树实现最优）</li>
<li>题目：<br />
下列方案中哪个不可能是哈夫曼编码？<br />
A. 00, 100, 101, 110, 111<br />
画*处无节点,度为1</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   / \</span><br><span class="line">  0   1</span><br><span class="line"> / * / \</span><br><span class="line">0   0  1</span><br><span class="line">   /\  /\</span><br><span class="line">  0 1  0 1</span><br></pre></td></tr></table></figure>
<h2 id="并-查集"><a class="markdownIt-Anchor" href="#并-查集"></a> 并、查集</h2>
<ul>
<li>思路：
<ol>
<li>10台电脑看成10个集合</li>
<li>互相连接的电脑xy对应的集合合并</li>
<li>判别xy是否属于同一集合，即可知两台电脑是否连通</li>
</ol>
</li>
</ul>
<h1 id="图"><a class="markdownIt-Anchor" href="#图"></a> 图</h1>
<ul>
<li><strong>树是一种特殊的图</strong></li>
<li>表示多对多关系</li>
<li>包含
<ul>
<li>一组定点</li>
<li>一组边</li>
<li>有向边，只能从一边到另一边，不能回去</li>
</ul>
</li>
<li>强大的数据结构</li>
<li>图的两条边可以代表一种关系</li>
<li>六度空间：任意两个人可以通过不超过六个人认识</li>
</ul>
<h2 id="实际问题"><a class="markdownIt-Anchor" href="#实际问题"></a> 实际问题：</h2>
<ul>
<li>怎么走最快？（最短路径）</li>
<li>怎么修路使村村通的花费最少（地铁线路）</li>
</ul>
<h2 id="术语"><a class="markdownIt-Anchor" href="#术语"></a> 术语</h2>
<ul>
<li>无向图、有向图</li>
<li>带权重的图：网络</li>
</ul>
<h2 id="程序表示"><a class="markdownIt-Anchor" href="#程序表示"></a> 程序表示</h2>
<ul>
<li>邻接矩阵 G[N][N]，N个顶点从0到N-1编号
<ul>
<li>G[i][j] = 1 若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&lt;</mo><msub><mi>v</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>j</mi></msub><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">&lt;v_i, v_j&gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8252079999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span></span></span>是G中的边；否则为0</li>
<li>稀疏时存了很多0，浪费空间；也浪费时间（要扫描数组）</li>
</ul>
</li>
<li>邻接表 G[N]指针数组，对于矩阵每行一个链表，只存非0元素
<ul>
<li>一定要够稀疏才合算</li>
<li>无向图很好算度；有向图不好计算</li>
<li>不好检查任意一对顶点是否存在边</li>
</ul>
</li>
</ul>
<h2 id="图的遍历"><a class="markdownIt-Anchor" href="#图的遍历"></a> 图的遍历</h2>
<ul>
<li>DFS(Depth First Search)与BFS(Breadth First Search)
<ul>
<li>DFS：原路返回（栈），相当于树的前序遍历</li>
<li>BFS：相当于树的层序遍历</li>
</ul>
</li>
<li>为什么需要两种遍历？
<ul>
<li>BFS在目标距离近的时候非常好使；目标距离远的时候就需要DFS节省算力</li>
</ul>
</li>
</ul>
<h2 id="最短路径问题"><a class="markdownIt-Anchor" href="#最短路径问题"></a> 最短路径问题</h2>
<ul>
<li>从起点到终点的权值之和</li>
<li>单源与多源
<ul>
<li>从固定点出发，求最短路</li>
<li>从任一点求最短路</li>
</ul>
</li>
</ul>
<h1 id="排序和查找算法"><a class="markdownIt-Anchor" href="#排序和查找算法"></a> 排序和查找算法</h1>
<ul>
<li>一万个数起步的排序</li>
<li>基于比较的排序</li>
<li>只讨论内部排序（可以在内存里一次性排完）；外部排序（内存一次装不下）</li>
<li>稳定性： 相等数据，排序前后相对位置不变</li>
<li>没有一种排序是任何情况下最快最好的</li>
</ul>
<h2 id="简单排序"><a class="markdownIt-Anchor" href="#简单排序"></a> 简单排序</h2>
<h3 id="冒泡排序"><a class="markdownIt-Anchor" href="#冒泡排序"></a> 冒泡排序</h3>
<ul>
<li>最大的泡泡沉底</li>
<li>对链表和数组都没问题</li>
<li><strong>问题：对于7个数进行冒泡排序，最坏情况下需要进行的比较次数为</strong> 21次(6+5+4+3+2+1)</li>
</ul>
<h3 id="插入排序"><a class="markdownIt-Anchor" href="#插入排序"></a> 插入排序</h3>
<ul>
<li>从最后一位开始往前比较大小，选择好插入位置</li>
<li>好处：不是交换排序</li>
</ul>
<h3 id="逆序对"><a class="markdownIt-Anchor" href="#逆序对"></a> 逆序对</h3>
<ul>
<li>每次交换正好消去1个逆序对</li>
<li>最好情况T(N, I) = O(N + I)</li>
<li>定理：N个元素平均有N(N-1)/4个逆序对</li>
<li>定理：任意两两交换算法，平均时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">N^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></li>
<li><strong>想要提高算法效率，每次消去不止1个逆序对，每次交换相隔较远的逆序对</strong></li>
</ul>
<h2 id="希尔排序shell-sort"><a class="markdownIt-Anchor" href="#希尔排序shell-sort"></a> 希尔排序(Shell Sort)</h2>
<ul>
<li>每隔n个进行插入排序</li>
<li>减少n直到1为止(n/2)</li>
<li>在8 4 2 1时，可能每次排序都不会起作用，最好是互质的</li>
</ul>
<h2 id="堆排序"><a class="markdownIt-Anchor" href="#堆排序"></a> 堆排序</h2>
<h3 id="选择排序"><a class="markdownIt-Anchor" href="#选择排序"></a> 选择排序</h3>
<ul>
<li>最多换n-1次</li>
<li>瓶颈在如何寻找最小元（最小堆）</li>
</ul>
<h3 id="堆排序选择排序改进"><a class="markdownIt-Anchor" href="#堆排序选择排序改进"></a> 堆排序（选择排序改进）</h3>
<ul>
<li>算法1：建立最小堆，每次从最小堆里弹出一个元素(N logN)
<ul>
<li>需要额外空间</li>
</ul>
</li>
<li>算法2：最大堆，每次弹出堆顶并与最小元素交换</li>
</ul>
<h2 id="归并排序"><a class="markdownIt-Anchor" href="#归并排序"></a> 归并排序</h2>
<ul>
<li>有序子列的归并</li>
<li>指针：存位置的就是指针，可以是存下标</li>
</ul>
]]></content>
      <tags>
        <tag>课程</tag>
      </tags>
  </entry>
  <entry>
    <title>ICS 计算机系统</title>
    <url>/ComputerScience/%E8%AF%BE%E7%A8%8B/ICS%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="第一阶段-程序的表示-转换与链接"><a class="markdownIt-Anchor" href="#第一阶段-程序的表示-转换与链接"></a> 第一阶段 程序的表示、转换与链接</h1>
<pre><code>参考MOOC：NJU-1001625001
</code></pre>
<h2 id="10-计算机系统概述"><a class="markdownIt-Anchor" href="#10-计算机系统概述"></a> 1.0 计算机系统概述</h2>
<h3 id="13-程序开发和执行过程"><a class="markdownIt-Anchor" href="#13-程序开发和执行过程"></a> 1.3 程序开发和执行过程</h3>
<ol>
<li>hello.c程序用ascii文本表示</li>
<li>首先.c文件预处理为.i文件（把预处理指令翻译过来），然后.i文件编译成.s文件（汇编程序文本）,接着.s文件汇编成.o文件（二进制），与printf等函数的.o文件共同连接成可执行文件（二进制）</li>
<li>高级语言编写程序所需环境：（1）语言处理程序； （2）语言处理系统； （3）语言运行时的系统； （4）操作系统内核； （5）操作系统； （6）指令集体系结构； （7）人机接口</li>
</ol>
<h3 id="14-计算机系统层次结构"><a class="markdownIt-Anchor" href="#14-计算机系统层次结构"></a> 1.4 计算机系统层次结构</h3>
<ul>
<li>过程式语言：如何做； 非过程化语言：做什么；语言发展是不断抽象的过程</li>
<li>应用-&gt;算法-&gt;语言-&gt;操作系统-&gt;(软件)ISA指令集（硬件）-&gt;微体系、功能部件、电路和器件<br />
非预期结果是硬件层次造成的。上层是下层的抽象，下层是上层的实现，底层为上层提供支撑环境</li>
<li>题目：由机器语言编程的早期计算机系统中，没有ISA这一层次（F）；一直都有ISA，因此<strong>ISA是计算机体系层次中最重要的层次</strong>。<br />
<strong>ISA， Instruction Set Architecture（结构）规定了如何使用硬件，是可以执行的指令的集合</strong>，包括指令格式、操作种类及操作数的类型的规定…<br />
<strong>没有ISA，软件无法使用计算机硬件，一台计算机就不能成为“通用”计算机</strong></li>
<li>计算机组成必须能够实现ISA规定的功能；同一种ISA可以由不同的计算机（硬件）组成，如乘法指令用ALU或乘法器都可以实现</li>
<li>题目：有没有乘法指令是ISA考虑的问题，如何实现乘法指令是微体系结构考虑的问题</li>
</ul>
<h3 id="15-计算机系统基础学习目标"><a class="markdownIt-Anchor" href="#15-计算机系统基础学习目标"></a> 1.5 计算机系统基础学习目标</h3>
<ul>
<li>编写高效程序必须了解计算机底层结构</li>
<li>必须掌握并行程序设计技术和工具</li>
<li>课程目标：理解计算机如何生成和运行可执行文件</li>
<li>涉及层次：C语言设计层，ISA和汇编层，微体系结构和硬件层</li>
<li>第一部分 程序表示与转换；第二部分 执行控制流</li>
</ul>
<span id="more"></span>
<h2 id="20-数据表示和存储"><a class="markdownIt-Anchor" href="#20-数据表示和存储"></a> 2.0 数据表示和存储</h2>
<h3 id="20-错题"><a class="markdownIt-Anchor" href="#20-错题"></a> 2.0 错题</h3>
<ol>
<li>负整数转换无符号数。<strong>没有把负数转成补码！</strong><br />
![[…/Source/Photo/ICS/错题本/2 负有符号转无符号.png]]</li>
<li>大无符号数转带符号数。<strong>理解错误！-1取补码，各位取反再加1，就是全1！</strong><br />
![[…/Source/Photo/ICS/错题本/2 大无符号转带符号.png]]</li>
<li>无符号数和带符号数混合运算。<strong>和上题一样的错误，没有补码转换思维！</strong><br />
![[…/Source/Photo/ICS/错题本/2 无符号和带符号混合运算.png]]</li>
</ol>
<h3 id="21-编码和数制"><a class="markdownIt-Anchor" href="#21-编码和数制"></a> 2.1 编码和数制</h3>
<ul>
<li>数据在计算机中表示的三要素：
<ol>
<li>进位计数制（2 8 10 16）</li>
<li>定、浮点表示（小数）</li>
<li>如何用二进制编码（正负号：原码、补码、反码、移码）</li>
</ol>
</li>
</ul>
<h3 id="22-定点数的编码表示"><a class="markdownIt-Anchor" href="#22-定点数的编码表示"></a> 2.2 定点数的编码表示</h3>
<h4 id="221-定点数的编码表示"><a class="markdownIt-Anchor" href="#221-定点数的编码表示"></a> 2.2.1 定点数的编码表示</h4>
<ul>
<li>定点数：定点整数，定点小数，可以用于表示浮点数</li>
<li>原码：正号为0，负号为1；缺点：加减运算不统一，需要额外符号位，不利于硬件设计，a&lt;b时a-b困难</li>
<li>移码：一个数值加上一个偏置常数；便于浮点数加减运算、比较大小<br />
例如，补码和移码表示的两个浮点数：</li>
</ul>
<h4 id="222-模运算系统和补码表示"><a class="markdownIt-Anchor" href="#222-模运算系统和补码表示"></a> 2.2.2 模运算系统和补码表示</h4>
<ul>
<li>8是 -4对模12的补码，10+8 % 12 = 10-4（-4的模12补码为8）8+4=12</li>
<li>负数的补码是 模减去该负数的绝对值</li>
<li>补码 modular运算：+和-的统一</li>
<li>4位十进制数模运算：9828-1928 = 9828+(10^4-1928)=1 7900 = 7900(mod 10^4)；1928的补码8072（和为9999，末尾+1）</li>
<li>0100 0000 的8位二进制补码 1011 1111 + 1 = 1100 0000 <strong>（每一位取反，再加1）</strong>，也可以用2^8 - 0100 0000计算</li>
<li><strong>题目：补码位数为8，-1000b的补码表示是：1111 1000（别忽略前面四位！）</strong></li>
<li>运算器适合使用补码：运算器只有n位，所有运算结果都只能保留低n位，是一个模2^n的计算器</li>
<li><strong>补码的定义：X补 = 2^n + X。X是真值，X补是机器数</strong></li>
</ul>
<h4 id="223-补码和真值的对应关系"><a class="markdownIt-Anchor" href="#223-补码和真值的对应关系"></a> 2.2.3 补码和真值的对应关系</h4>
<ul>
<li>特殊数的补码
<ol>
<li>0的补码：0</li>
<li>-1的补码：n个1（2^n - 01）</li>
<li>-2<sup>n-1的补码：10…0（n-1个0，相当于2</sup>n - 2^n-1）</li>
</ol>
</li>
<li><strong>题目：32位机器中，int类型-1的机器数是：32位1</strong> 32位机器int、short、char分别占32位、16位、8位</li>
<li><strong>变形补码：</strong> 4’s comlement两个符号位，用于存放可能溢出的中间结果<br />
![[…/Source/Photo/ICS/课程/变形补码.png]]</li>
</ul>
<p>例如，8的补码为1000，用四位补码则符号位为1（负数）</p>
<ul>
<li>例如：8位机器123和-123的补码<br />
123: 0111 1011<br />
-123: 1000 0101（简便方法，从又到左除第一个1以外全部取反）</li>
<li>快速求补码真值：
<ol>
<li>普通求法：-1，除了符号位按位取反，然后B转D</li>
<li>快速求法：-N<em>2^n-1 + N</em>2^n-2（原来是公式求法，难算，用上面的办法）<br />
例如：1101 0110<br />
算法1：1010 1010 = -(32+8+2)<br />
算法2: -128+64+16 +4+2 = -42（好像不是很快^ ^）</li>
</ol>
</li>
</ul>
<h3 id="23-c语言中的整数"><a class="markdownIt-Anchor" href="#23-c语言中的整数"></a> 2.3 C语言中的整数</h3>
<h4 id="231-无符号整数与带符号整数"><a class="markdownIt-Anchor" href="#231-无符号整数与带符号整数"></a> 2.3.1 无符号整数与带符号整数</h4>
<ul>
<li>两种位串排序方式
<ol>
<li>高位到低位 从左到右</li>
<li>高位到低位 从右到左</li>
</ol>
<ul>
<li>因此用LSB表示最低有效位，MSB为最高有效位</li>
</ul>
</li>
<li>无符号整数：不带符号位，多一个MSB；<br />
如16位无符号整数最大可以表示的数是2^16=65536<br />
用于不出现负值的场合，如地址运算、编号表示</li>
<li>补码的好处：
<ol>
<li>模运算系统，加减运算统一</li>
<li>0可以唯一表示，没有正负号</li>
<li>比原码多表示一个最小负数（-128~127）</li>
</ol>
</li>
</ul>
<h4 id="232-c语言程序中的整数举例"><a class="markdownIt-Anchor" href="#232-c语言程序中的整数举例"></a> 2.3.2 C语言程序中的整数举例</h4>
<p>(unsigned) int (short / long)</p>
<ul>
<li>如果同时有无符号和有符号，会把有符号强制转换成无符号数<br />
如 -1 &lt; 0(unsigned）值为false，因为把-1转成1111了<br />
如 2147 4836 47 &gt; -2147 4836 37 - 1 值为false，因为后面的有一个符号位，转换后相当于前面+1的真值<br />
![[…/Source/Photo/ICS/课程/unsigned.png]]</li>
<li><strong>题目：已知2147483647为2^31-1, C语言中的关系表达式&quot;2147 4836 47U &gt; -2147 4836 47-1&quot;的结果是</strong> 假，前后都会转换成unsigned</li>
<li>int x = -1<br />
%u 4294 9672 95，%d -1</li>
</ul>
<h3 id="24-浮点数的编码表示"><a class="markdownIt-Anchor" href="#24-浮点数的编码表示"></a> 2.4 浮点数的编码表示</h3>
<h4 id="241-浮点数的表示范围"><a class="markdownIt-Anchor" href="#241-浮点数的表示范围"></a> 2.4.1 浮点数的表示范围</h4>
<ul>
<li>规格化形式：小数点前只有一位非0数，小数点后第一位总是为1（所以经常省略，用23个二进制位表示24位尾数）</li>
<li>32位浮点数格式的规格化数表示范围<br />
0位为符号位S，1<sub>8位用8位**移码**表示阶码E(偏置常数128)；9</sub>31位用24位二进制<strong>原码</strong>表示尾数M<br />
+/- 0.1xxx(M 23位) * 2^E<br />
max: (1-2^-24) * 2^127(偏置128+127=255)<br />
min: (1/2) * 2^-128(128-128=0)</li>
<li>由于<strong>原码对称性</strong>，浮点数表示范围关于<strong>原点对称</strong></li>
<li><strong>题目：若浮点数结果位于上溢区，则说明其值大于最大可表示数</strong> false，大于max或小于min</li>
<li>机器0：尾数为0或落在下溢区的数(下溢区太小取近似为0)</li>
<li>早期，不同体系结构计算机所用的浮点数表示格式是不一样的，在不同计算机之间进行程序移植时，需要考虑浮点数格式之间的转换。</li>
</ul>
<h4 id="242-ieee-754标准的规格化数"><a class="markdownIt-Anchor" href="#242-ieee-754标准的规格化数"></a> 2.4.2 IEEE 754标准的规格化数</h4>
<ul>
<li>阶码没有全0和全1，只有00…01和11…10 (-126~127)</li>
<li>S(single)P: (-1)^S * (1+Significand) * 2(Exponent - 127)(用127那么最大254-127=127范围更大，用128就成了最大为126)</li>
<li>D(double)P: Exponent - 1023</li>
<li><strong>例子：float变量x机器数为BEE00000H，求x的真值</strong><br />
1| 011 11101| 110 0000 0000 0000 0000<br />
= (-1)^S * (1+Significand) * 2^Exponent-127
<ul>
<li>阶码：0111 1101B = 125</li>
<li>阶码的值：125-127=-2</li>
<li>尾数部分的值：<br />
1 + 1* 2^-1 + 1* 2^-2 + 0* 2^-3…<br />
= 1 + 2^-1 + 2^-2<br />
= 1.75</li>
<li>真值：-1.75 * 2^-2 = -0.4375</li>
</ul>
</li>
</ul>
<h4 id="243-ieee-754特殊数规格化以外"><a class="markdownIt-Anchor" href="#243-ieee-754特殊数规格化以外"></a> 2.4.3 IEEE 754特殊数（规格化以外）</h4>
<ul>
<li>0的机器数<br />
<strong>符号 阶码全0 尾数全0</strong></li>
<li>正负无穷+/-inf（浮点数除以0的结果）<br />
<strong>符号 阶码全1（255） 尾数全0</strong><br />
5.0 / 0 = +inf</li>
<li>非数NaN（如-4.0开根，不存在）<br />
<strong>阶码全1 尾数全0</strong></li>
<li>非规格化数<br />
最小规格化数：2^-126（0.00…01）<br />
在 0~最小规格化数 间就是非规格化数<br />
<strong>阶码全0 尾数非0</strong><br />
当输入数不可表示，机器将其转换成最近的可表示数</li>
<li><strong>题目：从键盘上输入61.420001赋值给一个float型变量x，再打印输出x时，其结果为61.420002。以下描述的是由此推断出的一些结论，其中哪些是正确的？</strong><br />
<strong>由此说明能精确表示的float型数据的有效位数最多为7位。为什么，因为61.42000(7位)是精确的吗？</strong><br />
由此说明32位IEEE 754单浮点数格式无法精确表示61.420001，可以精确表示61.420002。</li>
</ul>
<h3 id="25-非数值数据的编码表示"><a class="markdownIt-Anchor" href="#25-非数值数据的编码表示"></a> 2.5 非数值数据的编码表示</h3>
<ul>
<li>非数值数据：逻辑数据、音乐</li>
<li>逻辑数据
<ul>
<li>表示：用1位表示。n位可以表示n个逻辑数据</li>
<li>运算：按位进行。按位与、或，逻辑左、右移</li>
<li>识别：和数据一样是01序列，计算机靠指令识别</li>
</ul>
</li>
<li>西文字符编码
<ul>
<li>7位（256个）ASCII码</li>
<li>操作：传送、比较</li>
<li>0~9：48D, 30H~39H</li>
<li>A~Z：65D, 41H</li>
<li>a~Z：97D, 61H</li>
<li>空格：20H</li>
<li>回车：0DH, 0AH</li>
</ul>
</li>
<li>汉字国际字符编码
<ul>
<li>输入码：用于输入（输入法，拼音、双拼）</li>
<li>内码：在系统中存储、查找、传送</li>
<li>点阵\轮廓(输出码)：用于输出</li>
<li><strong>西文没有输入码，有内码和点阵、轮廓码</strong></li>
</ul>
</li>
<li>GB2312-80字符集
<ul>
<li>区位码和国标码：<br />
区号位号各加上32(20H)即为国标码<br />
行号为区号，列号为位号，各占7位，共14位</li>
<li>必须用两个字节表示，2B = 16bits，2^16 = 65536 &gt; 6万汉字</li>
<li>内码表示：国标码最高位设为1，与ASCII区分</li>
</ul>
</li>
<li>多媒体信息（图形、图像、音频、视频）
<ul>
<li>MIDI：音乐信息</li>
</ul>
</li>
</ul>
<h3 id="26-数据宽度和存储容量的单位"><a class="markdownIt-Anchor" href="#26-数据宽度和存储容量的单位"></a> 2.6 数据宽度和存储容量的单位</h3>
<ul>
<li>bits, Byte, word(字，与字长不同，如IA32字为16b，字长为32b)</li>
<li>Byte：存储器按字节编址，需要表示最低、最高有效字节(LSB、MSB)</li>
<li>字长：<strong>定点数据通路宽度</strong>，等于CPU内部总线宽度、运算器位数、通用寄存器宽度</li>
<li>字： <strong>被处理信息的单位</strong></li>
<li>不同机器表示同一类型的数据可能宽度不同<br />
如char* 32位4B，64位8B</li>
</ul>
<h3 id="27-数据存储时的字节排列大小端"><a class="markdownIt-Anchor" href="#27-数据存储时的字节排列大小端"></a> 2.7 数据存储时的字节排列（大小端）</h3>
<ul>
<li>int型变量x=-10，存放地址为100，机器数为FF FF FF F6，占4单元<br />
Q1：变量地址是最大地址还是最小地址？
<ul>
<li>最小地址，即x存放在100~103中<br />
Q2：多个字节在存储单元中存放顺序如何？</li>
<li>大端法、小端法<br />
大端法(顺序）：MSB所在地址是数的地址，100 101 102 103，取100<br />
小端法：LSB所在地址是数的地址，103 102 101 100，取100<br />
[photo]</li>
<li><strong>大小端表示的数据内容是一样的</strong>，只不过存放顺序不同，读取时会处理成一样的数据</li>
</ul>
</li>
</ul>
<h2 id="30-运算电路基础"><a class="markdownIt-Anchor" href="#30-运算电路基础"></a> 3.0 运算电路基础</h2>
<h3 id="30-错题"><a class="markdownIt-Anchor" href="#30-错题"></a> 3.0 错题</h3>
<ol>
<li><strong>CPU基本运算部件是ALU，不是加法器</strong><br />
![[…/Source/Photo/ICS/错题本/3 基本运算部件ALU.png]]</li>
<li>异号补码运算，真值肯定不会超过可表示范围，<strong>不会产生溢出OF信号！</strong><br />
![[…/Source/Photo/ICS/错题本/3 异号补码运算.png]]</li>
</ol>
<h3 id="31-数字逻辑电路基础"><a class="markdownIt-Anchor" href="#31-数字逻辑电路基础"></a> 3.1 数字逻辑电路基础</h3>
<h4 id="311-布尔代数和基本逻辑电路"><a class="markdownIt-Anchor" href="#311-布尔代数和基本逻辑电路"></a> 3.1.1 布尔代数和基本逻辑电路</h4>
<ul>
<li>布尔代数：关于0和1的数学运算体系</li>
<li>真值表：输入、输出之间的关系</li>
<li>与：^/* ，或：v/+</li>
<li>n位逻辑运算：按位与、或，用n个门电路实现</li>
<li>门电路分类
<ul>
<li>组合逻辑电路：没有存储功能，输出仅仅取决于当前输入</li>
<li>时序逻辑电路：有存储功能，不仅依赖当前输入，还依赖存储单元当前状态</li>
<li>组合逻辑部件（功能部件）：译码器、编码器、多路选择器、加法器</li>
</ul>
</li>
<li>如何实现功能部件：
<ol>
<li>真值表</li>
<li>逻辑表达式</li>
<li>电路</li>
</ol>
</li>
<li>多路选择器（MUX）</li>
</ul>
<h4 id="312-无符号数加法器"><a class="markdownIt-Anchor" href="#312-无符号数加法器"></a> 3.1.2 无符号数加法器</h4>
<ul>
<li>一位加法器 全加器：<br />
F = A异或B异或Cin（低位进位）<br />
Cout = AB + ACin + BCin</li>
<li><strong>题目：关于全加器的叙述，错误的是。全加器只能由与门、或门和异或门实现</strong></li>
<li>n位加法器：n个全加器，每个Cout接入高位的Cin</li>
<li><strong>重要认识：加法器由逻辑部件实现，而其他运算部件都基于加法器和逻辑运算实现；因此，所有运算都是基于0和1以及逻辑运算实现的。</strong></li>
<li><strong>题目：关于n位加法器，错误的是。n位加法器的输出包括一个n位的数和一个n位的进位Cout。</strong> 只有一个Cout</li>
<li>n位带标志加法器
<ul>
<li>n位加法器无法用于两个带符号整数（补码）相加，无法判断溢出</li>
<li>程序经常需要比较大小，通过做减法得到的标志信息来判断</li>
<li>OF溢出标志：Cn异或Cn-1</li>
<li>SF符号标志：Fn-1</li>
<li>ZF零标志：F=0时为1（或非所有F）</li>
<li>CF进位、借位标志：Cout异或Cin</li>
</ul>
</li>
<li><strong>n位带标志加法器和n位加法器一样可以实现无符号加运算，输入也完全一样，带标志多输出了几个标志信息</strong></li>
</ul>
<h4 id="313-整数加减运算器和alu"><a class="markdownIt-Anchor" href="#313-整数加减运算器和alu"></a> 3.1.3 整数加/减运算器和ALU</h4>
<ul>
<li>n位整数加减运算器：计算机需要电路可以表示x, y的补码以及计算x+/-y的补码<br />
多路选择器选择原码/各位取反输出（多一路Sub输入决定加法、减法（补码））：实现了带/无符号整数加、减</li>
<li><strong>题目：以下关于整数加/减运算器的叙述中，错误的是：整数加/减运算器不可以实现两个无符号数的加/减运算。</strong>
<ul>
<li>整数加/减运算器的输入为两个运算的操作数和一位控制信号sub。</li>
<li>整数加/减运算器通过输出的标志信息确定运算结果是否正确。</li>
</ul>
</li>
<li>ALU
<ul>
<li>进行基本算术、逻辑运算</li>
<li>核心电路是带标志加法器</li>
<li>输出除了和、差，还有标志信息</li>
<li>有一个操作控制端（分配器）用来决定ALU执行的处理功能</li>
</ul>
</li>
<li><strong>题目：以下关于ALU的叙述中，错误的是：ALU可以实现加、减、乘、除运算。</strong> 只有加减运算</li>
</ul>
<h3 id="32-从c表达式到逻辑电路"><a class="markdownIt-Anchor" href="#32-从c表达式到逻辑电路"></a> 3.2 从C表达式到逻辑电路</h3>
<ul>
<li>基本数据类型
<ul>
<li>整数：无符号、带符号</li>
<li>浮点数</li>
<li>位串、字符串</li>
</ul>
</li>
<li>基本运算类型
<ul>
<li>关系运算：比较大小，实际上是减法</li>
<li>按位运算 | &amp; ~ ^</li>
<li>逻辑运算</li>
<li>移位运算</li>
<li>扩展和截断</li>
</ul>
</li>
<li><strong>例如：y=(x&gt;&gt;2)+k如何实现</strong>
<ol>
<li>转换为运算指令序列
<ul>
<li>sarw $2, %ax;  x&gt;&gt;2</li>
<li>addw %bx, %ax;  (x&gt;&gt;2) + k</li>
</ul>
</li>
<li>计算机直接执行指令完成运算
<ul>
<li>控制器对指令译码，产生控制信号送运算电路</li>
</ul>
</li>
<li>操作数在运算电路中运算
<ul>
<li>sarw $2, &amp;ax：将操作数“2”和“R[ax]”送移位器运算</li>
<li>addw %bx, %ax：将R[ax]和R[bx]送整数加减器中运算</li>
<li>移位器、整数加减运算器由逻辑门电路构成</li>
</ul>
</li>
<li><strong>高级语言执行指令进行两次转换：1. 转换成指令；2. 指令在电路上执行</strong></li>
</ol>
</li>
<li>高级语言涉及的运算<br />
![[…/Source/Photo/ICS/课程/3.2 数据的运算.png]]</li>
<li><strong>题目：指令系统中有专门的浮点数左移和右移运算指令。（错误）</strong> 只有整数有左右移运算</li>
</ul>
<h3 id="33-c语言中的各类运算"><a class="markdownIt-Anchor" href="#33-c语言中的各类运算"></a> 3.3 C语言中的各类运算</h3>
<ul>
<li>算术运算</li>
<li>按位运算
<ul>
<li>掩码或其他处理</li>
</ul>
</li>
<li>移位运算
<ul>
<li>提取部分信息</li>
<li>扩大(&lt;&lt;)、缩小(&gt;&gt;)2^n倍</li>
<li>移位操作可能溢出、丢失信息</li>
<li><strong>题目：8位带符号整数的补码表示为1001 0101，右移一位是：1100 1010</strong> 最高位的1也要右移，并且保留符号位</li>
</ul>
</li>
<li>移位运算、按位运算举例
<ol>
<li>x最高有效字节不变，其余全0：右移到只剩下八位，再左移回来</li>
<li>x最低有效字节不变，其余全0：x和0xFF按位与</li>
<li>x最低有效字节变0，其余取反：用1异或x（取反），右移8位再左移回来</li>
<li>x最低有效字节变1，其余不变：x和0xFF按位或</li>
</ol>
</li>
<li>逻辑运算
<ul>
<li>与按位运算的区别：运算的是整体（而不是按位），结果返回一个逻辑值（而不是位串）</li>
</ul>
</li>
<li>位拓展和位截断运算
<ul>
<li>拓展：短转长
<ul>
<li>无符号：补0</li>
<li>有符号：补符号</li>
</ul>
</li>
<li>截断：长转短：
<ul>
<li>高位丢弃（可能溢出）</li>
</ul>
</li>
<li>例子：<br />
![[…/Source/Photo/ICS/课程/3.3 位拓展举例.png]]<br />
![[…/Source/Photo/ICS/课程/3.3 位截断溢出举例.png]]<br />
溢出导致正数32768变成负的(在short类型最高（符号）位上)</li>
</ul>
</li>
</ul>
<h3 id="34-整数加减运算"><a class="markdownIt-Anchor" href="#34-整数加减运算"></a> 3.4 整数加减运算</h3>
<h4 id="341-加减运算生成的标志信息"><a class="markdownIt-Anchor" href="#341-加减运算生成的标志信息"></a> 3.4.1 加减运算生成的标志信息</h4>
<ul>
<li>加减运算部件
<ul>
<li>所有运算都基于此加法器</li>
<li>加法器不知道运算的数带不带符号</li>
<li>加法器不判定对错，只输出低n位</li>
</ul>
</li>
<li>条件标志位（条件码CC）
<ul>
<li>被记录到专门的寄存器（程序、状态字寄存器或标志寄存器）中</li>
<li><strong>题目：假定整数加/减运算器的两个输入端分别是A和B，以下关于整数加/减运算器的叙述中，错误的是。不管是带符号整数还是无符号整数，做减运算时，只要借位标志CF=1，就说明有借位，即A小于B。</strong></li>
<li><strong>题目：以下关于n位带标志加法器的叙述中，错误的是。进位标志CF等于加法器的进位输出Cout。</strong> 同时也表示借位
<ul>
<li>正确项：当两个加数的符号相同且不同于和的符号，则溢出标志OF=1。符号标志SF与和的符号位Fn-1相同。在整数加/减运算器中的加法器是n位带标志加法器。</li>
</ul>
</li>
<li>举例<br />
![[…/Source/Photo/ICS/课程/3.4 整数加法运算举例.png]]</li>
</ul>
</li>
</ul>
<h4 id="342-加减运算溢出公式及举例"><a class="markdownIt-Anchor" href="#342-加减运算溢出公式及举例"></a> 3.4.2 加减运算溢出公式及举例</h4>
<ul>
<li>判断无符号数相加有没有发生溢出的程序
<ul>
<li>发生溢出时，一定满足1. result&lt;x &amp;&amp; result&lt;y (x+y-2^n&gt;=x, y&gt;=2^n明显错误)</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int uadd_ok(unsigned x, unsigned y)</span><br><span class="line">&#123;</span><br><span class="line">    unsigned sum = x+y;</span><br><span class="line">    return sum&gt;=x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>判断带符号数相加有没有发生溢出</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int tadd_ok(int x, int y)</span><br><span class="line">&#123;</span><br><span class="line">    int sum = x+y;</span><br><span class="line">    int neg_over = x&lt;0 &amp;&amp; y&lt;0 &amp;&amp; sum&gt;= 0</span><br><span class="line">    int pos_over = x&gt;=0 &amp;&amp; y&gt;= 0 &amp;&amp; sum&lt;0</span><br><span class="line">    return !neg_over &amp;&amp; !pos_over;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>上面的函数改成判断相减有没有溢出</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int tsub_ok(int x, int y)</span><br><span class="line">&#123;</span><br><span class="line">    return tadd_ok(x, -y)</span><br><span class="line">    // 当x=0，y=0x8000 0000时错误,最大负数不能表示</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="40-乘除运算及浮点数运算"><a class="markdownIt-Anchor" href="#40-乘除运算及浮点数运算"></a> 4.0 乘除运算及浮点数运算</h2>
<h3 id="41-整数乘法运算"><a class="markdownIt-Anchor" href="#41-整数乘法运算"></a> 4.1 整数乘法运算</h3>
<ul>
<li>乘法运算，计算机只取低n位
<ul>
<li>int类型乘法不一定大于0（溢出）</li>
<li>float类型乘法一定大于0</li>
</ul>
</li>
<li>如何判断返回值z正确：<strong>!x || z/x==y</strong></li>
<li>编译器怎样判断不溢出：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>&lt;</mo><mo>=</mo><mi>x</mi><mo>∗</mo><mi>y</mi><mo>&lt;</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">-2^{n-1} &lt;= x*y &lt; 2^{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> ，即高n位为全0或全1，并且低于低n位（int类型占用bits）的最高位；乘积高n+1位为全0/1
<ul>
<li>若为unsigned类型，高n位全0就没有溢出</li>
</ul>
</li>
<li><strong>题目：以下是关于整数乘运算（z=x*y）结果溢出判断规则的描述，其中错误的是。如果是C语言程序员，可以采用&quot;若(y!=0 || x==z/y)，则结果z不溢出&quot;的规则。</strong> !x || z/x==y，题目中y!=0错误</li>
<li>无符号和带符号乘法器的关系
<ul>
<li>不同的是高n位（因此可以用无符号乘法器实现带符号乘法，但此时不能靠编译器判断了）</li>
</ul>
</li>
<li>硬件不判断溢出，只保留2n位乘积
<ul>
<li>如果程序和编译器都没有溢出处理，就会出问题</li>
<li>指令：分为无符号、带符号乘指令</li>
</ul>
</li>
<li><strong>例子：malloc(count*sizeof(int))，若count很大，会溢出，堆中大量数据会被破坏（数组大小不够但是程序强行写入）</strong></li>
<li>乘法运算需要多个时钟周期，而移位、加减法只需要一个或更少的时钟周期，因此<strong>编译器处理变量与常数相乘时，常常把乘法优化成移位、加减的组合运算</strong>
<ul>
<li>例如x*20，20 = 16+4 = 2^4 + 2^2，可以转化成（x&lt;&lt;4)+(x&lt;&lt;2)（溢出和乘法运算相同）</li>
</ul>
</li>
</ul>
<h3 id="42-整数除法运算"><a class="markdownIt-Anchor" href="#42-整数除法运算"></a> 4.2 整数除法运算</h3>
<ul>
<li>带符号整数，n位整数除以n位整数，<strong>只有-2^(n-1)/-1 = 2^(n-1)会溢出</strong>（正数表示范围比负数小）</li>
<li>整数除法舍入：整数向下取（floor），负数向上取（ceiling）</li>
<li>整除0：无法表示，发生异常；操作系统异常处理</li>
<li>0x80000000 / -1 和 / b(b=-1)，后者检测到异常（floating point exception），前者不会，<strong>因为-1被编译器优化为neg（取负）</strong></li>
<li>除法指令比乘法指令还要长（30+时钟周期），无法用流水线实现，<strong>尽量别做除法（编译器优化neg的原因）</strong>
<ul>
<li>可以整除，用&gt;&gt;右移计算</li>
<li>不能整除，右移的位有非0，做相应处理</li>
</ul>
</li>
<li>不能整除，朝零舍入（截断）
<ul>
<li>无符号、带符号正整数：移出位直接丢弃</li>
<li>带符号负整数：加偏移量（2^k-1），再右移、低位截断（k是右移位数）</li>
</ul>
</li>
<li>举例<br />
![[…/Source/Photo/ICS/课程/4.2 整数除法运算.png]]</li>
</ul>
<h3 id="43-浮点数运算"><a class="markdownIt-Anchor" href="#43-浮点数运算"></a> 4.3 浮点数运算</h3>
<h4 id="431-浮点数加减运算"><a class="markdownIt-Anchor" href="#431-浮点数加减运算"></a> 4.3.1 浮点数加减运算</h4>
<ul>
<li>若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>=</mo><msub><mi>M</mi><mi>a</mi></msub><mo>∗</mo><msup><mn>2</mn><msub><mi>E</mi><mi>a</mi></msub></msup><mo separator="true">,</mo><mi>B</mi><mo>=</mo><msub><mi>M</mi><mi>b</mi></msub><mo>∗</mo><msup><mn>2</mn><msub><mi>E</mi><mi>b</mi></msub></msup></mrow><annotation encoding="application/x-tex">A = M_a*2^{E_a}, B = M_b*2^{E_b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.035771em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>, 则<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>+</mo><mi>B</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>M</mi><mi>a</mi></msub><mo>+</mo><msub><mi>M</mi><mi>b</mi></msub><mo>∗</mo><msup><mn>2</mn><mrow><mo>−</mo><mo stretchy="false">(</mo><msub><mi>E</mi><mi>a</mi></msub><mo>−</mo><msub><mi>E</mi><mi>b</mi></msub><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo>∗</mo><msup><mn>2</mn><msub><mi>E</mi><mi>a</mi></msub></msup><mo stretchy="false">(</mo><msub><mi>E</mi><mi>a</mi></msub><mo>&gt;</mo><mo>=</mo><msub><mi>E</mi><mi>b</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">A+B = (M_a+M_b*2^{-(E_a-E_b)})*2^{E_a}(E_a&gt;=E_b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，阶小的数尾数右移<br />
![[…/Source/Photo/ICS/课程/4.3.1 浮点数四则运算原理.png]]</li>
<li>可能情况：
<ul>
<li>阶码上溢：正指数超过最大允许值，+/-inf/溢出（SP最大指数127）</li>
<li>阶码下溢 ：+/-0（SP最小指数-126）</li>
<li>尾数溢出：最高有效位有进位(1.5+1.5=3(11B))，右规（右移1位，再加1）<strong>尾数溢出，结果不一定溢出</strong></li>
<li>非规格化尾数：数值部分高位为0(<a href="http://0.xxx">0.xxx</a>)，左规</li>
<li>右规或对阶（使阶码相等）时，右端有效位丢失：尾数舍入，在运算过程添加保护位（把可能丢弃的位保留，最后再舍入）</li>
</ul>
</li>
<li>IEEE 754五种异常情况
<ul>
<li>无效运算
<ul>
<li>运算时有一个非有限数</li>
<li>结果无效</li>
</ul>
</li>
<li>除以0，无穷大</li>
<li>数太大，阶上溢</li>
<li>数太小</li>
<li>结果不精确（舍入引起），如1/3,1/10</li>
</ul>
</li>
<li><strong>例子：除0，int类型发生错误，double浮点型有结果（正负无穷大）</strong></li>
<li>例子：1.123*10^5 + 2.560*10^2
<ul>
<li>(1.123+<strong>0.00256</strong>)*10^5</li>
<li>1.12556舍入56，得1.126*10^5</li>
<li>IEEE 754会保留右移尾数的最高位，最后才舍入</li>
</ul>
</li>
<li>基本要点
<ol>
<li>求阶差</li>
<li>对阶（保留附加位，即最高位1）</li>
<li>尾数加减</li>
<li>规格化：
<ul>
<li>尾数高位为0，左规</li>
<li>尾数最高位有进位，右规</li>
<li>阶码溢出异常处理：溢出（上溢）或0（下溢）</li>
</ul>
</li>
<li>尾数比规定位数长（或有附加位），舍入</li>
<li>运算结果尾数是0，将阶码设置成0（只有阶码和尾数全为0才是0）</li>
</ol>
</li>
<li><strong>例子：0.5+（-0.4375）</strong>
<ul>
<li>注意机器中用2进制计算，因此0.5=1.0B*2^-1, -0.4375=-1.110B*2^-2(0.25+0.0625)</li>
<li>对阶：0.111*2^-2 -&gt; 1.111*2^-1</li>
<li>加减：(1.000-0.111)*2^-1</li>
<li>左规：1.0*2^-4</li>
<li>判断溢出：无溢出</li>
</ul>
</li>
<li><strong>（没懂）问题：为什么IEEE 754加减运算右规最多只需一次</strong> 因为最大的尾数相加整数部分最多有两位（和的尾数不超过4）</li>
</ul>
<h4 id="432-浮点数运算的精度"><a class="markdownIt-Anchor" href="#432-浮点数运算的精度"></a> 4.3.2 浮点数运算的精度</h4>
<pre><code>&quot;Floating Point numbers are like piles of sand; every time you move one 
 you lose a little sand, but you pick up a little dirt.&quot;
</code></pre>
<ul>
<li>如何使得失去的“沙”和捡回的“dirt”少一点？**增加附加位！**多少位合适？<strong>没有准确答案</strong>；<br />
IEEE 754规定中间结果需要在右边加两个附加位</li>
<li>Guard（保护位）：significand右边的位</li>
<li>Round（舍入位）：保护位右边的位</li>
<li>附加位的作用：用来保护对阶时右移的位或运算的中间结果</li>
<li>附加位的处理：1）左规时被移到significand；2）作为舍入的依据</li>
<li>例子：2.3400+0.0253=2.3653，若没有舍入位3，则依据5舍入，结果为2.36；而有3作为依据，则结果为2.37</li>
<li>IEEE舍入标准（4种）：
<ol>
<li>就近舍入（0舍1入）<strong>精度最高</strong>
<ul>
<li>舍入数大于中间数（01）：末位加1</li>
<li>舍入数小于中间数（11）：截断、丢弃</li>
<li>相等（10）：最近偶数</li>
</ul>
</li>
<li>朝+/-inf舍入；朝0舍入</li>
</ol>
</li>
<li>float类型和double类型
<ul>
<li>float范围：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3.4</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>38</mn></msup></mrow><annotation encoding="application/x-tex">3.4 * 10^{38}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">.</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span></span></li>
<li>double范围：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1.8</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>308</mn></msup></mrow><annotation encoding="application/x-tex">1.8 * 10^{308}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">0</span><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span></span></li>
<li>float类型可表示7个十进制有效位</li>
<li>int转float可能舍入丢失精度，转double（52+1位表示）不会；但double转int或float会溢出</li>
</ul>
</li>
<li>**浮点数不满足结合律：**大数与小数对阶，小数全部移位移没了</li>
</ul>
<h4 id="433-浮点数运算精度举例"><a class="markdownIt-Anchor" href="#433-浮点数运算精度举例"></a> 4.3.3 浮点数运算精度举例</h4>
<ul>
<li>96年Ariana5火箭爆炸，5亿美元
<ul>
<li>原因：64位float转16位int，溢出</li>
</ul>
</li>
<li>91年海湾战争，爱国者导弹定位错误
<ul>
<li>软件时钟浮点数精度问题，0.1的机器数是无限循环序列，约等于9.54*10^-8；飞毛腿导弹连续工作100小时，误差了0.343秒，2000m/sec，误差为二者相乘687米</li>
</ul>
</li>
<li>用32位定点小数表示0.1，比float精度高64倍</li>
<li><strong>用float相乘比直接把两个二进制数相乘要慢</strong>用确定小数常量效率更高</li>
</ul>
<h2 id="第一阶段拾遗"><a class="markdownIt-Anchor" href="#第一阶段拾遗"></a> 第一阶段拾遗</h2>
<ol>
<li>ISO C90标准下, 在32位系统上以下C表达式的结果是什么?<br />
<code>-2147483648 &lt; 2147483647</code>, false(与事实不符)!Why?
<ul>
<li><strong>C语言编译器将<code>2147483648==pow（2，31）</code>看成无符号整型</strong>，机器数为<code>0x8000 0000</code>，因此表达式是false<br />
<code>int i = -2147483648;i &lt; 2147483647</code>，true!Why?</li>
<li>这次编译器把两边的数都看做带符号数，负数一定小于正数</li>
</ul>
</li>
<li>对于任何int型变量x和y, <code>(x&gt;y) == (-x&lt;-y)</code> 总成立吗?<br />
当<code>x=-2147483648</code>, <code>y任意(除-2147483648外)</code>时不成立, Why?
<ul>
<li>x为最小负数时，表示为<code>100...000</code>，这时-x取补码仍然是最小负数；此时无论y取什么值，等式右边恒成立，左边恒不成立</li>
</ul>
</li>
<li>下面的代码<br />
打印结果是什么? <code>d=0, x=1 072 693 248</code>, Why?</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// p1.c</span></span><br><span class="line"><span class="type">double</span> d;</span><br><span class="line"><span class="type">void</span> <span class="title function_">p1</span><span class="params">( )</span></span><br><span class="line">&#123;</span><br><span class="line">    d=<span class="number">1.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="type">int</span> d=<span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> x=<span class="number">200</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    p1( );</span><br><span class="line">    <span class="built_in">printf</span> (“d=%d, x=%d\n”, d, x );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在p1中，d变成了double类型，占8个字节；而在全局变量里d和x各占4字节，在d转成浮点数的过程中发生了溢出，而溢出的值影响到了后面的x。<br />
<code>(double)1.0D = 0000 0000 0000 F03FH, 1 072 693 248D = 3f f0 00 00H</code></li>
</ul>
<ol start="4">
<li>float类型机器数和真值转换
<ul>
<li>机器数转真值
<ol>
<li><code>1| 011 11101| 110 0000 0000 0000 0000</code>先划分符号位、阶码和尾数</li>
<li>阶码转10进制，减去127，<code>127-2-127 = -2</code></li>
<li>尾数转10进制，记得加1，<code>0.5+0.25+1 = 1.75</code></li>
<li>真值 = 尾数 * 2^阶码，<code>-1.75 * 2^-2 = -0.4375</code></li>
</ol>
</li>
<li>真值转机器数
<ol>
<li><code>24.678</code>转二进制，并划分整数部分和小数部分</li>
<li><code>1 1000.101</code>整数部分用科学计数法表示<code>1.1000 101 * 2^4</code></li>
<li>计算阶码，<code>4+127=3+128</code></li>
<li>小数部分就是尾数，照抄，<code>0| 100 00011| 100 0101 0000 0000 0000</code></li>
</ol>
</li>
</ul>
</li>
</ol>
<hr />
<h1 id="第二阶段-程序的执行和存储访问"><a class="markdownIt-Anchor" href="#第二阶段-程序的执行和存储访问"></a> 第二阶段 程序的执行和存储访问</h1>
<pre><code>参考MOOC：NJU-1001964032
</code></pre>
<h2 id="10-程序执行概述"><a class="markdownIt-Anchor" href="#10-程序执行概述"></a> 1.0 程序执行概述</h2>
<h3 id="10-错题"><a class="markdownIt-Anchor" href="#10-错题"></a> 1.0 错题</h3>
<ol>
<li>
<p>CPU中控制器的功能是（ ）。<br />
B. 完成指令译码，并产生操作控制信号</p>
</li>
<li>
<p>冯·诺依曼计算机中指令和数据均以二进制形式存放在存储器中，CPU依据（ ）来区分它们。<br />
B. 指令和数据的访问时点不同</p>
</li>
<li>
<p>下列寄存器中，用户可见的（即：机器级代码程序员能感觉其存在的）寄存器是（ ）。<br />
D. 程序计数器（PC）<br />
程序计数器（PC）是用户可见的寄存器。在汇编语言编程中，程序员可以直接操作或引用程序计数器，例如通过跳转（jump）指令来改变程序的执行流程。</p>
</li>
<li>
<p>下面是有关CPU中部分部件的描述，其中错误的是（ ）。<br />
B. IR称为指令寄存器，用来存放当前指令的操作码<br />
这个描述是错误的。IR（Instruction Register）确实是用来存放当前正在执行的指令，但它不仅包含操作码（opcode），还可能包含操作数（operand）或其他指令信息。</p>
</li>
<li>
<p>下列有关程序计数器PC的叙述中，错误的是（ ）。 ‎ ‌ ‎<br />
A. 指令顺序执行时，PC的值总是自动加1<br />
程序计数器（PC）的值在指令顺序执行时通常会增加，但增加的量取决于当前执行的指令的长度，而不是固定的1。<br />
每条指令执行后，PC的值都会被改变，否则会永远执行某一条指令。</p>
</li>
<li>
<p>机器主频的倒数（一个节拍）等于（   ）。<br />
D、时钟周期<br />
时钟周期是CPU工作的最小时间单位，也称节拍脉冲或T周期，其值等于机器主频的倒数。</p>
</li>
<li>
<p>任何指令周期的第一个阶段都是取指令阶段，需要访问存储器。</p>
</li>
</ol>
<h3 id="11-程序和指令的关系"><a class="markdownIt-Anchor" href="#11-程序和指令的关系"></a> 1.1 程序和指令的关系</h3>
<ul>
<li>程序和指令的关系
<ul>
<li>程序由一条一条指令组成</li>
</ul>
</li>
<li>程序的执行：<strong>周而复始地执行一条一条指令</strong></li>
<li>程序的执行流的控制
<ul>
<li>可以通过改变PC（程序计数器）的值来控制执行顺序，因为要执行的指令的地址就是PC给的</li>
</ul>
</li>
<li>指令周期：CPU<strong>取出并执行</strong>一条指令的时间
<ul>
<li>CPI: Cycles Per Instruction</li>
</ul>
</li>
</ul>
<h3 id="12-一条指令的执行过程"><a class="markdownIt-Anchor" href="#12-一条指令的执行过程"></a> 1.2 一条指令的执行过程</h3>
<ul>
<li>取指令-&gt;算操作数-&gt;取操作数-&gt;操作-&gt;计算下条指令地址</li>
<li><strong>每一步都会检测异常</strong>，若有异常，自动切换操作系统异常处理程序。如越界（第6章）、非法译码、缺页（没取到）、除0/溢出</li>
<li><strong>问题：“取指令”一定在最开始做吗？PC+&quot;1&quot;一定在译码前做吗?“译码”必须在指令执行前做吗？</strong> 	- 取指令一定在最开始做；
<ul>
<li>PC+1随便在哪里做，在下条取指令之前做就行了；</li>
<li>译码一定在指令执行前做</li>
</ul>
</li>
<li><strong>异常和中断的差别</strong>
<ul>
<li>异常是<strong>程序性中断</strong>，和指令相关</li>
<li>中断是IO发出的<strong>外部中断</strong>，如Ctrl^c，打印机缺纸</li>
</ul>
</li>
<li>取指令：从PC所指单元取指令发送到IR（指令寄存器），并增加PC；<strong>一般按最长的指令取</strong>；或先取一个字节，看看是什么指令，再决定是否继续取</li>
<li>取操作数：如果在寄存器，不用访存；在存储器需要一次或多次访存</li>
</ul>
<h3 id="13-ia-32指令的大致执行过程"><a class="markdownIt-Anchor" href="#13-ia-32指令的大致执行过程"></a> 1.3 IA-32指令的大致执行过程</h3>
<ul>
<li>四种基本操作
<ul>
<li><strong>取</strong>指令、操作数 LOAD</li>
<li>算术逻辑<strong>运算</strong></li>
<li><strong>存</strong>储（数字、结果）</li>
<li>寄存器、ALU间<strong>传送</strong></li>
</ul>
</li>
<li>IA-32体系结构
<ul>
<li>8个GPR（通用寄存器，标号0~7）</li>
<li>可寻址空间4GB</li>
<li>取指令格式变长、操作码变长</li>
<li>由若干字段（OP、Mod、SIB）组成</li>
</ul>
</li>
<li>寻址方式
<ul>
<li>基值+有效地址+位移量</li>
</ul>
</li>
</ul>
<h3 id="14-cpu的基本功能与结构"><a class="markdownIt-Anchor" href="#14-cpu的基本功能与结构"></a> 1.4 CPU的基本功能与结构</h3>
<ul>
<li>起始EIP（扩展指令指针） = 第一条指令的地址</li>
<li>指令执行结果
<ol>
<li>取指令：EIP -&gt; MAR -&gt; 地址线 -&gt; 控制线 -&gt; 数据线 -&gt; MDR -&gt; IR（指令寄存器） -&gt; 控制器译码</li>
<li>译码，指令执行：ESP-4， EBP送到MDR（EBP是数据）,ESP送到MAR（ESP是地址）（指令内容），写入内存。最后PC+1</li>
</ol>
</li>
<li>ALU结构原理：多路选择器选择加减乘除其中一路输入（所有门电路都会运算！）</li>
</ul>
<h2 id="20-主存储器组织"><a class="markdownIt-Anchor" href="#20-主存储器组织"></a> 2.0 主存储器组织</h2>
<h3 id="20-错题-2"><a class="markdownIt-Anchor" href="#20-错题-2"></a> 2.0 错题</h3>
<ol>
<li>
<p>假定用若干个16K×8位的存储器芯片组成一个64K×8位的存储器，芯片各单元交叉编址，则地址BFFFH所在的芯片的最小地址为（   ）。<br />
B、用若干个16K×8位的存储器芯片构成64K×8位的存储器，需要64K×8位/（16K×8位）= 4个芯片。<strong>因为采用交叉编址方式，所以，存储单元地址对4取模后，低两位相同的存储单元在同一个芯片中。</strong> BFFFH的最低两位为11，显然，与0003H在同一个芯片中。</p>
</li>
<li>
<p>下面有关半导体存储器组织的叙述中，错误的是（   ）。<br />
B. 同一个存储器中，每个存储单元的宽度可以不同<br />
这个叙述是错误的。在同一个存储器中，所有存储单元的宽度（即每个存储单元可以存储的数据位数）是相同的。<strong>存储单元的宽度决定了存储器的数据总线宽度</strong></p>
</li>
<li>
<p>某32位计算机，主存地址为32位，按字节编址，则该计算机的主存地址范围是（  ）。<br />
B. 0～(4G-1)<br />
在32位计算机中，主存地址是32位长，这意味着地址空间的大小是2的32次方字节。由于每个字节由8位（1字节）组成，所以地址空间的总大小是：<br />
2^32 字节 / 8 = 2^30 字节<br />
这等于4GB（Gigabytes）。因此，主存地址范围是从0到4GB减1（即4,294,967,295），因为地址是从0开始计数的。</p>
</li>
<li>
<p>假定主存地址空间大小为1024MB，按字节编址，每次读写操作最多可以一次存取32位。不考虑其它因素，则存储器地址寄存器MAR和存储器数据寄存器MDR的位数至少应分别为（ ）。<br />
C. 30，32<br />
存储器地址寄存器（MAR）的位数决定了CPU可以寻址的内存空间大小。由于主存地址空间大小为1024MB，我们需要计算出对应的位数：<br />
1024MB = 1024 * 1024 * 1024字节 = 2^20 * 1024 * 1024字节 = 2^30字节<br />
因此，MAR至少需要30位来表示这个地址空间。<br />
存储器数据寄存器（MDR）的位数决定了每次读写操作可以处理的数据量。题目中提到每次操作最多可以一次存取32位，这意味着MDR至少需要32位来存储这些数据。<br />
所以，MAR至少需要30位，MDR至少需要32位。</p>
</li>
<li>
<p>存储容量为16K×4位的DRAM芯片，其地址引脚和数据引脚数各是（ ）。<br />
D. 7和4<br />
存储容量为16K×4位的DRAM芯片意味着它有16K个存储单元，每个存储单元可以存储4位（即半个字节）数据。首先，我们需要计算地址引脚数：<br />
16K表示16 * 1024，即16384个存储单元。要表示16384个存储单元，我们需要足够的地址引脚来提供唯一的地址。计算所需的地址引脚数：<br />
2^n = 16384<br />
解这个方程，我们得到 n ≈ 14。所以，我们需要14个地址引脚来寻址16384个存储单元。<strong>又因DRAM行列复用，7个引脚即可</strong><br />
接下来，数据引脚数由存储单元的数据宽度决定。由于每个存储单元是4位宽，我们只需要4个数据引脚来传输这些数据。<br />
因此，答案是7个地址引脚和4个数据引脚。</p>
</li>
<li>
<p>下面有关ROM和RAM的叙述中，错误的是（   ）。<br />
计算机系统的主存都用DRAM芯片实现。DRAM的roll buffer是SRAM做的！</p>
</li>
<li>
<p>下面有关半导体存储器的叙述中，错误的是（   ）。<br />
C、有些情况下，可用半导体存储器实现相联存储器，即按内容进行访问，而不是按地址进行随机读写。<br />
‏</p>
</li>
</ol>
<h3 id="21-存储器基本概念"><a class="markdownIt-Anchor" href="#21-存储器基本概念"></a> 2.1 存储器基本概念</h3>
<h4 id="211-访存操作与基本术语"><a class="markdownIt-Anchor" href="#211-访存操作与基本术语"></a> 2.1.1 访存操作与基本术语</h4>
<ul>
<li>许多指令都要访存，是一个非常重要的概念</li>
<li>栈是主存中的一个区域</li>
<li>术语
<ol>
<li>Cell单元，表示0/1</li>
<li>Addressing Unit</li>
<li>Bank</li>
<li>Addressing Mode</li>
<li>MAR, MBR</li>
</ol>
</li>
</ul>
<h4 id="212-存储器分类"><a class="markdownIt-Anchor" href="#212-存储器分类"></a> 2.1.2 存储器分类</h4>
<ul>
<li>分类
<ol>
<li>RAM，如内存。每个单元读写时间一样，与各单元所在位置无关（不考虑roll buffer）。</li>
<li>SAM（顺序），如磁带。按顺序读写，存储时间长短与信息位置有关。</li>
<li>DAM，如磁盘。直接定位到读写数据块，读写数据时按顺序进行。</li>
<li>©AM，如快表。按内容检索到存储位置进行读写。<strong>不需要根据位置、地址，而是根据内容检索。</strong></li>
</ol>
</li>
<li>内存与外存关系、比较
<ol>
<li>外存 -&gt; 内存，程序、数据成批传送</li>
<li>内存 -&gt; CPU，CPU逐条读取指令、数据</li>
<li>CPU -&gt; 内存，指令处理结果送回内存</li>
<li>内存 -&gt; 外存，处理结果成批送到外存（回写）</li>
</ol>
</li>
</ul>
<h3 id="22-主存基本结构"><a class="markdownIt-Anchor" href="#22-主存基本结构"></a> 2.2 主存基本结构</h3>
<ul>
<li>8个cell（记忆单元）构成一个存储单元，从全0开始编号，同一个存储单元字线连在一起，同时读整个存储单元</li>
<li>问题：主存中存放的是？指令和数据；CPU何时访问主存？取指令、取数据、存数据的时候</li>
</ul>
<h3 id="23-主存的性能指标"><a class="markdownIt-Anchor" href="#23-主存的性能指标"></a> 2.3 主存的性能指标</h3>
<ul>
<li>存储时间（Access）： 读取时间和写入时间</li>
<li>存储周期（Memory Cycle）：连续两次访问存储器所需的最小时间间隔，比Access Time更长，有一个预充电（预处理）的时间<br />
![[…/Source/Photo/ICS/课程/Part II/2.2 单位.png]]</li>
</ul>
<h3 id="24-半导体存储器组织"><a class="markdownIt-Anchor" href="#24-半导体存储器组织"></a> 2.4 半导体存储器组织</h3>
<ul>
<li>六管静态MOS管电路（SRAM，集成度低）
<ul>
<li>相当于带时钟的RS触发器，无需刷新</li>
</ul>
</li>
<li>动态单管记忆单元电路（DRAM）
<ul>
<li>对电容充电，所以速度慢。元件少、集成高。破坏性读出，会漏电（但是CPU速度比漏电速度快），需要刷新。</li>
</ul>
</li>
<li>半导体的RAM组织
<ul>
<li>Cell -&gt; Chip -&gt; Memory</li>
<li>相同字的Cell字线连在一起，SRAM与ROM，字片式</li>
<li>二维位片式，DRAM<br />
-DRAM芯片举例</li>
<li>16Mb = 4Mb*4 = 2048*2048 *4 = 2^11 * 2^11 * 4</li>
<li>问题：为什么每一代DDR都会扩大四倍内存？<strong>行列分时复用</strong>，每一代DDR都会增加至少一根地址线，即行、列各增一位，所以容量至少提升4倍。用行、列地址选通信号（RAS\CAS）决定传送的是行、列地址</li>
</ul>
</li>
</ul>
<h3 id="25-内存条组织与总线宽度"><a class="markdownIt-Anchor" href="#25-内存条组织与总线宽度"></a> 2.5 内存条组织与总线宽度</h3>
<h4 id="251-sparcstation工作站-20的内存条"><a class="markdownIt-Anchor" href="#251-sparcstation工作站-20的内存条"></a> 2.5.1 SPARCstation（工作站） 20的内存条</h4>
<ul>
<li>存储器总线宽度为128，内存条可以一次读取128bits</li>
<li>2Mb = 256K * 8 = 2^9 * 2^9 * 8，即8行8列</li>
<li>行缓存roll buffer是SRAM做的，保持了速度！</li>
<li>各个芯片同一行同时读取到roll buffer</li>
</ul>
<h4 id="252-pc中的内存条"><a class="markdownIt-Anchor" href="#252-pc中的内存条"></a> 2.5.2 PC中的内存条</h4>
<ul>
<li>主存地址27位，片内地址24位与高24位主存地址相同，低3位用来选片（一般不用，整个读取），确定8个字节中的哪个。<strong>片内地址不是连续的，而是交叉编址（如0, 8, 16），可以同时读写</strong></li>
<li>Core i7北桥直接做到CPU里</li>
<li>行与列相等，引脚越少；如不能相等，尽量行比列少，这样可以减少刷新次数（按行刷新）</li>
</ul>
<h2 id="30-磁盘存储器"><a class="markdownIt-Anchor" href="#30-磁盘存储器"></a> 3.0 磁盘存储器</h2>
<h3 id="30-错题-2"><a class="markdownIt-Anchor" href="#30-错题-2"></a> 3.0 错题</h3>
<ol>
<li>
<p>以下有关硬磁盘的磁道和扇区的叙述中，错误的是（）。<br />
C. 一个磁道由若干扇区构成且磁盘各磁道信息位数总相同<br />
早期的低密度磁盘中每个磁道信息位数总是一样，但是，现在的磁盘，其外道信息量比内道大</p>
</li>
<li>
<p>以下有关磁盘驱动器的叙述中，错误的是（）<br />
C. 送到磁盘驱动器的盘地址由磁头号、盘面号和扇区号组成<br />
因为每个盘面有一个磁头，所以磁头号就是盘面号。盘地址由柱面号（即磁道号）、盘面号（即磁头号）和扇区号组成。</p>
</li>
<li>
<p>假定一个磁盘存储器有10个记录面，用于记录信息的柱面数为5000，每个磁道上记录信息位数相同，磁盘片外径200mm，内径40mm，最内道位密度为200bpm（位/毫米），则该磁盘存储器的容量约为（）<br />
我们来计算：(10×5000×π×40mm×200bpm)/8bits = 0.157GB</p>
</li>
<li>
<p>假定一个磁盘存储器有4个盘片，用于记录信息的柱面数为2000，每个磁道上有3000个扇区，每个扇区512B，则该磁盘存储器的容量约为（）。<br />
2×4×2000×3000×0.5KB ≈ 24GB</p>
</li>
<li>
<p>假定一个磁盘的转速为7200RPM，磁盘的平均寻道时间为10ms，内部数据传输率为1MB/s，不考虑排队等待时间。那么读一个512字节扇区的平均时间大约为 ( )。<br />
10ms + (1/7200×60×1000)/2 + 0.5KB/1MB×1024≈14.67ms</p>
</li>
<li>
<p>以下有关磁盘存储器读写操作的叙述中，错误的是（）。<br />
 C. 磁盘存储器可与CPU交换盘面上的存储信息<br />
 磁盘存储器以成批方式进行数据读写，CPU中没有那么多通用寄存器用于存放交换的数据，所以，磁盘存储器通常直接和主存交换信息</p>
</li>
<li>
<p>磁盘存储器进行读写操作之前，CPU需要对磁盘控制器或DMA控制器进行初始化。以下选项中，不包含在初始化信息中的是（）。<br />
D. 传送信息所在的通用寄存器编号</p>
</li>
</ol>
<h3 id="31-硬盘存储器结构"><a class="markdownIt-Anchor" href="#31-硬盘存储器结构"></a> 3.1 硬盘存储器结构</h3>
<ul>
<li>写入：磁头上有线圈，通过电流改变磁性来写入</li>
<li>读入：磁头不同，载体运动。根据感应电压识别0\1</li>
<li>磁盘：最外面是0磁道</li>
<li>扇区：同心圆分割成扇形，近几年变成4KB扇区，而不是512B</li>
<li>磁道：检测到脉冲，一个扇区就开始了。运用CRC校验，有一个同步字节。（512/600有效信息）格式化就是填补512信息字节以外的信息的过程。</li>
</ul>
<h3 id="32-磁盘驱动器及操作过程"><a class="markdownIt-Anchor" href="#32-磁盘驱动器及操作过程"></a> 3.2 磁盘驱动器及操作过程</h3>
<ul>
<li>所有磁头同进同出，同步寻道</li>
<li>硬盘操作流程
<ol>
<li>寻道，控制磁头（平均寻道时间,5ms左右）</li>
<li>选择1个磁头读写</li>
<li>磁盘旋转（旋转等待时间）</li>
<li>读写</li>
</ol>
</li>
<li>平均存储时间T = 平均寻道时间 + 平均旋转等待时间 + 数据传输时间</li>
<li>题目：每个扇区512B，转速5400RPM，寻道时间12ms，数据传输率4MB/s，磁盘控制器开销1ms，则硬盘响应时间为：<br />
T = 1 + 12 + [0.5(半圈)*60*1000/5400] + 0.5KB/4MB*1000（实际上局部性会让寻道时间减少1/3，旋转等待时间很重要！）</li>
</ul>
<h3 id="33-硬盘存储器的组成"><a class="markdownIt-Anchor" href="#33-硬盘存储器的组成"></a> 3.3 硬盘存储器的组成</h3>
<ul>
<li>存储介质：用于保存信息</li>
<li>磁盘驱动器：包括读写短路、读写转换开关，磁头定位系统等</li>
<li>磁盘控制器：控制逻辑、时序电路</li>
<li>寄存器：IO端口（第8章）</li>
<li>磁盘地址寄存器：控制磁头定位系统</li>
<li>操作过程：
<ol>
<li>盘地址到寄存器，磁头定位系统，开始旋转，计数器数扇区号，扇区符合比较，开始读写</li>
</ol>
</li>
</ul>
<h2 id="40-高速缓存"><a class="markdownIt-Anchor" href="#40-高速缓存"></a> 4.0 高速缓存</h2>
<h3 id="41-存储器层次结构"><a class="markdownIt-Anchor" href="#41-存储器层次结构"></a> 4.1 存储器层次结构</h3>
<ul>
<li>构造一个存储系统，又大、又快、又便宜：金字塔层次结构</li>
<li><strong>为什么层次化结构有效？局部性。</strong> 图书馆相同的书放在一起，搬的次数减少。预借登记，一堆图书送到某个图书馆，比直接去原来的图书馆借书耗费的时间少。
<ul>
<li>思考：<strong>真正重要的是局部性，而不是层次结构。</strong> 例如，一直缓存不命中也是很慢的，层次结构什么也没有做，是局部性让我们加速：是局部性让我们不会一直不命中，而是把搬来的一块数据全部用完，再般下一块数据，从而减少了搬数据的世界，把时间用在处理上。</li>
<li>时间局部性：循环。</li>
<li>空间局部性：数组，结构，循环。</li>
</ul>
</li>
</ul>
<h3 id="42-cache概述"><a class="markdownIt-Anchor" href="#42-cache概述"></a> 4.2 Cache概述</h3>
<h4 id="421-引入cache的出发点"><a class="markdownIt-Anchor" href="#421-引入cache的出发点"></a> 4.2.1 引入cache的出发点</h4>
<ul>
<li>程序具有局部性特征的原因
<ul>
<li>指令：连续存放，地址连续；循环或子程序重复执行</li>
<li>数据：连续存放，数组元素重复、按顺序访问</li>
</ul>
</li>
<li><strong>为什么引入cache会加快访存速度？</strong>
<ul>
<li>引入cache，访问一次内存，一直到把内存的数据都用完了，才开始下一次访问内存。减少了访问次数和时间开销。</li>
</ul>
</li>
</ul>
<h4 id="422-cache与主存的关系"><a class="markdownIt-Anchor" href="#422-cache与主存的关系"></a> 4.2.2 cache与主存的关系</h4>
<ul>
<li>cache如何实现？主存是4*n，把其中一行block(4)复制到cache，如果cache中没有找到要找的数据，就到主存中寻找，然后覆写到cache中（整行block）</li>
</ul>
<h4 id="423-cache操作过程"><a class="markdownIt-Anchor" href="#423-cache操作过程"></a> 4.2.3 cache操作过程</h4>
<ul>
<li>CPU给出访存要求，送给cache，判断是否在cache，取数据</li>
<li>若不在cache，访问主存并把1block覆盖到cache的空闲行，缺失处理</li>
<li>因为访问cache，所以给出的地址是虚拟地址，不是主存的地址</li>
</ul>
<h4 id="424-实现cache需要解决的问题"><a class="markdownIt-Anchor" href="#424-实现cache需要解决的问题"></a> 4.2.4 实现cache需要解决的问题</h4>
<ul>
<li>哪些问题？</li>
</ul>
<ol>
<li>判断是否在cache</li>
<li>如何在cache中取数据
<ul>
<li>如何划分块
<ul>
<li>划分为大小相同的block，cache被分成line/slot槽</li>
</ul>
</li>
<li>主存块和cache如何映射</li>
<li>放到cache什么地方（随便放、一一对应放）</li>
<li>cache已满，怎么办？（先进先出？最近不用的？）</li>
<li>写数据如何保证cache和主存的一致性？（修改了cache后，主存的数据怎么办？其他cpu也要用怎么办？<strong>锁住，不给其他cpu用</strong>一致性问题：计算机体系结构）</li>
<li>如何根据主存地址访问cache数据？</li>
</ul>
</li>
</ol>
<ul>
<li>cache对程序员透明：程序员感觉不到cache，不需要了解cache的存在、如何设置，但是对cache深入了解有助于写好的程序。</li>
</ul>
<h3 id="43-cache映射方式"><a class="markdownIt-Anchor" href="#43-cache映射方式"></a> 4.3 cache映射方式</h3>
<h4 id="431-直接映射主存地址划分"><a class="markdownIt-Anchor" href="#431-直接映射主存地址划分"></a> 4.3.1 直接映射主存地址划分</h4>
<ul>
<li>什么是cache的映射功能？
<ul>
<li>把访存的局部主存区域取到cache中，该放到cache的何处？</li>
<li>cache行比主存块少，多个主存映射到一个cache行中</li>
</ul>
</li>
<li>如何进行映射？
<ol>
<li>把主存空间划分成相等的主存块</li>
<li>cache中存放一个主存块的单位是slot/line，但不叫作page!</li>
<li>三种映射方式：
<ol>
<li>直接Direct：每个主存块映射到cache的固定行，取模放（第一行放小说，第二行放专业书）</li>
<li>全相联：每个主存块映射到cache任一行（只要有空的就放，随便放）</li>
<li>组相联（折中）：分组，在每个组里随便放</li>
</ol>
</li>
</ol>
</li>
<li>直接
<ul>
<li>取模放</li>
<li>有效位：当前slot有没有东西</li>
<li>tag：当前slot是哪个主存块0(block0),4(block1),8(block2)?</li>
<li>根据tag判断有没有命中</li>
<li>主存地址：7块主存标记+4cache槽号（行数决定）+9块内地址（块大小决定），4+9就是cache地址；拿块号取模得到cache槽号</li>
</ul>
</li>
</ul>
<h4 id="432-有效位和访存过程"><a class="markdownIt-Anchor" href="#432-有效位和访存过程"></a> 4.3.2 有效位和访存过程</h4>
<ul>
<li>有效位
<ul>
<li>开机、复位，所有有效位V=0</li>
<li>被替换、装入，V=1</li>
<li>使V=0来冲刷cache（进程切换、DMA传送，内核用，特权指令）对操作系统程序员不透明（能够感觉到cache）</li>
</ul>
</li>
<li>实现直接映射
<ul>
<li>tag多少位：主存地址 - 块内地址（块内大小B按字节编址，16B用4bits存储）- 数据区地址（Cache容量除以16（16B一块）得到行数4K行用12bits储存）= tag的位数</li>
</ul>
</li>
<li>如何判断命中Hit
<ul>
<li>拿slot与高16位相比（与门、比较器），若相等且V=1，Hit</li>
</ul>
</li>
<li>Hit后怎么办
<ul>
<li>根据块内地址高2位，在MUX选择哪个数据word</li>
<li>再根据word（32b）再根据MUX取Byte<br />
![[…/Source/Photo/ICS/课程/Part II/4.3.2 访存过程.png]]</li>
</ul>
</li>
<li>硬件实现和软件实现：两条指令以上的功能叫软件实现</li>
</ul>
<h4 id="434-cache容量计算"><a class="markdownIt-Anchor" href="#434-cache容量计算"></a> 4.3.4 Cache容量计算</h4>
<ul>
<li>上图的cache容量多大？
<ul>
<li>4K行 * (1有效位+16tdg) + 64K数据区 * 8 = 580Kbits = 72.5KB， 数据占64/72.5 = 88.3%</li>
</ul>
</li>
<li>问题：64行的cache，块大小16B，地址1200在哪一行？
<ol>
<li>(1200/16)块号 % 64 = 11</li>
<li>1200D（居然是10进制）转2进制 = 1024+128+32+16，取6位tag</li>
</ol>
</li>
<li>问题：实现以下cache需要多少位容量？Cache：直接映射、16K行，块大小4B、32位主存地址
<ul>
<li>16K * 4B = 64KB数据</li>
<li>tag = 32主存 - 14行所需b - 2块所需b</li>
<li>块大小 = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>14</mn></msup><mtext> </mtext><mo>×</mo><mo stretchy="false">(</mo><mn>3</mn><msub><mn>2</mn><mrow><mi>b</mi><mi>l</mi><mi>o</mi><mi>c</mi><mi>k</mi><mo>−</mo><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo stretchy="false">(</mo><mi>w</mi><mi>o</mi><mi>r</mi><mi>d</mi><mo stretchy="false">)</mo></mrow></msub><mo>+</mo><mo stretchy="false">(</mo><mn>32</mn><mo>−</mo><mn>14</mn><mo>−</mo><mn>2</mn><msub><mo stretchy="false">)</mo><mrow><mi>t</mi><mi>a</mi><mi>g</mi></mrow></msub><mo>+</mo><msub><mn>1</mn><mrow><mi>v</mi><mi>a</mi><mi>l</mi><mi>i</mi><mi>d</mi><mi>a</mi><mi>t</mi><mi>e</mi></mrow></msub><mo stretchy="false">)</mo><mo>=</mo><msup><mn>2</mn><mn>14</mn></msup><mo>×</mo><mn>49</mn><mo>=</mo><mn>784</mn><mi>K</mi><mi>b</mi><mi>i</mi><mi>t</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">2^{14}\ \times (32_{block-size(word)} + (32-14-2)_{tag}+1_{validate}) = 2^{14} \times 49 = 784Kbits</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace"> </span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1052em;vertical-align:-0.3551999999999999em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="mord mathdefault mtight">e</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">d</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord">2</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.28055599999999997em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">e</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord">9</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">7</span><span class="mord">8</span><span class="mord">4</span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">s</span></span></span></span></li>
</ul>
</li>
</ul>
<h4 id="434-直接映射的方式特点"><a class="markdownIt-Anchor" href="#434-直接映射的方式特点"></a> 4.3.4 直接映射的方式特点</h4>
<ul>
<li>特点
<ol>
<li>容易实现，命中时间（决定是否命中+取数据的时间）短</li>
<li>无需考虑淘汰（替换）问题</li>
</ol>
</li>
<li>缺点
<ol>
<li>0,4,8不命中，不够灵活，cache空间不能得到充分利用，命中率低，机器很少用</li>
</ol>
</li>
</ul>
<h4 id="435-全相联映射方式"><a class="markdownIt-Anchor" href="#435-全相联映射方式"></a> 4.3.5 全相联映射方式</h4>
<ul>
<li>特点
<ol>
<li>随便哪一槽都可以放（按内容访问）</li>
<li>地址分为两个字段：tag=主存块号+块内地址</li>
<li>命中率高</li>
</ol>
</li>
<li>缺点：
<ol>
<li>命中时间长</li>
<li>比较器位数长，成本高，开销大</li>
</ol>
</li>
</ul>
<h4 id="435-组相联set-associative映射方式"><a class="markdownIt-Anchor" href="#435-组相联set-associative映射方式"></a> 4.3.5 组相联（Set Associative）映射方式</h4>
<ul>
<li>特点
<ol>
<li>将所有组分行，把主存映射到cache<strong>固定组的任意一行</strong>。（组间模映射，组内随便放）n行称为n-way</li>
<li>地址 = 组群标记 + 组号 + 块内地址</li>
<li>把高位和组内几行一起相比</li>
</ol>
</li>
</ul>
<h2 id="50-cache替换算法"><a class="markdownIt-Anchor" href="#50-cache替换算法"></a> 5.0 Cache替换算法</h2>
<h3 id="51-cache替换策略"><a class="markdownIt-Anchor" href="#51-cache替换策略"></a> 5.1 Cache替换策略</h3>
<ul>
<li>先进先出FIFO
<ul>
<li>如果每组4个，循环读取1,2,3,4,5，每次都不命中（颠簸现象，或抖动，乒乓现象）</li>
</ul>
</li>
<li>最近最少用LRU
<ul>
<li>栈算法，命中率随着组的增大而提高</li>
<li>每个槽加一位LRU位（计数值）。如4个槽，两位LRU，每次被访问的槽的LRU位置0，其余槽位+1；每次淘汰LRU值最大的那个</li>
</ul>
</li>
</ul>
<h3 id="52-写策略cache一致性"><a class="markdownIt-Anchor" href="#52-写策略cache一致性"></a> 5.2 写策略（cache一致性）</h3>
<ul>
<li>cache里的内容是主存块的副本</li>
<li>直写（Write Through）：
<ul>
<li>直接写入内存，无一致性问题，但是慢</li>
<li>写缓存：增加速度，并行。但是write buffer写满就会饱和，很慢、阻塞。</li>
<li>解决buffer缓冲饱和：加一个二级cache（比buffer大）</li>
</ul>
</li>
<li>写回（Write Back）：
<ul>
<li>block被淘汰替换的时候，一次性写回。</li>
<li>需要锁死内存或cache的数据（修改位 dirty bit）</li>
<li>一定是写分配</li>
</ul>
</li>
<li>写不命中：
<ul>
<li>写分配：装入cache再写（需要读取主存的block）</li>
<li>非写分配：直接写入主存</li>
</ul>
</li>
</ul>
<h3 id="53-cache实现的几个因素"><a class="markdownIt-Anchor" href="#53-cache实现的几个因素"></a> 5.3 cache实现的几个因素</h3>
<ul>
<li>L1 Cache的数据和指令是分开的，可以一边读数据一边取指令 ；L1的命中时间比命中率更重要，因为不命中还有L2也很快</li>
<li>L2, L3, L4是联合Cache，指令数据放一起；L2命中率更重要</li>
</ul>
<h2 id="60-虚拟存储器"><a class="markdownIt-Anchor" href="#60-虚拟存储器"></a> 6.0 虚拟存储器</h2>
<h3 id="61-分页存储管理"><a class="markdownIt-Anchor" href="#61-分页存储管理"></a> 6.1 分页存储管理</h3>
<h4 id="611-早期虚拟存储器概念"><a class="markdownIt-Anchor" href="#611-早期虚拟存储器概念"></a> 6.1.1 早期虚拟存储器概念</h4>
<ul>
<li>早期：程序员自己管理主存；1961提出overlay，把地址空间和主存容量概念区分开。程序员在地址空间里编写程序，而程序在真正的主存中执行。自动完成映射。</li>
<li>操作系统： 执行到某个页的程序段时，当前主存内容保存到磁盘；找到需要的区间并读入主存；改变地址映射；程序继续执行</li>
</ul>
<h4 id="612-分页的基本概念"><a class="markdownIt-Anchor" href="#612-分页的基本概念"></a> 6.1.2 分页的基本概念</h4>
<ul>
<li>页表实现逻辑、物理地址的转换</li>
<li>局部化特性时我们不需要把整个程序装入内存；每个程序只用很小一部分内存，为多程序运行提供了便利</li>
</ul>
<h3 id="62-虚拟存储器-虚拟地址空间"><a class="markdownIt-Anchor" href="#62-虚拟存储器-虚拟地址空间"></a> 6.2 虚拟存储器、虚拟地址空间</h3>
<h4 id="621-虚拟存储器"><a class="markdownIt-Anchor" href="#621-虚拟存储器"></a> 6.2.1 虚拟存储器</h4>
<ul>
<li>使程序员可以在比实际主存空间大得多的逻辑地址空间里编写程序</li>
<li>程序执行时，只把局部加载到主存</li>
<li>思考：这就是为什么只有CPU、内存就可以称为计算机。原始的计算机就是这样的，在后面需要保存数据时才引入了外存</li>
<li>理想的页表对每一页都有说明，所以每一个程序都有一个页表</li>
</ul>
<h4 id="622-虚拟地址空间"><a class="markdownIt-Anchor" href="#622-虚拟地址空间"></a> 6.2.2 虚拟地址空间</h4>
<ul>
<li>将内核与用户空间隔离开</li>
<li>Linux虚拟地址空间
<ul>
<li>Kernel</li>
<li>User Stack (Dynamic)</li>
<li>Shared Libraries</li>
<li>Heap (Dynamic)</li>
<li>Read/Write Data</li>
<li>Code</li>
</ul>
</li>
<li>按需调页：仅仅建立映射，实际上不会真正从磁盘调入，需要的时候才调入</li>
</ul>
<h3 id="63-分页存储管理的实现"><a class="markdownIt-Anchor" href="#63-分页存储管理的实现"></a> 6.3 分页存储管理的实现</h3>
<h4 id="631-虚拟存储管理需要考虑的问题"><a class="markdownIt-Anchor" href="#631-虚拟存储管理需要考虑的问题"></a> 6.3.1 虚拟存储管理需要考虑的问题</h4>
<ul>
<li>问题
<ul>
<li>块大小（在虚拟存储器中“块”被称为“页／Page”）应多大？</li>
<li>主存与辅存的空间如何分区管理？</li>
<li>程序块存储块之间如何映像？</li>
<li>逻辑地址和物理地址如何转换，转换速度如何提高？</li>
<li>主存与辅存之间如何进行替换（与Cache所用策略相似）？</li>
<li>页表如何实现，页表项中要记录哪些信息？</li>
<li>如何加快访问页表的速度？</li>
<li>如果要找的内容不在主存，怎么办？</li>
<li>如何保护进程各自的存储区不被其他进程访问</li>
</ul>
</li>
<li>缺页开销大：用全相联</li>
<li>页大小比cache的block大得多，因为访问很慢，所以一次取很多</li>
<li>用软件处理“缺页”：缺页时访问磁盘太慢了，所以不用硬件实现</li>
</ul>
<h4 id="632-页表结构"><a class="markdownIt-Anchor" href="#632-页表结构"></a> 6.3.2 页表结构</h4>
<ul>
<li>装入位、修改位、替换控制位、其他（访问权限）、实际页号</li>
<li>每一个页有一项</li>
<li>页表比页还大</li>
<li>页表存在内核区</li>
</ul>
<h4 id="633-页表转换过程"><a class="markdownIt-Anchor" href="#633-页表转换过程"></a> 6.3.3 页表转换过程</h4>
<ul>
<li>虚拟地址：虚拟页号 + 页内地址</li>
<li>数组访问违例就会Segment Fault</li>
</ul>
<h4 id="634-快表-tlb"><a class="markdownIt-Anchor" href="#634-快表-tlb"></a> 6.3.4 快表 TLB</h4>
<ul>
<li>一次存储器引用需要访问几次主存？3次；把经常要查的页表项放在Cache，就是Translation Lookaside Buffer快表</li>
<li>TLB: tag（页表哪一项） + 主存页表项</li>
<li>TLB可以直接拿到物理地址，无需访问主存（TLB目的：减少访问主存的次数）</li>
</ul>
<h3 id="64-存储器层次结构"><a class="markdownIt-Anchor" href="#64-存储器层次结构"></a> 6.4 存储器层次结构</h3>
<h4 id="641-存储器访问过程"><a class="markdownIt-Anchor" href="#641-存储器访问过程"></a> 6.4.1 存储器访问过程</h4>
<ul>
<li>CPU用VAdrress去TLB，hit则去Cache中取（0次访存）；miss则去页表，再去Cache；最坏情况Page Fault</li>
<li>考研题：在Cache里hit的地址一定会在TLB和页表里</li>
</ul>
<h3 id="65-段式和段页式虚拟存储管理"><a class="markdownIt-Anchor" href="#65-段式和段页式虚拟存储管理"></a> 6.5 段式和段页式虚拟存储管理</h3>
<ul>
<li>分段系统的实现
<ul>
<li>不是等长划分，而是根据程序代码段、按程序逻辑划分（代码段、只读数据段、可读写数据段等）</li>
<li>有段长、段表（段号、装入位、段长、起始位置、访问方式），很好判断缺段、地址出界、保护违例</li>
<li>物理地址 = 段起始地址+段内偏移</li>
<li>缺点：占有空间多，碎片多</li>
</ul>
</li>
<li>段页式
<ul>
<li>先分段，再分页，仍以页为单位</li>
<li>段号+页号+页内偏移量</li>
<li>缺点：两次访问内存</li>
</ul>
</li>
</ul>
<h3 id="66-存储保护"><a class="markdownIt-Anchor" href="#66-存储保护"></a> 6.6 存储保护</h3>
<ul>
<li>目的：避免程序相互干扰，每个程序有自己的数据区</li>
<li>模式：
<ul>
<li>用户模式（目态）：用户的程序</li>
<li>管理模式（内核态）：操作系统的程序</li>
</ul>
</li>
<li>有指令实现内核、用户的转换</li>
</ul>
]]></content>
      <tags>
        <tag>课程</tag>
      </tags>
  </entry>
  <entry>
    <title>算法</title>
    <url>/ComputerScience/%E7%9F%A5%E8%AF%86/%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<ul>
<li><strong>复杂度分析</strong>：数据结构和算法的评价维度与方法。时间复杂度、空间复杂度的推算方法、常见类型、示例等。</li>
<li><strong>数据结构</strong>：基本数据类型，数据结构的分类方法。数组、链表、栈、队列、哈希表、树、堆、图等数据结构的定义、优缺点、常用操作、常见类型、典型应用、实现方法等。</li>
<li><strong>算法</strong>：搜索、排序、分治、回溯、动态规划、贪心等算法的定义、优缺点、效率、应用场景、解题步骤、示例题目等。</li>
</ul>
<span id="more"></span>
<h3 id="10-排序算法"><a class="markdownIt-Anchor" href="#10-排序算法"></a> 1.0 排序算法</h3>
<ul>
<li><strong>插入排序：</strong><br />
对于一段数组，从a[1]开始依次插入到前面<strong>已经排序好的数组</strong>里。<br />
实现：比较大小，把比待排序元素key大的元素往后移。<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">key = a[j];  <span class="comment">// 待排序数组</span></span><br><span class="line">i = j - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; a[i] &gt; key) &#123;  <span class="comment">// 比较大小</span></span><br><span class="line">    a[i+<span class="number">1</span>] = a[i];  <span class="comment">// 比key大的往后挪</span></span><br><span class="line">    i--;</span><br><span class="line">&#125;</span><br><span class="line">a[i+<span class="number">1</span>] = key;</span><br></pre></td></tr></table></figure>
</li>
<li><strong>选择排序：</strong><br />
第一次从数组a[0…LEN-1]中找出最小值，与a[0]交换，第二次从a[1…LEN-1]找最小值与a[1]交换，等等。<br />
实现：遍历数组，记录最小值及其下标，与a[0~LEN-1]交换<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">key = a[i];</span><br><span class="line"><span class="keyword">for</span> (j = i+<span class="number">1</span>; j &lt; LEN; j++) &#123;  <span class="comment">// 遍历数组i到末尾</span></span><br><span class="line">    <span class="keyword">if</span> (a[j] &lt; key) &#123;  <span class="comment">// 找出最小值并储存值和索引</span></span><br><span class="line">    key = a[j];</span><br><span class="line">    tag = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">a[tag] = a[i];</span><br><span class="line">a[i] = key;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><strong>归并排序：</strong><br />
把数组分成前后两半，直到不可再分；然后对已排序好的小数组排序。<br />
实现：将原数组复制成左右两份，比较左右数组每一项的大小，并给原数组重新赋值。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">merge(<span class="type">int</span> start, <span class="type">int</span> mid, <span class="type">int</span> end)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n1 = mid - start + <span class="number">1</span>;  <span class="comment">// 9/2 = 4, 0-4共5个元素</span></span><br><span class="line">    <span class="type">int</span> n2 = end - mid;  <span class="comment">// 9 - 9/2 = 5, 刚好5个元素</span></span><br><span class="line">    <span class="type">int</span> left[n1], right[n2];</span><br><span class="line">    <span class="type">int</span> i, j, k;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 复制数组</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n1; i++)</span><br><span class="line">        left[i] = a[start+i];</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n2; j++)</span><br><span class="line">        right[j] = a[mid+<span class="number">1</span>+j];</span><br><span class="line"></span><br><span class="line">    i = j = <span class="number">0</span>;</span><br><span class="line">    k = start;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n1 &amp;&amp; j &lt; n2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left[i] &lt; right[j])  <span class="comment">// 已排序好的小数组再排序</span></span><br><span class="line">            a[k++] = left[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            a[k++] = right[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n1)  <span class="comment">// 处理剩余项（已排序好无需比较）</span></span><br><span class="line">        a[k++] = left[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt; n2)</span><br><span class="line">        a[k++] = right[j++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(<span class="type">int</span> start, <span class="type">int</span> end)  </span><br><span class="line"><span class="comment">// start, end应为数组下标范围; a[10]传入0, 9</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(start &lt; end) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (start+end) / <span class="number">2</span>;</span><br><span class="line">        sort(start, mid);  <span class="comment">// 分割数组为两半</span></span><br><span class="line">        sort(mid+<span class="number">1</span>, end);</span><br><span class="line">        merge(start, mid, end);  <span class="comment">// 对已排序好的数组排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><strong>快速排序：</strong><br />
找到一个标兵pivot，并把数组按左小右大顺序排到pivot两侧，对左右两侧再排序。<br />
实现：两个索引从数组前后向中间遍历，每找到一组“左大右小”就交换，直到索引重合（排序完毕）。将pivot与索引位置交换，对左右两组再次排序。和冒泡排序一样属于交换排序。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// end在数组下标取值范围里  </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span>  &#123;  </span><br><span class="line">    <span class="type">int</span> i = start, j = end;  </span><br><span class="line">    <span class="comment">// 完全遍历数组，将组内全部元素排序成“左小右大”  </span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;  </span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; a[j] &gt;= a[start])  </span><br><span class="line">            j--;  </span><br><span class="line">        <span class="keyword">while</span> (i &lt; j &amp;&amp; a[i] &lt;= a[start])  </span><br><span class="line">            i++;  </span><br><span class="line">        <span class="comment">// 找到一组“左大右小”就交换</span></span><br><span class="line">        swap(&amp;a[i], &amp;a[j]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 交换pivot到组中间  </span></span><br><span class="line">    swap(&amp;a[start], &amp;a[i]);  </span><br><span class="line">    <span class="keyword">return</span> a[i];  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">quick_sort</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">if</span> (end &gt; start) &#123;  </span><br><span class="line">        <span class="type">int</span> pivot = partition(start, end);  </span><br><span class="line">        <span class="comment">// 如果把pivot变成pivot-1，pivot+1变成pivot就会死循环，为什么？  </span></span><br><span class="line">        quick_sort(start, pivot);          quick_sort(pivot+<span class="number">1</span>, end);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>算法</p>
<ul>
<li>有限指令集</li>
<li>接受输入或不需要输入</li>
<li>产生输出</li>
<li>一定在有限步骤后终止</li>
<li>每条指令必须
<ol>
<li>明确无歧义</li>
<li>计算机处理范围内（如递归别爆内存）</li>
<li>伪代码，不依赖特定语言和实现手段</li>
</ol>
</li>
<li>例子</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 将N个整数List[0]...List[N-1]进行非递减排序 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SelectionSort</span><span class="params">(<span class="type">int</span> List[], <span class="type">int</span> N)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        MinPosition = ScanForMin( List, i, N–<span class="number">1</span> );</span><br><span class="line">        <span class="comment">/* 从List[i]到List[N–1]中找最小元,并将其位置赋给MinPosition */</span></span><br><span class="line">        Swap( List[i], List[MinPosition] );</span><br><span class="line">        <span class="comment">/* 将未排序部分的最小元换到有序部分的最后位置 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>什么是好的算法
<ul>
<li>空间复杂度S(n)和时间复杂度T(n)</li>
<li>S(n)：递归PrintN(int N)占用跟N大小呈线性增长；而循环始终占用1个函数空间</li>
<li>T(n)：多项式例子，直接算的方法执行(1+2+…+n)次乘法，巧妙方法只执行n次乘法
<ul>
<li>只关心 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mrow><mi>w</mi><mi>o</mi><mi>r</mi><mi>s</mi><mi>t</mi></mrow></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mtext>和</mtext><msub><mi>T</mi><mrow><mi>a</mi><mi>v</mi><mi>g</mi></mrow></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T_{worst}(n) \text{和} T_{avg}(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mord text"><span class="mord cjk_fallback">和</span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 最坏情况更容易统计</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/ComputerScience/%E7%9F%A5%E8%AF%86/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<ul>
<li><strong>数组：</strong>
<ol>
<li>不灵活</li>
</ol>
</li>
<li><strong>动态数组：</strong>
<ol>
<li>使用malloc，在程序运行时（而不是一开始）分配内存</li>
<li>内存不一定连续，每次调用malloc都需要新的指针</li>
</ol>
</li>
<li><strong>链表：</strong>
<ol>
<li>解决malloc需要太多指针的问题，每个链表指向下一个指针</li>
<li>没有链表指向第一项的地址，因此需要头指针</li>
</ol>
</li>
</ul>
]]></content>
      <tags>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title>DNS Over Https</title>
    <url>/ComputerScience/%E7%AC%94%E8%AE%B0/DNS%20Over%20Https/</url>
    <content><![CDATA[<h1 id="windows"><a class="markdownIt-Anchor" href="#windows"></a> Windows</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">模板</span></span><br><span class="line">netsh dns add encryption server=&lt;IP Address&gt; dohtemplate=&lt;DOH Template&gt; autoupgrade=yes udpfallback=no</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">腾讯</span></span><br><span class="line">netsh dns add encryption server=1.12.12.12 dohtemplate=https://doh.pub/dns-query autoupgrade=yes udpfallback=no</span><br><span class="line"></span><br><span class="line">netsh dns add encryption server=120.53.53.53 dohtemplate=https://doh.360.cn/dns-query autoupgrade=yes udpfallback=no</span><br></pre></td></tr></table></figure>
<p>查看DoH模板：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netsh dns show encryption</span></span><br><span class="line"></span><br><span class="line">223.5.5.5 加密设置</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">DNS-over-HTTPS 模板     : https://dns.alidns.com/dns-query</span><br><span class="line">自动升级                : yes</span><br><span class="line">UDP 回退                : no</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>LFS笔记</title>
    <url>/ComputerScience/%E7%AC%94%E8%AE%B0/LFS%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="lfs"><a class="markdownIt-Anchor" href="#lfs"></a> <strong>LFS</strong></h2>
<pre><code>参考网站：https://www.linuxfromscratch.org/lfs/
</code></pre>
<p>Linux From Scratch，搭建你自己的Linux</p>
<ul>
<li><strong>bision：</strong> bison是属于 GNU 项目的一个语法分析器生成器</li>
<li><strong>gawk：</strong> linux下查找替换文本工具</li>
<li><strong>texinfo：</strong> Texinfo是一种用于创建文档的格式和工具集。<br />
它最初是为GNU项目开发的，用于编写GNU的软件文档。<br />
Texinfo使用简单的文本文件格式，可以生成各种格式的输出，如HTML、PDF、Info格式等。</li>
<li><strong>sudo ln -sf bash /bin/sh：</strong> 令shell脚本指向bash</li>
</ul>
]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>LinuxC</title>
    <url>/ComputerScience/%E7%AC%94%E8%AE%B0/LinuxC/</url>
    <content><![CDATA[<h3 id="90-代码风格"><a class="markdownIt-Anchor" href="#90-代码风格"></a> 9.0 代码风格</h3>
<ol>
<li>函数最好保持简单，只实现一种功能 (5-10个变量， 4个缩进以内)</li>
<li>函数命名包括动词，如get_current</li>
<li>使用下划线、详细地命名</li>
</ol>
<h2 id="第一阶段总结"><a class="markdownIt-Anchor" href="#第一阶段总结"></a> 第一阶段总结</h2>
<p>（Kimi AI生成）在C语言中，源文件中的语法元素和规则如下：</p>
<ol>
<li>
<p><strong>源文件中所有函数定义之外可以出现的语法元素</strong>：</p>
<ul>
<li>预处理指令（如<code>#include</code>, <code>#define</code>, <code>#ifdef</code>等）</li>
<li>全局变量声明</li>
<li>类型定义（如<code>typedef</code>）</li>
<li>函数原型声明（函数声明）</li>
<li>静态变量声明</li>
<li>静态函数声明</li>
<li>枚举类型声明</li>
<li>结构体和联合体声明</li>
<li>宏定义</li>
</ul>
</li>
<li>
<p><strong>函数定义之中可以出现的语法元素</strong>：</p>
<ul>
<li>局部变量声明</li>
<li>语句（如赋值语句、控制流语句等）</li>
<li>函数调用</li>
<li>表达式</li>
<li>语句块（由花括号<code>&#123;&#125;</code>包围的语句集合）</li>
</ul>
</li>
<li>
<p><strong>语句的种类</strong>：</p>
<ul>
<li>表达式语句</li>
<li>复合语句（由花括号<code>&#123;&#125;</code>包围的语句集合）</li>
<li>空语句（由分号<code>;</code>表示）</li>
<li>标签语句（由标签标识符和冒号<code>:</code>组成）</li>
<li>选择语句（<code>if</code>, <code>switch</code>）</li>
<li>迭代语句（<code>while</code>, <code>do-while</code>, <code>for</code>）</li>
<li>跳转语句（<code>break</code>, <code>continue</code>, <code>goto</code>, <code>return</code>）</li>
</ul>
</li>
<li>
<p><strong>需要遵循标识符命名规则的语法元素</strong>：</p>
<ul>
<li>变量名</li>
<li>函数名</li>
<li>类型名</li>
<li>枚举常量名</li>
<li>结构体和联合体成员名</li>
<li>宏名</li>
</ul>
</li>
<li>
<p><strong>表达式由哪些语法元素组成</strong>：</p>
<ul>
<li>常量</li>
<li>变量</li>
<li>函数调用</li>
<li>算术运算符和表达式</li>
<li>逻辑运算符和表达式</li>
<li>条件运算符和表达式</li>
<li>逗号运算符和表达式</li>
<li>位运算符和表达式</li>
<li>赋值运算符和表达式</li>
<li>地址运算符和表达式</li>
<li>指针运算符和表达式</li>
</ul>
</li>
<li>
<p><strong>运算符的左值、整型操作数和Side Effect</strong>：</p>
<ul>
<li>取操作数的左值的运算符：赋值运算符（<code>=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code>, <code>&amp;=</code>, <code>^=</code>, <code>|=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>）</li>
<li>操作数必须是整型的运算符：位移运算符（<code>&lt;&lt;</code>, <code>&gt;&gt;</code>）</li>
<li>有Side Effect的运算符：赋值运算符，自增/自减运算符（<code>++</code>, <code>--</code>），递增/递减运算符（<code>++</code>, <code>--</code>），取地址运算符（<code>&amp;</code>），解引用运算符（<code>*</code>）</li>
</ul>
</li>
<li>
<p><strong>左值和右值</strong>：</p>
<ul>
<li>可以做左值的表达式：变量、数组元素、解引用指针、结构体成员、联合体成员</li>
<li>只能做右值的表达式：字面量、函数调用、算术运算、逻辑运算、条件运算、逗号运算等</li>
</ul>
</li>
<li>
<p><strong>常量表达式和整数常量表达式</strong>：</p>
<ul>
<li>必须用常量表达式的地方：数组大小、枚举常量、类型定义、宏定义中的常量参数等</li>
<li>必须用整数常量表达式的地方：数组大小、枚举常量等</li>
</ul>
</li>
</ol>
<p>请注意，C语言的语法规则可能会随着不同的编译器和标准（如C89, C90, C99, C11等）有所不同。上述信息基于C语言的一般规则。</p>
]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode100 错题本</title>
    <url>/ComputerScience/%E7%AC%94%E8%AE%B0/LeetCode100%20%E9%94%99%E9%A2%98%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="hash"><a class="markdownIt-Anchor" href="#hash"></a> Hash</h1>
<h1 id="字母异位词"><a class="markdownIt-Anchor" href="#字母异位词"></a> 字母异位词</h1>
<p>排序每一个单词，就知道是不是异位词。</p>
<h2 id="两数之和"><a class="markdownIt-Anchor" href="#两数之和"></a> 两数之和</h2>
<p>从数组中，找到<code>nums[i] + nums[j] == target</code>，并返回<code>&#123; i, j &#125;</code>。<br />
思路是双重循环，遍历每一个元素，求和是否为target。<br />
然而，双重循环需要<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的复杂度。因此，可以使用一张表，使用<code>containsKey</code>方法识别是否存在当前i的<code>target - nums[i]</code>，即可减少一重循环。</p>
<h3 id="关键思想"><a class="markdownIt-Anchor" href="#关键思想"></a> 关键思想</h3>
<p>用Map高效率查找，减少一重循环。</p>
<h2 id="最长连续序列"><a class="markdownIt-Anchor" href="#最长连续序列"></a> 最长连续序列</h2>
<p>从乱序数组中，找到最长连续（数组中不一定连续）的序列。要求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>。<br />
首先用数组的值存入哈希表，然后遍历数组，判断<code>map.constains(curNum++)</code>。<br />
然而，即使这样还是效率不够高。</p>
<p>优化</p>
<ol>
<li>中间值不进入循环，序列开始值才进入，使用<code>!contains(curNum - 1)</code>判断是否为序列开始值</li>
<li>去重，不要哈希表，不需要键值对，使用哈希Set，只存储值。</li>
</ol>
<h3 id="关键思想-2"><a class="markdownIt-Anchor" href="#关键思想-2"></a> 关键思想</h3>
<p>去重；不处理中间值</p>
<span id="more"></span>
<h1 id="stack"><a class="markdownIt-Anchor" href="#stack"></a> Stack</h1>
<h1 id="单调栈"><a class="markdownIt-Anchor" href="#单调栈"></a> 单调栈</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> num: nums) &#123;</span><br><span class="line">    <span class="comment">// 没找到更大数就呆在栈里；找到更大数的出栈并存入Map</span></span><br><span class="line">    <span class="keyword">while</span> (!stk.isEmpty() &amp;&amp; num &gt; stk.peek()) &#123;</span><br><span class="line">        map.put(stk.peek(), num);</span><br><span class="line">        stk.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    stk.push(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="每日温度"><a class="markdownIt-Anchor" href="#每日温度"></a> 每日温度</h3>
<p>给一个长度为N的每日温度数组，返回一个数组，记录每一天距离下次升温的天数。</p>
<p>可以用双重循环，找到比当前温度大的那一天，但是这样效率太低。</p>
<p>优化：<br />
使用栈，存取没有找到升温日的index，找到升温日后，一次性处理完，减少一重循环。</p>
<h4 id="关键思想-3"><a class="markdownIt-Anchor" href="#关键思想-3"></a> 关键思想</h4>
<p>使用栈存储未处理的值，找到升温日后一次性处理，减少重复动作。</p>
<h3 id="下一个更大元素-i"><a class="markdownIt-Anchor" href="#下一个更大元素-i"></a> 下一个更大元素 I</h3>
<p>num1为num2子集，所以只遍历num2，找到num2[i]右边的大数，存入Map；将Map结果去到num1即可。</p>
<h1 id="栈实现队列"><a class="markdownIt-Anchor" href="#栈实现队列"></a> 栈实现队列</h1>
<h2 id="关键思想-4"><a class="markdownIt-Anchor" href="#关键思想-4"></a> 关键思想</h2>
<p>两个栈<code>in</code>和<code>out</code>，只有<code>out</code>为空时，才将<code>in</code>pop到<code>out</code>中。否则会出错。</p>
<h1 id="list"><a class="markdownIt-Anchor" href="#list"></a> List</h1>
<h2 id="链表排序"><a class="markdownIt-Anchor" href="#链表排序"></a> 链表排序</h2>
<p>链表的两种排序方法：插入排序和归并排序。<br />
其中，归并排序需要用双指针来找到mid节点。</p>
<p>注意，链表交换时，不要把<code>temp</code>设置成a或b的引用<code>temp = a/b;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exch</span><span class="params">(ListNode a, ListNode b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a.val; <span class="comment">// 或构造一个新的ListNode，否则就是在操作引用</span></span><br><span class="line">    a.val = b.val;</span><br><span class="line">    b.val = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，快指针的写法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这样可能访问不到fast.next</span></span><br><span class="line"><span class="keyword">if</span> (fast.next != end) fast = fast.next;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="keyword">if</span> (fast != end) fast = fast.next;</span><br></pre></td></tr></table></figure>
<p>注意，链表的归并排序，不需要一个个赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (head1 != <span class="literal">null</span> &amp;&amp; head2 != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (head1.val &lt; head2.val) &#123;</span><br><span class="line">        p.next = head1;</span><br><span class="line">        head1 = head1.next;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        p.next = head2;</span><br><span class="line">        head2 = head2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    p = p.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (head1 != <span class="literal">null</span>) &#123;</span><br><span class="line">    p.next = head1; <span class="comment">// 不需要循环</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (head2 != <span class="literal">null</span>) &#123;</span><br><span class="line">    p.next = head2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，终止条件要熔断有序的链表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (head.next == end) &#123;</span><br><span class="line">    head.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="删除倒数第n个节点"><a class="markdownIt-Anchor" href="#删除倒数第n个节点"></a> 删除倒数第N个节点</h1>
<p>24.10.11<br />
使用双指针，p2比p1快N个节点，遍历，<code>p2 == null</code>时，p1为要删除的节点</p>
<h1 id="tree"><a class="markdownIt-Anchor" href="#tree"></a> Tree</h1>
<h2 id="对称树"><a class="markdownIt-Anchor" href="#对称树"></a> 对称树</h2>
<p>使用递归解决。对称遍历到两棵树的底部(null)，仍然没有出现不相等的情况，即为对称树。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">checkNode</span><span class="params">(TreeNode left, TreeNode right)</span> &#123;</span><br><span class="line">    <span class="comment">// condition</span></span><br><span class="line">    <span class="keyword">return</span> checkNode(left.left, right.right) &amp;&amp;</span><br><span class="line">           checkNode(left.right, right.left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="最大深度"><a class="markdownIt-Anchor" href="#最大深度"></a> 最大深度</h2>
<p>获得每一个节点的最大深度，root再比较left与right的深度，取最大值即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> max(maxDepth(root.left), maxDepth(root.right)) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="最长直径"><a class="markdownIt-Anchor" href="#最长直径"></a> 最长直径</h2>
<p>获取每个节点左右节点的最大深度之和，最大值即为二叉树的最长直径。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> longestDiameter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">maxDepthCache</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 使用缓存</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> maxDepthCache(root.left);</span><br><span class="line">    <span class="type">int</span> <span class="variable">R</span> <span class="operator">=</span> maxDepthCache(root.right);</span><br><span class="line">    longestDiameter = max(longestDiameter, L + R + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> max(L, R) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">diameterOfBinaryTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    longestDiameter = <span class="number">1</span>;</span><br><span class="line">    maxDepthCache(root);</span><br><span class="line">    <span class="keyword">return</span> longestDiameter - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="反转二叉树"><a class="markdownIt-Anchor" href="#反转二叉树"></a> 反转二叉树</h1>
<p>翻转每一个节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> invertTree(root.left);</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> invertTree(root.right);</span><br><span class="line">    root.left = right;</span><br><span class="line">    root.right = left;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="双指针"><a class="markdownIt-Anchor" href="#双指针"></a> 双指针</h1>
<h2 id="移动0"><a class="markdownIt-Anchor" href="#移动0"></a> 移动0</h2>
<p>两个指针，<code>i, j</code>，j左边是排序好的数，i用于遍历。<br />
遇到非0的数，交换i与j。</p>
<h1 id="动态规划dp"><a class="markdownIt-Anchor" href="#动态规划dp"></a> 动态规划，DP</h1>
<p>动态规划：缓存运算结果，空间换时间。</p>
<h2 id="不同路径和问题"><a class="markdownIt-Anchor" href="#不同路径和问题"></a> 不同路径和问题</h2>
<h3 id="爬楼梯"><a class="markdownIt-Anchor" href="#爬楼梯"></a> 爬楼梯</h3>
<p>Distinct Ways问题。<br />
累加所有到达当前状态的可能路径数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= target; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; ways.size(); ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ways[j] &lt;= i) &#123;</span><br><span class="line">            dp[i] += dp[i - ways[j]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="不同路径ii"><a class="markdownIt-Anchor" href="#不同路径ii"></a> 不同路径II</h3>
<p>增加了Obstacles，不能通过的点。</p>
<p>题目描述：<br />
二维数组，<code>matrix[0][0]</code>为起点；<code>matrix[m-1][n-1]</code>为终点。每次只能向下走或向右走，中间有障碍物，不能通行。求到达终点的不同路径总数。</p>
<p>核心思想：<br />
从起点开始逐步推导走到每一格的路径数量，并将推导结果缓存到数组<code>dp[i][j]</code>中，用于下一步的推导。</p>
<p>题解：</p>
<ol>
<li>首先，创建二维数组<code>dp[m][n]</code>用于存储达到每一格的路径数，初始化第一行和第一列，将可以通行的路径初始化为1，遇到障碍物，将障碍物置0并break中止初始化。</li>
<li>运用动态规划算法，得出到达每一格的路径数量。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j += <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 只能从上方或左方走过来</span></span><br><span class="line">        dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>处理障碍物。遇到障碍物，跳过当前<code>dp[i][j]</code>的赋值操作。（此路不通，到达此格的路径数为默认值0）</li>
<li>处理边界情况。当起点或终点值为1，即有障碍物不可达时，直接返回0。</li>
</ol>
<h2 id="最大最小不同路径问题"><a class="markdownIt-Anchor" href="#最大最小不同路径问题"></a> 最大/最小不同路径问题</h2>
<p>在不同路径问题的基础上，增加一个max或min函数，筛选达到每一步的最大或最小步数。<br />
核心算法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= target; ++i) &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; ways.size(); ++j) &#123;</span><br><span class="line">       <span class="keyword">if</span> (ways[j] &lt;= i) &#123;</span><br><span class="line">           dp[i] = min(dp[i], dp[i - ways[j]]) + cost / path / sum;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> dp[target]</span><br></pre></td></tr></table></figure>
<h3 id="零钱兑换"><a class="markdownIt-Anchor" href="#零钱兑换"></a> 零钱兑换</h3>
<ol>
<li>首先初始化dp，并填充最大值；然后对coin的倍数赋正确的值（显然，凑成<code>coin*i</code>元最少需要<code>i</code>个硬币）。为了避免小的硬币倍数覆盖大的硬币倍数，先对<code>coins</code>排序。</li>
<li>动态规划最小值核心算法</li>
<li>验证dp是否被修改，没有被修改，说明凑不成，返回-1；否则返回<code>dp[amount]</code></li>
</ol>
]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux笔记</title>
    <url>/ComputerScience/%E7%AC%94%E8%AE%B0/Linux%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="基本配置"><a class="markdownIt-Anchor" href="#基本配置"></a> 基本配置</h1>
<ol>
<li>sudo权限: 修改<code>/etc/sudoers</code>，或者root<code>adduser &lt;username&gt; sudo</code>并重启</li>
<li>apt软件包管理系统换源：<code>/etc/apt/sources.list</code>修改软件发布源<br />
<code>deb http://站点/目录名/stretch版本名 main contrib non-free三类软件包</code><br />
Debian官方软件源：官网/mirror/list</li>
<li><code>/usr/share/doc</code> 有安装软件的信息</li>
</ol>
<h1 id="10-命令篇"><a class="markdownIt-Anchor" href="#10-命令篇"></a> 1.0 命令篇</h1>
<h2 id="基本命令"><a class="markdownIt-Anchor" href="#基本命令"></a> 基本命令</h2>
<pre><code>参考资料 https://missing-semester-cn.github.io/2020/course-shell/
</code></pre>
<ul>
<li>
<p>关机、重启<br />
<code>shutdown</code><br />
<code>-h now</code> halt，挂起，相当于 <code>halt</code><br />
<code>-r now</code> reboot，重启<br />
<code>poweroff</code><br />
<code>reboot</code></p>
</li>
<li>
<p>手册<br />
<code>man</code> 命令</p>
</li>
<li>
<p>导航<br />
<code>pwd 显示当前所在目录</code><br />
<code>cd</code> 进入文件夹  <code>'..'</code> 上级目录   <code>'.'</code>当前目录   <code>'/'</code>开头的是绝对路径`</p>
</li>
<li>
<p>查看文件<br />
<code>ls</code> 列出所有文件<br />
<code>ls -l</code> 查看文件权限信息</p>
</li>
<li>
<p>创建文件夹<br />
<code>mkdir</code> 文件夹名<br />
<code>rmdir</code> 删除文件夹</p>
</li>
<li>
<p>没有vim的时候如何创建、编辑、查看文件<br />
<code>touch 文件</code> 创建文件<br />
<code>echo 文本 &gt; 文件</code>  echo+重定向输入文件（会把原来内容覆盖）<br />
<code>echo 文本 &gt;&gt; 文件</code> 追加输入（在原来内容的结尾另起一行输入）<br />
<code>cat 文件</code> 查看文件<br />
除了使用<code>cat</code>看文件，还有<code>tac</code>（从最后一行开始显示），<code>more, less</code>（可以翻页，好用）</p>
</li>
</ul>
<ul>
<li>
<p>压缩<br />
压缩一整个目录，使用 <code>tar</code><br />
压缩单个文件 <code>bzip2 gzip（-d解压）</code><br />
<code>tar -cvf 目标名 文件名</code> 压缩 ， <code>tar -xvf</code>解压</p>
</li>
<li>
<p>查找<br />
<code>grep</code> 用法 <code>grep &quot;word&quot; filename</code></p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep <span class="string">&quot;string&quot;</span> * <span class="comment"># 在所有文件中搜索string</span></span><br><span class="line">grep -r <span class="string">&quot;string&quot;</span> <span class="comment"># 递归搜索</span></span><br></pre></td></tr></table></figure>
<pre><code>`find`用法 `find filename`
</code></pre>
<span id="more"></span>
<ul>
<li>chmod用法<br />
<code>chmod uoga +-= wxrXst 文件</code>   w写r读x执行<br />
<code>chmod 777 文件</code> 中间的7：4读 2写 1执行</li>
</ul>
<ul>
<li>
<p>软件位置<br />
<code>apt list --installed | grep &lt;package_name&gt;</code> 查找已安装软件<br />
<code>whereis &lt;package_name&gt;</code> 查找软件路径</p>
</li>
<li>
<p><code>alias</code> 设置别名（如 <code>ll</code> 命令代表 <code>ls -l</code>）</p>
</li>
</ul>
<h2 id="磁盘信息"><a class="markdownIt-Anchor" href="#磁盘信息"></a> 磁盘信息</h2>
<ol>
<li><code>df -h (disk free)</code> 查看磁盘容量`</li>
<li><code>du -sh *</code> 即 <code>(disk usage --summarize --human-readable)</code> ，查看当前目录所有子目录大小</li>
</ol>
<h2 id="实用方法"><a class="markdownIt-Anchor" href="#实用方法"></a> 实用方法</h2>
<ul>
<li>符号链接</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Linux</span></span><br><span class="line"><span class="built_in">ln</span> -s /absolute/file/path/source_folder /absolute/file/path/target_folder <span class="comment"># 映射两个文件夹</span></span><br></pre></td></tr></table></figure>
<h2 id="-code2-"><a class="markdownIt-Anchor" href="#-code2-"></a> <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># Windows，有些文件需要文件名相同才能打开</span><br><span class="line">mklink C:\file\<span class="built_in">path</span>\Target C:\file\<span class="built_in">path</span>\Source</span><br></pre></td></tr></table></figure></h2>
<h1 id="环境变量"><a class="markdownIt-Anchor" href="#环境变量"></a> 环境变量</h1>
<ul>
<li>常见环境变量：
<ol>
<li>PATH：指定命令的搜索路径</li>
<li>HOME：指定用户的主工作目录（即用户登陆到Linux系统中时，默认的目录）</li>
<li>HISTSIZE：指保存历史命令记录的条数。</li>
<li>LOGNAME：指当前用户的登录名。</li>
<li>HOSTNAME：指主机的名称，许多应用程序如果要用到主机名的话，通常是从这个环境变量中来取得的。</li>
<li>SHELL：指当前用户用的是哪种Shell。</li>
<li>LANG/LANGUGE：和语言相关的环境变量，使用多种语言的用户可以修改此环境变量。</li>
<li>MAIL：指当前用户的邮件存放目录。</li>
<li>PS1：命令基本提示符，对于root用户是#，对于普通用户是$。</li>
<li>PS2：附属提示符，默认是“&gt;”。</li>
</ol>
</li>
</ul>
<h2 id="拓展windows系统的path环境变量"><a class="markdownIt-Anchor" href="#拓展windows系统的path环境变量"></a> 拓展：Windows系统的PATH环境变量</h2>
<ul>
<li>在“编辑系统环境变量”中，找到“系统变量”下的PATH，编辑并新建即可添加</li>
</ul>
]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>网络是怎样连接的</title>
    <url>/ComputerScience/%E7%AC%94%E8%AE%B0/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/</url>
    <content><![CDATA[<h1 id="web浏览器"><a class="markdownIt-Anchor" href="#web浏览器"></a> Web浏览器</h1>
<p>网址就是请求服务器上对应的文件<br />
DNS从顶级域名开始根据网址查IP。DNS服务器通过缓存查过的IP来加快服务响应（缓存拥有有效期）。<br />
浏览器调用Socket库建立连接管道</p>
<h1 id="tcpip协议栈"><a class="markdownIt-Anchor" href="#tcpip协议栈"></a> TCP/IP协议栈</h1>
<p>应用将数据分割为许多个网络包，TCP加上头部发送出去。需要发送的信息会缓存起来，<strong>超出计时时间</strong>或者<strong>数据量大于一个包大小</strong>时才发出去。<br />
TCP需要确认对方收到数据，但是为了不浪费时间，实际上TCP在等待确认信息的过程中也在发送包，这个方法称为<strong>滑动窗口</strong>。<br />
为了使接收方有足够的时间处理数据，接收方有一个接收缓存，当缓存满了会在TCP头部中通知发送方；处理完成，缓冲区有空余时也会通过TCP头部通知发送方。<br />
通信完成后，发送方会保留套接字一段时间，以防对方的FINISH信号发送有延迟，把新的相同端口的套接字错误删除。</p>
<p>用电信号传输数据时，用高电平表示1，低电平表示0.为了防止连续的低电平读不出来，会有一条时钟信号（固定切换高低电平）<br />
ICMP：定义各种消息，如超时、无法到达、超出转发能力</p>
<p>UDP在发送的数据少于一个包（重发也只需要发一个包，代价小，如DNS查询控制信息）、发送的数据具有时效性（如音视频，必须快速发送，即使重发也没有意义）的情况下使用。UDP只负责收发数据，对方没收到就全部重发一遍。</p>
]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Computer Organization&amp;Design学习记录</title>
    <url>/ComputerScience/%E7%AC%94%E8%AE%B0/Computer%20Organization&amp;Design%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="chapter2-指令计算机的语言"><a class="markdownIt-Anchor" href="#chapter2-指令计算机的语言"></a> Chapter2 指令：计算机的语言</h1>
<p>本章将介绍MIPS汇编语言指令。</p>
<h2 id="三条设计原则"><a class="markdownIt-Anchor" href="#三条设计原则"></a> 三条设计原则</h2>
<ol>
<li>简单源于规整 Simplicity favors regularity.</li>
<li>越小越快 Smaller is faster.</li>
<li>优秀的设计需要适宜的折中方案 Good design demands good compromises.</li>
</ol>
<h2 id="22-硬件的操作与操作数"><a class="markdownIt-Anchor" href="#22-硬件的操作与操作数"></a> 2.2 硬件的操作与操作数</h2>
<h3 id="规整"><a class="markdownIt-Anchor" href="#规整"></a> 规整</h3>
<p><code>add a, b, c // a = b + c</code> MIPS汇编语言使用这样的固定记法。<br />
每条MIPS算术指令只执行1个操作，仅有3个变量。</p>
<h3 id="操作数必须来自寄存器"><a class="markdownIt-Anchor" href="#操作数必须来自寄存器"></a> 操作数必须来自寄存器</h3>
<p>变量f、g、h、i、j依次分配给$s0~$s4，编译下面的C语句</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">f = (g + h) - (i + j);</span><br><span class="line">---</span><br><span class="line">add $t0, $s1, $s2 <span class="comment">// t0 = s1 + s2</span></span><br><span class="line">add $t1, $s3, $s4</span><br><span class="line">sub $s0, $t0, $t1 <span class="comment">// s0 = t0 + t1</span></span><br></pre></td></tr></table></figure>
<h3 id="数据传输"><a class="markdownIt-Anchor" href="#数据传输"></a> 数据传输</h3>
<p>只有少量数据存在寄存器中，因此需要在存储器和寄存器间传输数据</p>
<p>A的基址是存在$s3，编译下面的C语句</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">A[<span class="number">12</span>] = h + A[<span class="number">8</span>]</span><br><span class="line">---</span><br><span class="line">lw  $t0, <span class="number">32</span>($s3) <span class="comment">// 先读数，再相加；32为偏移量，8*4byte</span></span><br><span class="line">add $t0, $s2, $t0</span><br><span class="line">sw  $t0, <span class="number">48</span>($s3) <span class="comment">// 存数</span></span><br></pre></td></tr></table></figure>
<h3 id="立即数"><a class="markdownIt-Anchor" href="#立即数"></a> 立即数</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">addi $t0, $t1, <span class="number">4</span> <span class="comment">// t0 = t1 + 4；无需读取4，作为立即数相加</span></span><br><span class="line">subi $t0, $t1, <span class="number">4</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="25-指令的表示"><a class="markdownIt-Anchor" href="#25-指令的表示"></a> 2.5 指令的表示</h2>
<h3 id="mips字段"><a class="markdownIt-Anchor" href="#mips字段"></a> MIPS字段</h3>
<ul>
<li>op: operation code</li>
<li>rs: source register</li>
<li>rt: target register</li>
<li>rd: destionation register</li>
<li>shamt: shift amount</li>
<li>funct: function code</li>
</ul>
<table>
<thead>
<tr>
<th>指令</th>
<th>格式</th>
<th>op</th>
<th>rs</th>
<th>rt</th>
<th>rd</th>
<th>shamt</th>
<th>funct</th>
</tr>
</thead>
<tbody>
<tr>
<td>共32位</td>
<td>register</td>
<td>6位</td>
<td>5位</td>
<td>5位</td>
<td>5位</td>
<td>5位</td>
<td>6位</td>
</tr>
<tr>
<td>add</td>
<td>R</td>
<td>0</td>
<td>reg</td>
<td>reg</td>
<td>reg</td>
<td>0</td>
<td>32</td>
</tr>
<tr>
<td>sub</td>
<td>R</td>
<td>0</td>
<td>reg</td>
<td>reg</td>
<td>reg</td>
<td>0</td>
<td>34</td>
</tr>
</tbody>
</table>
<p>5位字段太小，用处不大，取常数也取不了多大范围；所以设计了I型指令，支持16位字段</p>
<table>
<thead>
<tr>
<th>指令</th>
<th>格式</th>
<th>op</th>
<th>rs</th>
<th>rt</th>
<th>|-----address----|</th>
</tr>
</thead>
<tbody>
<tr>
<td>共32位</td>
<td>Immeidate</td>
<td>6位</td>
<td>5位</td>
<td>5位</td>
<td>16位</td>
</tr>
<tr>
<td>addi</td>
<td>I</td>
<td>8</td>
<td>reg</td>
<td>reg</td>
<td>常数</td>
</tr>
<tr>
<td>lw</td>
<td>I</td>
<td>35</td>
<td>reg</td>
<td>reg</td>
<td>地址</td>
</tr>
<tr>
<td>sw</td>
<td>I</td>
<td>43</td>
<td>reg</td>
<td>reg</td>
<td>地址</td>
</tr>
</tbody>
</table>
<p>大部分CPU只有16或32个寄存器，再增加，rs和rt字段都必须额外增加位，很难满足指令32位字长的要求。</p>
<p>将下面C语句编译成MIPS，并写出机器代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">A[<span class="number">300</span>] = h + A[<span class="number">300</span>];</span><br><span class="line">---</span><br><span class="line">lw $t0, <span class="number">1200</span>($t1) <span class="comment">// 注意t1存的是A的基址，不能当做temp随意修改！</span></span><br><span class="line">add $t0, $s2, $t0 </span><br><span class="line">sw $t0, <span class="number">1200</span>($t1)</span><br></pre></td></tr></table></figure>
<h3 id="两个准则"><a class="markdownIt-Anchor" href="#两个准则"></a> 两个准则</h3>
<ol>
<li>指令用数的形式表示</li>
<li>和数据一样，程序存储在存储器中，并且可以读写<br />
这两个原则引出&quot;stored-program&quot;概念，释放了计算机的潜力。程序可以编译好放到存储器中，需要时再读取。</li>
</ol>
<h2 id="26-逻辑操作"><a class="markdownIt-Anchor" href="#26-逻辑操作"></a> 2.6 逻辑操作</h2>
<table>
<thead>
<tr>
<th>Logical Operation</th>
<th>MIPS Instructions</th>
</tr>
</thead>
<tbody>
<tr>
<td>Shift Left Logical</td>
<td>sll</td>
</tr>
<tr>
<td>Shift Right Logical</td>
<td>sdl</td>
</tr>
<tr>
<td>And &amp;</td>
<td>and, andi</td>
</tr>
<tr>
<td>Or |</td>
<td>or, ori</td>
</tr>
<tr>
<td>Not ~</td>
<td>nor</td>
</tr>
</tbody>
</table>
<p>均为R型指令，Not通过nor 0（或非0）来实现</p>
<h2 id="27-决策指令"><a class="markdownIt-Anchor" href="#27-决策指令"></a> 2.7 决策指令</h2>
<h3 id="branch-if"><a class="markdownIt-Anchor" href="#branch-if"></a> branch if</h3>
<p>i, k分别存放在$s3, $s5， save基址存放在$s6，编译下面的C语句</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (save[i] == k)</span><br><span class="line">    i += <span class="number">1</span>;</span><br><span class="line">---</span><br><span class="line">Loop: sll $t1, $s3, <span class="number">2</span> <span class="comment">// 左移2，相当于i*4</span></span><br><span class="line">add  $t1, $t1, $s6 <span class="comment">// 下标*4与基址相加，得到save[i]</span></span><br><span class="line">lw   $t0, <span class="number">0</span>($s6) <span class="comment">// 取save[i]</span></span><br><span class="line"><span class="comment">// beq 与 bne，两条判断相等、不等的指令</span></span><br><span class="line">bne  $t0, $s5, Exit <span class="comment">// branch if not equal, jump to Exit</span></span><br><span class="line">addi $s3, $s3, <span class="number">1</span> <span class="comment">// i++</span></span><br><span class="line">   j Loop <span class="comment">// jump to Loop</span></span><br><span class="line">Exit:</span><br></pre></td></tr></table></figure>
<p>可以看出对i不仅要做程序的加法处理，作为下标还要做*4处理。save[i]是通过每次加i的地址到&amp;save[0]，再取数取出来的。</p>
<h3 id="小于"><a class="markdownIt-Anchor" href="#小于"></a> 小于</h3>
<p>检查数组下标是否越界</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// set on less than (unsigned)</span></span><br><span class="line">sltu $t0, $s1, $t2 <span class="comment">// t0 = 0 if s1 &gt;= t2(length) or s1 &lt; 0</span></span><br><span class="line"><span class="comment">// 小于则为1，大于则为0</span></span><br><span class="line">beq $t0, $zero, IndexOutOfBounds</span><br></pre></td></tr></table></figure>
<p>用无符号数，正树正常比较，负数会被解释为一个很大的数，所以$t0会被置0，完成越界判断</p>
<h3 id="caseswitch语句"><a class="markdownIt-Anchor" href="#caseswitch语句"></a> case/switch语句</h3>
<p>实际上被汇编转换成了<code>if-then-else</code></p>
<h2 id="28-过程"><a class="markdownIt-Anchor" href="#28-过程"></a> 2.8 过程</h2>
<p>根据<strong>提供的参数</strong>执行一定任务的<strong>存储子程序</strong><br />
六个步骤：</p>
<ol>
<li>参数放到可访问位置</li>
<li>控制权交给过程</li>
<li>获取过程所需存储空间</li>
<li>执行任务</li>
<li>结果放到调用程序可访问位置</li>
<li>返回控制权</li>
</ol>
<h3 id="mips过程调用硬件"><a class="markdownIt-Anchor" href="#mips过程调用硬件"></a> MIPS过程调用硬件</h3>
<ul>
<li><code>$a0 - $a3</code> 四个参数寄存器</li>
<li><code>$v0 ~ $v1</code> 两个返回值寄存器（为什么是两个？返回值不是只有1个吗？）</li>
<li><code>$ra</code> return address register</li>
</ul>
<h3 id="过程调用指令jal"><a class="markdownIt-Anchor" href="#过程调用指令jal"></a> 过程调用指令jal</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jal ProcedureAddr // jump and link，把下条指令地址PC+4放到$ra</span><br></pre></td></tr></table></figure>
<h3 id="栈"><a class="markdownIt-Anchor" href="#栈"></a> 栈</h3>
<p>在MIPS中，栈从高地址开始<br />
栈指针寄存器为<code>$sp</code>，stack pointer</p>
<p>将下面的C语句编译成MIPS汇编代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">leaf_example</span><span class="params">(<span class="type">int</span> g, <span class="type">int</span> h, <span class="type">int</span> i, <span class="type">int</span> j)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> f;</span><br><span class="line">    </span><br><span class="line">    f = (g + h) - (i + j);</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line">leaf_example:</span><br><span class="line">addi $sp, $sp, <span class="number">-12</span> <span class="comment">// 分配地址，需要保存3个寄存器（看下面操作），-4*3</span></span><br><span class="line">sw $t1, <span class="number">8</span>($sp) <span class="comment">// 8~11</span></span><br><span class="line">sw $t0, <span class="number">4</span>($sp)</span><br><span class="line">sw $s0, <span class="number">0</span>($sp) <span class="comment">// 从高地址到低地址压栈push</span></span><br><span class="line"><span class="comment">// 操作用到3个寄存器</span></span><br><span class="line">add $t0, $a0, $a1</span><br><span class="line">add $t1, $a2, $a3</span><br><span class="line">add $s0, $t0, $t1</span><br><span class="line"><span class="comment">// return f</span></span><br><span class="line">add $v0, $s0, $zero</span><br><span class="line"><span class="comment">// 释放栈空间，pop</span></span><br><span class="line">lw $s0, <span class="number">0</span>($sp)</span><br><span class="line">lw $t0, <span class="number">4</span>($sp)</span><br><span class="line">lw $t1, <span class="number">8</span>($sp)</span><br><span class="line"><span class="comment">// 跳出函数，返回控制权</span></span><br><span class="line">jr $ra</span><br></pre></td></tr></table></figure>
<h3 id="寄存器保存约定"><a class="markdownIt-Anchor" href="#寄存器保存约定"></a> 寄存器保存约定</h3>
<p><code>$t0 ~ $t9</code> 是10个临时寄存器，不一定要保存（使用t寄存器就默认使用者不指望保存）<br />
<code>$s0 ~ $s7</code> 是8个保留寄存器，必须保存<br />
上面的示例中，可以不保存t1、t0，节省步骤</p>
<h3 id="嵌套"><a class="markdownIt-Anchor" href="#嵌套"></a> 嵌套</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> (n * factorial(n - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line">factorial:</span><br><span class="line">addi $sp, $sp, <span class="number">-8</span> <span class="comment">// 分配栈，push</span></span><br><span class="line">sw $ra, <span class="number">4</span>($sp) <span class="comment">// 保存地址</span></span><br><span class="line">sw $a0, <span class="number">0</span>($sp) <span class="comment">// 嵌套函数，需要保存调用时的参数</span></span><br><span class="line"></span><br><span class="line">slti $t0, $a0, <span class="number">1</span></span><br><span class="line">beq $t0, $zero, L1 <span class="comment">// if(n &gt;= 1) L1</span></span><br><span class="line"></span><br><span class="line">addi $v0, $zero, <span class="number">1</span> <span class="comment">// n &lt; 1时执行</span></span><br><span class="line">addi $sp, $sp, <span class="number">8</span> <span class="comment">// 释放，原来sw的寄存器没有变，所有不lw</span></span><br><span class="line">jr $ra</span><br><span class="line"><span class="comment">// 递</span></span><br><span class="line">L1: addi $a0, $a0, <span class="number">-1</span> <span class="comment">// n - 1</span></span><br><span class="line">    jal factorial</span><br><span class="line"><span class="comment">// 归</span></span><br><span class="line">lw $a0, <span class="number">0</span>($sp) <span class="comment">// 释放栈，pop</span></span><br><span class="line">lw $ra, <span class="number">4</span>($sp)</span><br><span class="line">addi $sp, $sp, <span class="number">8</span></span><br><span class="line">mul $v0, $a0, $v0 <span class="comment">// 返回v = n * factorial(n - 1)</span></span><br><span class="line">jr $ra <span class="comment">// 跳出，返回控制权</span></span><br></pre></td></tr></table></figure>
<h3 id="帧指针与堆"><a class="markdownIt-Anchor" href="#帧指针与堆"></a> 帧指针与堆</h3>
<h4 id="帧指针"><a class="markdownIt-Anchor" href="#帧指针"></a> 帧指针</h4>
<p>当存储<strong>局部</strong>数组或结构体时，这些局部变量无法放入寄存器（过大），就需要一个帧指针<strong>统一偏移量</strong>，保存变量到栈中。（函数多于四个参数时，多余参数也会存到栈中。<br />
<strong>帧指针不是必须的</strong>，它方便了统一偏移量；有的编译器将$fp用作$s8。</p>
<h4 id="堆"><a class="markdownIt-Anchor" href="#堆"></a> 堆</h4>
<p>动态数据类型，例如指针，存放在堆里。<br />
在C中，<code>malloc()</code>即申请堆空间，<code>free()</code>即释放堆空间。忘记释放就会占满内存导致泄漏！提前释放就会导致指针指向错误的位置。在Java，有自动的内存分配和无用单元回收避免泄漏和错误指向。</p>
<p>在内存中，从低地址往高地址依次是保留空间、代码段、静态变量段，然后是<strong>从低到高的堆空间</strong>和<strong>从高到低的栈空间</strong>。堆与栈相互增长，最大化利用空间。</p>
<table>
<thead>
<tr>
<th>内存空间</th>
</tr>
</thead>
<tbody>
<tr>
<td>栈↓</td>
</tr>
<tr>
<td>（空间）</td>
</tr>
<tr>
<td>堆↑</td>
</tr>
<tr>
<td>静态数据（常量）</td>
</tr>
<tr>
<td>代码段</td>
</tr>
<tr>
<td>保留</td>
</tr>
</tbody>
</table>
<h2 id="29-取字节8bit或更高位32bit数"><a class="markdownIt-Anchor" href="#29-取字节8bit或更高位32bit数"></a> 2.9 取字节（8bit）或更高位（32bit）数</h2>
<p>C使用ASCII码表示字符，每个ASCII码是8bit；Java使用Unicode，每个Unicode是16bit。因此寄存器也有<code>lb (load byte)、lh (load halfword)、lhu</code>指令</p>
<h3 id="字符串的表示"><a class="markdownIt-Anchor" href="#字符串的表示"></a> 字符串的表示</h3>
<p>三种选择</p>
<ol>
<li>保留第一个位置给出字符串长度（Java）</li>
<li>附加一个带有字符串长度的变量（结构体）</li>
<li>字符串结尾设置一个字符标识（C, ‘\0’)<br />
注意，读取字符串的每个字符时，str[i]不需要每次把i*4。</li>
</ol>
<h2 id="210-指令拓展"><a class="markdownIt-Anchor" href="#210-指令拓展"></a> 2.10 指令拓展</h2>
<h3 id="2101-32bit立即数"><a class="markdownIt-Anchor" href="#2101-32bit立即数"></a> 2.10.1 32bit立即数</h3>
<p>把32bit常量加载到寄存器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">32bit constant:</span><br><span class="line">0000 0000 0011 1101 0000 1001 0000 0000</span><br><span class="line">---</span><br><span class="line">lui $t0, 61 // load upper immediate</span><br><span class="line">---</span><br><span class="line">001111 00000 01000  0000_0000_0011_1101 // MIPS指令</span><br><span class="line">0000_0000_0011_1101 0000_0000_0000_0000 // $t0, 把61拷贝到高16bit</span><br><span class="line">---</span><br><span class="line">ori $t0, $t0, 2304 // or immediate</span><br><span class="line">---</span><br><span class="line">0000_0000_0011_1101 0000_1001_0000_0000 // 把2304拷贝到低16bit</span><br></pre></td></tr></table></figure>
<h3 id="2102-寻址模式"><a class="markdownIt-Anchor" href="#2102-寻址模式"></a> 2.10.2 寻址模式</h3>
<p>J型指令除了6位操作码，其余位都是地址字段：</p>
<table>
<thead>
<tr>
<th>操作码</th>
<th>操作数</th>
</tr>
</thead>
<tbody>
<tr>
<td>6位</td>
<td>26位</td>
</tr>
</tbody>
</table>
<p>bne条件分支指令：</p>
<table>
<thead>
<tr>
<th>操作码</th>
<th>操作数1</th>
<th>操作数2</th>
<th>地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>6位</td>
<td>5位</td>
<td>5位</td>
<td>16位</td>
</tr>
</tbody>
</table>
<p>如果地址只有16位就太小了，所以PC=寄存器+分支地址，地址成为了求和，变成了32位。</p>
<h4 id="pc相对寻址"><a class="markdownIt-Anchor" href="#pc相对寻址"></a> PC相对寻址</h4>
<p>实际上，<strong>MIPS寻址是对于下一条指令</strong>（而不是当前指令），这个设计加速了<strong>大概率事件</strong>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.7.1的while循环，i存在$s3，k存在$s5，save[0]基址存在$s6</span></span><br><span class="line"><span class="keyword">while</span> (save[i] == k)</span><br><span class="line">    i += <span class="number">1</span>;</span><br><span class="line">---</span><br><span class="line">Loop: sll  $t1, $s3, <span class="number">2</span> <span class="comment">// i * 4</span></span><br><span class="line">add  $t1, $t1, $s6 <span class="comment">// 加地址，save[i*4]</span></span><br><span class="line">lw   $t0, <span class="number">0</span>($t1)</span><br><span class="line">bne  $t0, $s5, Exit</span><br><span class="line">addi $s3, $s3, <span class="number">1</span></span><br><span class="line">j    Loop</span><br><span class="line">Exit:</span><br><span class="line">---</span><br><span class="line"><span class="comment">// Q: 把Loop存在80_000，MIPS代码是什么？</span></span><br><span class="line"><span class="comment">// Loop:</span></span><br><span class="line"><span class="number">80000</span>: |<span class="number">0</span> |<span class="number">0</span> |<span class="number">19</span>|<span class="number">9</span> |<span class="number">2</span> |<span class="number">0</span> | <span class="comment">// sll</span></span><br><span class="line"><span class="number">80004</span>: |<span class="number">0</span> |<span class="number">9</span> |<span class="number">22</span>|<span class="number">9</span> |<span class="number">0</span> |<span class="number">32</span>| <span class="comment">// add</span></span><br><span class="line"><span class="number">80008</span>: |<span class="number">35</span>|<span class="number">9</span> |<span class="number">8</span> |   <span class="number">0</span>    | <span class="comment">// lw</span></span><br><span class="line"><span class="comment">// 注意：</span></span><br><span class="line"><span class="number">80012</span>: |<span class="number">5</span> |<span class="number">8</span> |<span class="number">21</span>|<span class="number">2</span>(<span class="number">8B</span>yte)| <span class="comment">// bne，MIPS用字寻址，1word = 4Byte</span></span><br><span class="line"><span class="comment">// 8 + 80016，实际上16位存的是偏移量，利用下一跳地址来寻址</span></span><br><span class="line"><span class="number">80016</span>: |<span class="number">8</span> |<span class="number">19</span>|<span class="number">19</span>|   <span class="number">1</span>    | <span class="comment">// addi</span></span><br><span class="line"><span class="number">80020</span>: |<span class="number">2</span> |     <span class="number">20000</span>    | <span class="comment">// j，完整的2000word*4 Byte</span></span><br><span class="line"><span class="number">80024</span>: ... <span class="comment">// Exit</span></span><br></pre></td></tr></table></figure>
<h4 id="长跳转寻址"><a class="markdownIt-Anchor" href="#长跳转寻址"></a> 长跳转寻址</h4>
<p>对于距离远的跳转，bne的16位地址不够用，可以间接利用j来跳更远距离。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">bne $s0, $s1, L2</span><br><span class="line">j   L1</span><br><span class="line">L2:</span><br></pre></td></tr></table></figure>
<h4 id="寻址模式总结"><a class="markdownIt-Anchor" href="#寻址模式总结"></a> 寻址模式总结</h4>
<ol>
<li>立即数寻址</li>
<li>寄存器寻址</li>
<li>基址寻址</li>
<li>PC相对寻址：bne指令用的方法</li>
<li>伪直接寻址：J型指令用的方法</li>
</ol>
<p>Q：MIPS中，条件分支beq指令的地址范围多大？（K = 1024）<br />
A：beq指令地址前后±128K，beq使用相对PC寻址，相对寻址有1个符号位，PC相对寻址模式把16位地址左移2位与PC相加，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>±</mo><msup><mn>2</mn><mn>15</mn></msup><mo>∗</mo><msup><mn>2</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\pm2^{15} * 2^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">±</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>。</p>
<p>Q：MIPS中，跳转和跳转链接j、jal指令的地址范围多大？（M = 1024K）<br />
A：256M任意地址，J型指令使用伪直接寻址，26位地址左移2位与PC高4位相连，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>26</mn></msup><mo>∗</mo><msup><mn>2</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">2^{26} * 2^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">6</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>。</p>
<h2 id="211-同步"><a class="markdownIt-Anchor" href="#211-同步"></a> 2.11 同步</h2>
<p>计算机进行数据操作必须要知道能不能目标地址读写，也就是任务之间需要同步sync，否则就会竞争race。同步使用lock和unlock操作。</p>
<h3 id="lock基本原理"><a class="markdownIt-Anchor" href="#lock基本原理"></a> lock基本原理</h3>
<p>实际上就是用0表示解锁，1表示加锁，把锁的值和对应的寄存器交换就可以了。lock操作是在硬件层面实现的，不在硬件层实现会很麻烦。<br />
两条指令：load linked、store conditional</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">again:</span><br><span class="line">addi $t0, $zero, <span class="number">1</span> <span class="comment">// 加上锁的值，1表示加锁</span></span><br><span class="line">ll   $t1, <span class="number">0</span>($s1) <span class="comment">// 取寄存器s1的值</span></span><br><span class="line">sc   $t0, <span class="number">0</span>($s1) <span class="comment">// 给s1加锁</span></span><br><span class="line">beq  $t0, $zero, again <span class="comment">// 如果是0（解锁状态），加锁失败，就重试</span></span><br><span class="line">add  $s4, $zero, $t1 <span class="comment">// 把取来的值加载到寄存器s4上操作</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>实际上，不仅仅是多处理需要这样的lock操作；单处理器也需要lock来保证程序运行独立不受干扰、保证写入无错、指令执行成功。</p>
<h2 id="212-从语言到可执行程序"><a class="markdownIt-Anchor" href="#212-从语言到可执行程序"></a> 2.12 从语言到可执行程序</h2>
<h3 id="c语言"><a class="markdownIt-Anchor" href="#c语言"></a> C语言</h3>
<table>
<thead>
<tr>
<th>系统</th>
<th>源文件</th>
<th>汇编文件</th>
<th>目标文件</th>
<th>静态链接库</th>
<th>动态链接库</th>
<th>可执行文件</th>
</tr>
</thead>
<tbody>
<tr>
<td>UNIX</td>
<td>.c</td>
<td>.s</td>
<td>.o</td>
<td>.a</td>
<td>.so</td>
<td>.out / no suffix</td>
</tr>
<tr>
<td>MS-DOS</td>
<td>.C</td>
<td>.ASM</td>
<td>.OBJ</td>
<td>.LIB</td>
<td>.DLL</td>
<td>.EXE</td>
</tr>
</tbody>
</table>
<h4 id="1-编译"><a class="markdownIt-Anchor" href="#1-编译"></a> 1. 编译</h4>
<p>编译器把高级语言转换成汇编语言</p>
<h4 id="2-汇编"><a class="markdownIt-Anchor" href="#2-汇编"></a> 2. 汇编</h4>
<p>汇编器把汇编语言汇编成机器代码，生成obj file，包括了机器语言指令、数据和指令正确放入内存所需的信息。<br />
汇编语言有硬件层没有实现的<strong>伪指令</strong>，如<code>move dest, tar</code>移动，实际上在硬件层是<code>add dest, 0, tar</code><br />
MIPS汇编器使用16进制Hex<br />
为了把汇编语言转换成二进制，有一个符号表。表由标号、地址对构成</p>
<h4 id="3-链接"><a class="markdownIt-Anchor" href="#3-链接"></a> 3. 链接</h4>
<p>链接器把独立汇编的机器语言程序拼接到一起，生成可执行文件。链接器做到拼接操作，使程序每次只需要重新编译和汇编<strong>一部分代码</strong>。修补代码比重新编译和汇编快得多（ccache）。<br />
工作步骤：</p>
<ol>
<li>将代码、数据块象征性地放入内存</li>
<li>决定数据、指令标签的地址</li>
<li>修补内部、外部引用<br />
也就是它寻找旧地址并用新地址取代它们。</li>
</ol>
<h4 id="4-加载"><a class="markdownIt-Anchor" href="#4-加载"></a> 4. 加载</h4>
<p>工作步骤：</p>
<ol>
<li>读取exe文件头，确定代码段、数据段大小</li>
<li>为内容、数据创建足够的地址空间</li>
<li>将exe中的指令、数据复制到内存</li>
<li>主程序参数复制到栈顶</li>
<li>初始化寄存器，栈指针指向第一个空位置</li>
<li>跳转到启动例程，把参数复制到寄存器，调用main()；并在return 0后调用exit终止程序</li>
</ol>
<h4 id="动态链接库-dll"><a class="markdownIt-Anchor" href="#动态链接库-dll"></a> 动态链接库 DLL</h4>
<p>传统的链接静态链接库的方法很快。但是静态链接库有更新问题，并且库可能很大，静态库需要全部装载到程序。<br />
而动态链接库，只有程序运行的时候才链接和加载例程。（第一次调用库例程会把整个库走一遍，以后会按需调用）<br />
DLL需要额外空间存储动态链接库信息，但是不需要复制或链接整个库。</p>
<h3 id="java"><a class="markdownIt-Anchor" href="#java"></a> JAVA</h3>
<h4 id="编译与解释"><a class="markdownIt-Anchor" href="#编译与解释"></a> 编译与解释</h4>
<p>编译依赖特定指令集，而Java是为了兼容性而发明的。<br />
Java程序被编译成Java字节码，经过JVM虚拟机解释字节码运行。<br />
解释的优势是可移植性，也导致了它更慢、性能较差。<br />
现代的方法是使用即时编译器（Just In Time complier），<strong>编译过的部分保存起来，下次运行直接调用</strong>，这样每次运行都会更快。在今天，实际上Java与C的性能差距越来越小了。</p>
<blockquote>
<p>思考：“缓存”的概念真的很伟大，在计算机的世界中几乎无处不在。</p>
</blockquote>
<h2 id="213-一个完整程序示例"><a class="markdownIt-Anchor" href="#213-一个完整程序示例"></a> 2.13 一个完整程序示例</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> v[], <span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> temp; <span class="comment">// 交换相邻项</span></span><br><span class="line">    temp = v[k];</span><br><span class="line">    v[k] = v[k+<span class="number">1</span>];</span><br><span class="line">    v[k+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> v[], <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; v[j] &gt; v[j+<span class="number">1</span>]; j -= <span class="number">1</span>) &#123;</span><br><span class="line">            swap(v, j); <span class="comment">// 数组后项比前项大，则交换相邻项</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---</span><br><span class="line">swap:</span><br><span class="line">sll $t1, $a1, <span class="number">2</span></span><br><span class="line">add $t1, $a0, $t1 <span class="comment">// 取址</span></span><br><span class="line"><span class="comment">// 取数</span></span><br><span class="line">lw $t0, <span class="number">0</span>($t1) </span><br><span class="line">lw $t2, <span class="number">4</span>($t1)</span><br><span class="line"><span class="comment">// 交换</span></span><br><span class="line">sw $t2, <span class="number">0</span>($t1) </span><br><span class="line">sw $t0, <span class="number">4</span>($t1)</span><br><span class="line"></span><br><span class="line">sort:</span><br><span class="line">addi $sp, $sp, <span class="number">-20</span> <span class="comment">// 分配栈空间，并保存寄存器值</span></span><br><span class="line">sw   $ra, <span class="number">16</span>($sp)</span><br><span class="line">sw   $s3, <span class="number">12</span>($sp)</span><br><span class="line">sw   $s2,  <span class="number">8</span>($sp)</span><br><span class="line">sw   $s1,  <span class="number">4</span>($sp)</span><br><span class="line">sw   $s0,  <span class="number">0</span>($sp)</span><br><span class="line"></span><br><span class="line">move $s2, $a0 <span class="comment">// 复制参数到寄存器, int v[]</span></span><br><span class="line">move $s3, $a1 <span class="comment">// int n</span></span><br><span class="line"></span><br><span class="line">move $s0, $zero <span class="comment">// 循环初始化i = 0</span></span><br><span class="line">for1tst:</span><br><span class="line">slt  $t0, $s0, $s3 <span class="comment">// i &lt; n ?</span></span><br><span class="line">beq  $t0, $zero, exit1 <span class="comment">// i &gt; n =&gt; exit1，跳出循环</span></span><br><span class="line"></span><br><span class="line">addi $s1, $s0, <span class="number">-1</span> <span class="comment">// j = i-1</span></span><br><span class="line">for2tst:</span><br><span class="line">slti $t0, $s1, <span class="number">0</span> <span class="comment">// j &lt; 0 ?</span></span><br><span class="line">bne  $t0, $zero, exit2 <span class="comment">// j &lt; 0 =&gt; exit2</span></span><br><span class="line">sll  $t1, $s1, <span class="number">2</span></span><br><span class="line">add  $t2, $s2, $t1 <span class="comment">// 得到v[j],v[j+1]</span></span><br><span class="line">lw   $t3, <span class="number">0</span>($t2)</span><br><span class="line">lw   $t4, <span class="number">4</span>($t2)</span><br><span class="line">slt  $t0, $t4, $t3 <span class="comment">// v[j+1] &lt; v[j] ?</span></span><br><span class="line">beq  $t0, $zero, exit2 <span class="comment">// v[j+1] &gt; v[j]，从小到大 =&gt; exit2</span></span><br><span class="line"></span><br><span class="line">move $a0, $s2 <span class="comment">// int v[]</span></span><br><span class="line">move $a1, $s1 <span class="comment">// int j</span></span><br><span class="line">jal  swap</span><br><span class="line"></span><br><span class="line">addi $s1, $s1, <span class="number">-1</span> <span class="comment">// j--</span></span><br><span class="line">j    for2tst <span class="comment">// 下一轮循环</span></span><br><span class="line"></span><br><span class="line">exit2:</span><br><span class="line">addi $s0, $s0, <span class="number">-1</span></span><br><span class="line">j    for1tst</span><br><span class="line"></span><br><span class="line">exit1:</span><br><span class="line">lw   $s0, <span class="number">0</span>($sp)</span><br><span class="line">lw   $s1, <span class="number">4</span>($sp)</span><br><span class="line">lw   $s2, <span class="number">8</span>($sp)</span><br><span class="line">lw   $s3, <span class="number">12</span>($sp)</span><br><span class="line">lw   $ra, <span class="number">16</span>($sp)</span><br><span class="line">addi $sp, $sp, <span class="number">20</span></span><br><span class="line"></span><br><span class="line">j    $ra</span><br></pre></td></tr></table></figure>
<p>上面的程序，不适用jal swap，直接把swap复制到程序里，叫做<strong>内联程序</strong>，可以省掉指令。<br />
然而，如果内联程序在多个地方调用，代码复用率会降低，有可能导致<strong>cache不命中</strong>，从而性能下降。</p>
<p><strong>执行时间是衡量程序性能的唯一指标</strong>，不是代码量，也不是CPI</p>
<p>MIPS的编译器总是会-16来保存四个参数寄存器，不管有没有这么多参数。</p>
<h2 id="213-数组和指针"><a class="markdownIt-Anchor" href="#213-数组和指针"></a> 2.13 数组和指针</h2>
<p>在硬件中，指针*p++会智能地增加地址长度(+4而不是1)<br />
数组必须要做下标*4，再加上首地址，指针不需要。<br />
然而，现代编译器会优化数组的代码；所以，为了写出可读的程序，放心用数组吧！</p>
<h2 id="214-编译解释高级语言"><a class="markdownIt-Anchor" href="#214-编译解释高级语言"></a> 2.14 编译/解释高级语言</h2>
<p>面向对象语言：针对对象而不是过程；<strong>针对数据而不是逻辑</strong></p>
<h2 id="215-其他指令集"><a class="markdownIt-Anchor" href="#215-其他指令集"></a> 2.15 其他指令集</h2>
<h3 id="armv7"><a class="markdownIt-Anchor" href="#armv7"></a> ARMv7</h3>
<ul>
<li>有更多（9种）寻址模式，没有专门寄存器保存0</li>
<li>有4位条件码决定分支是否执行</li>
<li>每一条代码有可选执行条件（占用代码空间少，节省运行时间）</li>
<li>解释12位立即数字段的方式很新颖：低8位填0，变成32位，然后循环右移，由此可以用32位字的范围<strong>表示所有2的幂次</strong></li>
</ul>
<h3 id="x86"><a class="markdownIt-Anchor" href="#x86"></a> x86</h3>
<ul>
<li>ARM和MIPS是单独的小组在1985年推出的；x86是很多个互相独立小组开发的，并且持续改进了35+年。</li>
<li><strong>兼容性是一个“金手铐”</strong></li>
<li>x86要求算术、逻辑运算中一个操作数必须又是源操作数，又是目的操作数（Dest = Dest + Source）</li>
<li>x86的操作数可以存在存储器里</li>
</ul>
<h3 id="armv8"><a class="markdownIt-Anchor" href="#armv8"></a> ARMv8</h3>
<ul>
<li>ARMv8更像MIPS</li>
<li>为了使寄存器加宽为64位，做了完全的改进（与x86只做了很小改进）</li>
<li>PC不再是寄存器</li>
<li>有一个zero寄存器，32个通用寄存器</li>
</ul>
<h2 id="219-谬误与陷阱"><a class="markdownIt-Anchor" href="#219-谬误与陷阱"></a> 2.19 谬误与陷阱</h2>
<ul>
<li>x86很强大，可以循环执行某条指令。然而，这导致了额外的性能开销。代码复制比循环快1.5倍；用更大的浮点寄存器，比用x86整数寄存器，复制操作比复杂指令快2倍</li>
<li>C语言有register，把变量存在寄存器；但是<strong>编译器能比程序员更好地分配寄存器</strong></li>
<li>一旦代码写好，下一个危险是它变成一个流行的程序</li>
</ul>
<h1 id="chapter3-计算机的算术运算"><a class="markdownIt-Anchor" href="#chapter3-计算机的算术运算"></a> Chapter3 计算机的算术运算</h1>
<h2 id="31-引言"><a class="markdownIt-Anchor" href="#31-引言"></a> 3.1 引言</h2>
<ul>
<li>计算机小数和其他实数如何表示？</li>
<li>操作生成了一个无法表示的大数该怎样处理？</li>
<li>硬件的乘除法是怎样的？</li>
</ul>
<h2 id="32-加减法"><a class="markdownIt-Anchor" href="#32-加减法"></a> 3.2 加减法</h2>
<p>用加法表示减法，取反相加<br />
用补码表示整数，好处是符合硬件的特征（溢出容易判断）<br />
<strong>加法，只有符号相同才会溢出，异号相加最多变成全2</strong>；减法是反过来。</p>
<p>在做减法时，<br />
如果用一个正数减去一个负数得到一个负的结果，<br />
或者用一个负数减去一个正数然后得到一个正的结果，<br />
则发生了溢出 。</p>
<p>无符号数可以忽略溢出，因为无符号一般表示地址</p>
<p>溢出时产生异常，也称为中断，交给操作系统处理。<br />
遇到异常，会跳到预设好的指令异常处理程序的地址。有EPC（Exception Program Counter，异常PC）来存储异常发生的地址，方便后序跳转。<br />
EPC有一个问题：跳转到中断的位置，先恢复寄存器，EPC的值就没了；恢复寄存器同时保留EPC，那么有一个寄存器的值就没了。<br />
针对这个问题，MIPS使用$k1、$k0两个异常时不会恢复的寄存器。异常处理程序会把返回地址放在其中一个寄存器里面。<br />
小测验：MIPS对字节和半字用lb、lh，sw、sh指令，但是算术运算就是用普通的add。MIPS没有针对半字的运算。</p>
<p>饱和：溢出后，设置数值为最大数或最小数。例如，收音机，不断调大音量后，如果采用没有溢出的那几位，会发生：最大音量突然变小声的情况。<br />
MIPS没有检测溢出的条件分支。只能用一系列指令实现。</p>
<p>更快的加法：使用超前进位加法器（carry lookahead）</p>
<h2 id="33-乘法"><a class="markdownIt-Anchor" href="#33-乘法"></a> 3.3 乘法</h2>
<p>乘法就是复制：</p>
<ol>
<li>当乘数为1，把被乘数复制到合适位置</li>
<li>当乘数为0，填0<br />
乘法经常要处理溢出，因为总是有32位×32位的情况<br />
编译器使用移位来优化乘法</li>
</ol>
<p>有符号的乘法：记住符号位，转为正数相乘；单独处理符号<br />
更快的乘法：并行加法运算，无需等待</p>
<h2 id="34-除法"><a class="markdownIt-Anchor" href="#34-除法"></a> 3.4 除法</h2>
<p>除法和乘法差不多，但是计算机只能一位一位尝试做减法来运算。<br />
除法：得到商和余数</p>
<p>有符号的除法：使用 <em>被除数 = 商 x 除数 + 余数</em> 这个公式来处理符号<br />
更快的除法：使用SRT算法，通过查找表来猜测商。还有一种算法，商为负数时，不要马上加回去，而是依照另一个等式来继续运算。</p>
<p>MIPS的硬件既可以做乘法，又可以做除法，Hi存放余数、Lo存放商</p>
<h2 id="35-浮点数"><a class="markdownIt-Anchor" href="#35-浮点数"></a> 3.5 浮点数</h2>
<h3 id="351-浮点数表示"><a class="markdownIt-Anchor" href="#351-浮点数表示"></a> 3.5.1 浮点数表示</h3>
<table>
<thead>
<tr>
<th>单精度</th>
<th>1</th>
<th>8</th>
<th>23</th>
</tr>
</thead>
<tbody>
<tr>
<td>func</td>
<td>sign</td>
<td>Exp</td>
<td>Frac</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>双精度</th>
<th>1</th>
<th>11</th>
<th>52(20+32)</th>
</tr>
</thead>
<tbody>
<tr>
<td>func</td>
<td>sign</td>
<td>Exp</td>
<td>Frac</td>
</tr>
</tbody>
</table>
<h4 id="bias-偏阶"><a class="markdownIt-Anchor" href="#bias-偏阶"></a> Bias 偏阶</h4>
<p>为了让最小的负指数表示为全0，最大的正指数表示为全1。浮点数使用Biased Notion<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mrow><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi></mrow></msup><mo>×</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>F</mi><mi>r</mi><mi>a</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mrow><mi>E</mi><mi>x</mi><mi>p</mi><mi>o</mi><mi>n</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo>+</mo><mi>B</mi><mi>i</mi><mi>a</mi><mi>s</mi></mrow></msup></mrow><annotation encoding="application/x-tex">(-1)^{sign} \times (1 + Fraction) \times 2^{Exponent + Bias}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0746639999999998em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">p</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">t</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">s</span></span></span></span></span></span></span></span></span></span></span></span><br />
IEEE 754使用127作为单精度Bias，即指数为-1，表示为126 0111 1110B；指数为1，表示为1000 0000B，正指数看起来比负指数大。</p>
<h4 id="十进制数转浮点"><a class="markdownIt-Anchor" href="#十进制数转浮点"></a> 十进制数转浮点</h4>
<ul>
<li>-0.75如何用浮点数表示？<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mn>0.75</mn><mo>=</mo><mo>−</mo><mn>3</mn><mi mathvariant="normal">/</mi><mn>4</mn><mo>=</mo><mrow><mo>−</mo><mn mathvariant="bold">3</mn><mi mathvariant="bold">/</mi><msup><mn mathvariant="bold">2</mn><mn mathvariant="bold">2</mn></msup></mrow><mo>=</mo><mo>−</mo><mn>1</mn><msub><mn>1</mn><mn>2</mn></msub><mi mathvariant="normal">/</mi><msup><mn>2</mn><mn>2</mn></msup><mo>=</mo><mo>−</mo><mn>1.1</mn><mo>×</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">-0.75 = -3/4 = \mathbf{-3/2^2} = -11_2/2^2 = -1.1 \times 2^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">0</span><span class="mord">.</span><span class="mord">7</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord">3</span><span class="mord">/</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathbf">3</span><span class="mord mathbf">/</span><span class="mord"><span class="mord mathbf">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathbf mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">.</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span><br />
套公式，-1+127=126</li>
</ul>
<table>
<thead>
<tr>
<th>sign</th>
<th>Biased Exponent</th>
<th>Fraction</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>0111 1110</td>
<td>1000 0000 0000 0000 0000 000</td>
</tr>
</tbody>
</table>
<p><strong>技巧：表示成“除以2的次方”的形式</strong></p>
<table>
<thead>
<tr>
<th>sign</th>
<th>Biased Exponent</th>
<th>Fraction</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1000 0001</td>
<td>0100 0000 0000 0000 0000 000</td>
</tr>
</tbody>
</table>
<p>套公式，129-127=2<br />
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>×</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mn>0.25</mn><mo stretchy="false">)</mo><mo>×</mo><msup><mn>2</mn><mn>2</mn></msup><mo>=</mo><mo>−</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">(-1) \times (1 + 0.25) \times 2^2 = -5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">2</span><span class="mord">5</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">5</span></span></span></span></p>
<h3 id="352-浮点数加法"><a class="markdownIt-Anchor" href="#352-浮点数加法"></a> 3.5.2 浮点数加法</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    start(开始)</span><br><span class="line">    step1[1. 比较两个数的指数；将指数小的数右移，直到指数匹配]</span><br><span class="line">    step2[2. 尾数相加]</span><br><span class="line">    step3[3. 结果规格化]</span><br><span class="line">    jdg1&#123;&quot;上溢、下溢？&quot;&#125;</span><br><span class="line">    err(异常)</span><br><span class="line">    step4[4. 尾数舍入，保留适当位数]</span><br><span class="line">    jdg2&#123;&quot;是否为规格化数？&quot;&#125;</span><br><span class="line">    ed(结束)</span><br><span class="line"></span><br><span class="line">    start --&gt; step1 --&gt; step2 --&gt; step3 --&gt; jdg1 </span><br><span class="line">    </span><br><span class="line">    jdg1 -- N --&gt; step4 --&gt; jdg2</span><br><span class="line">    jdg2 -- Y --&gt; ed</span><br><span class="line">    jdg2 -- N --&gt; step3</span><br><span class="line">    </span><br><span class="line">    jdg1 -- Y --&gt; err</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<h3 id="353-浮点数乘法"><a class="markdownIt-Anchor" href="#353-浮点数乘法"></a> 3.5.3 浮点数乘法</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    start(开始)</span><br><span class="line">    stp1[1. 指数相加，加上偏阶值得到新的Bias Exponent]</span><br><span class="line">    stp2[2. 尾数相乘]</span><br><span class="line">    stp3[3. 规格化乘积；乘积右移，指数增大]</span><br><span class="line">    jdg1&#123;上溢或下溢？&#125;</span><br><span class="line">    err(异常)</span><br><span class="line">    stp4[4. 尾数舍入]</span><br><span class="line">    jdg2&#123;是否仍为规格化数？&#125;</span><br><span class="line">    stp6[6. 符号相同正，符号相异负]</span><br><span class="line">    ed(结束)</span><br><span class="line"></span><br><span class="line">    start --&gt; stp1 --&gt; stp2 --&gt; stp3 --&gt; jdg1 --&gt;|N| stp4</span><br><span class="line">    jdg1 --&gt;|Y| err</span><br><span class="line">    </span><br><span class="line">    stp4 --&gt; jdg2 --&gt;|Y| stp6 --&gt; ed</span><br><span class="line">    jdg2 --&gt;|N| stp3</span><br></pre></td></tr></table></figure>
<h3 id="354-mips-浮点指令"><a class="markdownIt-Anchor" href="#354-mips-浮点指令"></a> 3.5.4 MIPS 浮点指令</h3>
<p>lwc1 (Load Word into Coprocessor1)：取浮点<br />
swc1：存浮点<br />
Coprocessor：80年代的晶体管没办法把浮点运算和整数运算的单元放在同一个芯片上，所以有了协同处理器。</p>
<p>add.s/add.d：单、双精度浮点运算<br />
双精度如何储存？用$f2 $f3一对浮点寄存器，用偶数作为名字<br />
<strong>实际上，为了避免浮点运算，编译器会把程序中的浮点运算的结果直接存到内存里。</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> <span class="title function_">f2c</span><span class="params">(<span class="type">float</span> fahr)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> ((<span class="number">5.0</span> / <span class="number">9.0</span>) * (fahr - <span class="number">32.0</span>));</span><br><span class="line">    <span class="comment">// 5.0 / 9.0 直接存入内存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="355-算术精确问题"><a class="markdownIt-Anchor" href="#355-算术精确问题"></a> 3.5.5 算术精确问题</h3>
<p>在IEEE 753中，中间计算会保留多2位，称为保护位和舍入位，根据这两位来舍入，提升精确度。<br />
衡量精确度：尾数最低位ulp (unit in the last place) 这个术语可以衡量精确度。IEEE 754保证浮点运算在半个ulp以内</p>
<h2 id="39-谬误与陷阱"><a class="markdownIt-Anchor" href="#39-谬误与陷阱"></a> 3.9 谬误与陷阱</h2>
<ol>
<li>右移指令无法代替2次幂相除！</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// -5</span><br><span class="line">1111 1111 1111 1111 1111 1111 1111 1011B </span><br><span class="line">// -5 &gt;&gt; 2 = -2，而答案是-1</span><br><span class="line">1111 1111 1111 1111 1111 1111 1111 1110B </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>浮点加法不能使用结合律！舍入会毁掉一切。</li>
<li>对于浮点运算，顺序执行正常的程序，不一定能正常并行执行。同样是精度问题，会导致每次输出不同结果。</li>
</ol>
]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>AI爱外卖</title>
    <url>/ComputerScience/%E9%A1%B9%E7%9B%AE/AI%E7%88%B1%E5%A4%96%E5%8D%96/</url>
    <content><![CDATA[<h1 id="项目心得"><a class="markdownIt-Anchor" href="#项目心得"></a> 项目心得</h1>
<h2 id="24109"><a class="markdownIt-Anchor" href="#24109"></a> 24.10.9</h2>
<p>将AliOss换成本地存储。可是一直插入不成功，使用Swagger调试，甚至数据库什么都接受不到！非常诡异的BUG<br />
原来，是导入了错误的RequestBody，导致前端提交的表单怎么都接受不到！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入了错误的包</span></span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.parameters.RequestBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br></pre></td></tr></table></figure>
<h1 id="nginx"><a class="markdownIt-Anchor" href="#nginx"></a> Nginx</h1>
<h2 id="反向代理"><a class="markdownIt-Anchor" href="#反向代理"></a> 反向代理</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        # 反向代理,处理管理端发送的请求</span><br><span class="line">        location /api/ &#123;</span><br><span class="line">            # localhost/api/abc转发到下面admin/abc</span><br><span class="line">            proxy_pass   http://localhost:8080/admin/;</span><br><span class="line">            #proxy_pass   http://webservers/admin/;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好处：</p>
<ul>
<li>不会暴露服务器，服务器可以安全放在内网，由nginx转发、缓存。</li>
</ul>
<h2 id="负载均衡"><a class="markdownIt-Anchor" href="#负载均衡"></a> 负载均衡</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream webservers&#123;</span><br><span class="line">      # 服务器组，按权重分配</span><br><span class="line">      server 127.0.0.1:8080 weight=90 ;</span><br><span class="line">      server 127.0.0.1:8088 weight=10 ;</span><br><span class="line">      # ip_hash 根据ip分配</span><br><span class="line">      # least_conn 分配到最少链接的服务器</span><br><span class="line">      # url_hash 根据url分配</span><br><span class="line">      # fair 分配到响应时间最短的服务器</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        </span><br><span class="line">        # 反向代理,处理管理端发送的请求</span><br><span class="line">        location /api/ &#123;</span><br><span class="line">            # 负载均衡</span><br><span class="line">            proxy_pass   http://webservers/admin/;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="swagger"><a class="markdownIt-Anchor" href="#swagger"></a> Swagger</h1>
<blockquote>
<p>Knife4j：Java MVC框架集成Swagger</p>
</blockquote>
<p>API接口文档生成、测试</p>
]]></content>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Framework</title>
    <url>/ComputerScience/%E7%AC%94%E8%AE%B0/Spring%20Framework/</url>
    <content><![CDATA[<blockquote>
<p>所有的Java云平台都能够使用基于JAR的打包方式，WAR文件只在一些云平台上能够运行。</p>
</blockquote>
<h1 id="pomxml-更换-maven-源"><a class="markdownIt-Anchor" href="#pomxml-更换-maven-源"></a> Pom.xml 更换 Maven 源</h1>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.quoters<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quoters-incorporated<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>quoters-incorporated<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>REST service to support the guides<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>gturnquist<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Greg Turnquist<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span>gturnquist at vmware.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">organization</span>&gt;</span>VMware, Inc.<span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">roles</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span>Project Lead<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">roles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">organization</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>VMware, Inc.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://spring.io<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Apache License, Version 2.0<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://www.apache.org/licenses/LICENSE-2.0<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">comments</span>&gt;</span></span><br><span class="line">                Copyright 2011 the original author or authors.</span><br><span class="line"></span><br><span class="line">                Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">                you may not use this file except in compliance with the License.</span><br><span class="line">                You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">                https://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">                Unless required by applicable law or agreed to in writing, software</span><br><span class="line">                distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">                WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or</span><br><span class="line">                implied.</span><br><span class="line">                See the License for the specific language governing permissions and</span><br><span class="line">                limitations under the License.</span><br><span class="line">            <span class="tag">&lt;/<span class="name">comments</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置阿里云仓库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun-repos<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun-repos<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="tight-coupling-紧耦合"><a class="markdownIt-Anchor" href="#tight-coupling-紧耦合"></a> Tight Coupling 紧耦合</h1>
<p>在Spring框架以前，使用排序算法需要将算法实例化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComplexBusinessService</span> &#123;</span><br><span class="line">  <span class="type">SortAlgorithm</span> <span class="variable">sortAlgorithm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BubbleSortAlgorithm</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSortAlgorithm</span> <span class="keyword">implements</span> <span class="title class_">SortAlgorithm</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Good code has loose coupling.</p>
</blockquote>
<p>移除依赖项的实例化可以移除紧耦合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComplexBusinessService</span> &#123;</span><br><span class="line">  SortAlgorithm sortAlgorithm; <span class="comment">// = new BubbleSortAlgorithm();</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">ComplexBusinessService</span><span class="params">(SortAlgorithm sortAlgorithm)</span> &#123; <span class="comment">// 创建构造函数</span></span><br><span class="line">      <span class="built_in">this</span>.sortAlgorithm = sortAlgorithm;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> classBubbleSortAlgorithm <span class="keyword">implements</span> <span class="title class_">SortAlgorithm</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Spring Framework instantiates objects and populates the dependencies.</p>
</blockquote>
<span id="more"></span>
<h1 id="component"><a class="markdownIt-Anchor" href="#component"></a> @Component</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">// 告诉Spring管理这两个类的实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComplexBusinessService</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span> <span class="comment">// 告诉Spring这是依赖项</span></span><br><span class="line">  SortAlgorithm sortAlgorithm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSortAlgorithm</span> <span class="keyword">implements</span> <span class="title class_">SortAlgorithm</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Spring的工作：</span></span><br><span class="line"><span class="type">SortAlgorithm</span> <span class="variable">sortAlgorithm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BubbleSortAlgorithm</span>();</span><br><span class="line"><span class="type">ComplexBusinessService</span> <span class="variable">businessService</span> <span class="operator">=</span></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">ComplexBusinessService</span>(sortAlgorithm);</span><br></pre></td></tr></table></figure>
<h1 id="dependency-injection"><a class="markdownIt-Anchor" href="#dependency-injection"></a> Dependency Injection</h1>
<p>Spring理解你放在类顶部的不同注释，它确保它管理的所有对象的实例都是使用正确填充的依赖项创建的。</p>
<h1 id="术语"><a class="markdownIt-Anchor" href="#术语"></a> 术语</h1>
<ul>
<li>Beans：Spring管理的不同对象</li>
<li>Autowiring：Spring识别依赖关系、它的匹配项并填充的过程。</li>
<li>Dependency Injection：将算法作为依赖项注入到复杂业务中。</li>
<li>Inversion Of Control：从需要依赖关系的类中获取Control，并将框架控制权交给Spring</li>
<li>IOC Container</li>
<li>Application Context：创建和管理所有Bean的上下文。典型的IOC容器。</li>
</ul>
<h1 id="beans"><a class="markdownIt-Anchor" href="#beans"></a> Beans</h1>
<ul>
<li>What are the beans? <code>@Component</code></li>
<li>What are the dependencies of a bean? <code>@Autowired</code></li>
<li>Where to search for beans? <code>SpringApplication</code><br />
Features:</li>
<li>Singleton: One instance per Spring Context</li>
<li>Prototype: New bean whenever requested <code>@Scope(&quot;prototype&quot;)/ @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</code></li>
<li>request: One bean per HTTP request</li>
<li>session: One bean per HTTP session</li>
</ul>
<h1 id="primary"><a class="markdownIt-Anchor" href="#primary"></a> @Primary</h1>
<blockquote>
<p>If you have two components on the class path of the same type then use @Primary.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// It also decides which Algo to use.</span></span><br><span class="line"><span class="keyword">private</span> SortAlgorithm bubbleSortAlgorithm;</span><br><span class="line"><span class="comment">// However, if quickSortAlgorithm is marked as @Primary, then @Primary has higher priority.</span></span><br></pre></td></tr></table></figure>
<h1 id="qualifier"><a class="markdownIt-Anchor" href="#qualifier"></a> @Qualifier</h1>
<blockquote>
<p>Use @Qualifier(“name”) to name and choose the algo you want to use.</p>
</blockquote>
<p>However, use name is much clearer than use @Qualifier. @Qualifier is more likely a rename tool.</p>
<h1 id="constructorsetter-injection"><a class="markdownIt-Anchor" href="#constructorsetter-injection"></a> Constructor/Setter Injection</h1>
<blockquote>
<p>All mandatory(necessary) dependencies should be autowired using Constructor Injection. Other(Optional) was recommended to use Setter Injection.</p>
</blockquote>
<h1 id="modularity-of-spring"><a class="markdownIt-Anchor" href="#modularity-of-spring"></a> Modularity of Spring</h1>
<blockquote>
<p>One of the important things about Spring is that it’s not one big framework. Spring is built in a very modular way. It enables you to use specific models.</p>
</blockquote>
<h1 id="why-spring-popular"><a class="markdownIt-Anchor" href="#why-spring-popular"></a> Why Spring popular</h1>
<ol>
<li>With porperly usage of Dependency Injection, we are able to write test unit easily.</li>
<li>No plumbing(not core) code. 在内部写好了许多Exceptions，使用Spring的程序员几乎不需要自己写Exception Handling。</li>
<li>Modularity.(Flexible to other framework)</li>
<li>Stay up with the trends. like Spring Cloud.</li>
</ol>
<h1 id="eclipse-skill"><a class="markdownIt-Anchor" href="#eclipse-skill"></a> Eclipse Skill</h1>
<p><code>&lt;Ctrl+Space&gt;</code> Auto Completion<br />
<code>&lt;Ctrl+1&gt;</code> File Operation<br />
<code>&lt;C-S-L&gt;</code> List Shortcuts<br />
<code>&lt;C-S-R&gt;</code> Resource Finding<br />
<code>&lt;C-S-T&gt;</code> Type Finding<br />
<code>F3</code> Goto Declaration<br />
<code>F4</code> Type Hierarchy<br />
<code>&lt;A-S-S&gt;</code> Code Generation</p>
<h1 id="maven"><a class="markdownIt-Anchor" href="#maven"></a> Maven</h1>
<p>Convention over Configuration<br />
<code>mvn compile</code>: Compile source files<br />
<code>mvn test compile</code>mvn clean<code>: Delete target directory</code>mvn test<code>: Run unit tests</code>mvn package<code>: Create a jar</code>mvn help:effective-pom<code></code>mvn dependency:tree`</p>
<h1 id="gradle"><a class="markdownIt-Anchor" href="#gradle"></a> Gradle</h1>
<p>Cross-platform: C/C++, JavaScript, Python…<br />
Completely Programmable<br />
Deliver Faster(Cache)</p>
<h1 id="dao-data-accessed-object"><a class="markdownIt-Anchor" href="#dao-data-accessed-object"></a> DAO: Data Accessed Object</h1>
<h1 id="servlet"><a class="markdownIt-Anchor" href="#servlet"></a> Servlet</h1>
<blockquote>
<p>A very simple Java class which can take request in, and can take respond back with a  response.</p>
</blockquote>
<ol>
<li>extends javax.servlet.http.HttpServlet</li>
<li>@WebServlet(urlPatterns = “/login.do”)</li>
<li>doGet(HttpServletRequest request, HttpServletResponse response) throws IOException</li>
</ol>
<h1 id="实践"><a class="markdownIt-Anchor" href="#实践"></a> 实践</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/login.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, </span></span><br><span class="line"><span class="params">            HttpServletResponse response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;	</span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/webapp/your/path/to/login.jsp&quot;</span>).forward(request, response);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- /pom.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.in28minutes<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>in28Minutes-first-webapp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaee-web-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">showWarnings</span>&gt;</span>true<span class="tag">&lt;/<span class="name">showWarnings</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">contextReloadable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">contextReloadable</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- webapp/WEB-INF/web.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">version</span>=<span class="string">&quot;3.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>To do List<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.do<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span> <span class="comment">&lt;!-- 首页默认后缀名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务</span></span><br><span class="line">mvn tomcat7:run</span><br></pre></td></tr></table></figure>
<h2 id="passing-parameters"><a class="markdownIt-Anchor" href="#passing-parameters"></a> Passing Parameters</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://your.site?parameter=value&amp;param2=value</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">param</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;parameter&quot;</span>);</span><br><span class="line">request.setAttribute(<span class="string">&quot;parameter&quot;</span>, param);</span><br></pre></td></tr></table></figure>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  Hello, $&#123;param&#125;! &lt;!-- Expression Language --&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="scriptlet-java-code-in-jsp"><a class="markdownIt-Anchor" href="#scriptlet-java-code-in-jsp"></a> Scriptlet: Java Code in JSP</h2>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">java.util.<span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Date();</span><br><span class="line">%&gt;</span><br><span class="line">&lt;div&gt;Current date is &lt;%=date%&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>JSP is a view. It should only show Information. There shouldn’t have any business logic.</p>
</blockquote>
<h2 id="disadvantage-of-get"><a class="markdownIt-Anchor" href="#disadvantage-of-get"></a> Disadvantage of GET</h2>
<blockquote>
<p>Any router can see the URL. Never use GET to pass your password. It’s unsecure and it is the reason why there is POST.</p>
</blockquote>
<h2 id="post"><a class="markdownIt-Anchor" href="#post"></a> POST</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login.do&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  Enter your name </span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> /&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Login&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserValidationService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserValidationService</span>();</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">          HttpServletResponse response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">      </span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isUserValid</span> <span class="operator">=</span> service.isUserValid(name, password);</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">if</span> (isUserValid) &#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">            request.setAttribute(<span class="string">&quot;password&quot;</span>, password);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/WEB-INF/views/welcome.jsp&quot;</span>).forward(request, response);  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;errMsg&quot;</span>, <span class="string">&quot;Invalid Credentials!&quot;</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;WEB-INF/views/login.jsp&quot;</span>).forward(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserValidationService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isUserValid</span><span class="params">(String user, String password)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (user.equals(<span class="string">&quot;account&quot;</span>) &amp;&amp; password.equals(<span class="string">&quot;password&quot;</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="spring-mvc"><a class="markdownIt-Anchor" href="#spring-mvc"></a> Spring MVC</h1>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="controller"><a class="markdownIt-Anchor" href="#controller"></a> Controller</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/login&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="model"><a class="markdownIt-Anchor" href="#model"></a> Model</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/login&quot;, method = RequestMethod.POST)</span> <span class="comment">// Only handle POST</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">handleLoginRequest</span><span class="params">(<span class="meta">@RequestParam</span> String name,</span></span><br><span class="line"><span class="params">  <span class="meta">@RequestParam</span> String password, ModelMap model)</span> &#123;</span><br><span class="line">    model.put(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">    model.put(<span class="string">&quot;password&quot;</span>, password); <span class="comment">// request.setAttribute(&quot;password&quot;, password);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;welcome&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>ICS PA实验课</title>
    <url>/ComputerScience/%E9%A1%B9%E7%9B%AE/ICS%20PA%E5%AE%9E%E9%AA%8C%E8%AF%BE/</url>
    <content><![CDATA[<h1 id="tips"><a class="markdownIt-Anchor" href="#tips"></a> Tips</h1>
<ul>
<li>参考资料：<a href="https://note.tonycrane.cc/cs/system/pa/">https://note.tonycrane.cc/cs/system/pa/</a></li>
</ul>
<ol>
<li>使用反向代理时，<code>git</code>相关命令会出问题</li>
<li>实验前，创建新分支<code>pa号</code>，在其中做修改，完成以后合并pa到master中，并转回master分支</li>
</ol>
<h1 id="模板"><a class="markdownIt-Anchor" href="#模板"></a> 模板</h1>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># PA</span></span><br><span class="line"><span class="section">## notification</span></span><br><span class="line"><span class="bullet">-</span> </span><br><span class="line"><span class="section">## difficulties</span></span><br><span class="line"><span class="bullet">1.</span> </span><br><span class="line"><span class="section">## summary</span></span><br></pre></td></tr></table></figure>
<h1 id="pa0"><a class="markdownIt-Anchor" href="#pa0"></a> PA0</h1>
<h2 id="notification"><a class="markdownIt-Anchor" href="#notification"></a> notification</h2>
<ul>
<li>全程使用git</li>
<li><code>git commit --allow-empty</code>可以使git空（无更改的）提交</li>
</ul>
<span id="more"></span>
<h2 id="difficulties"><a class="markdownIt-Anchor" href="#difficulties"></a> difficulties</h2>
<ol>
<li>第一个坑，<code>make menuconfig</code>时提示<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Makefile:18: *** NEMU_HOME= is not a NEMU repo.  Stop.   </span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>原因：用了tmux分割窗口，上窗口<code>source .bashrc</code>更新了，下窗口没有，所以$NEMU_HOME没有定义<br />
2. 运行<code>make menuconfig</code>提示</p>
   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make[1]: bison: No such file or directory <span class="comment"># 没有安装bison</span></span><br><span class="line">make[1]: flex: No such file or directory <span class="comment"># lack of &#x27;flex&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> summary</h2>
<ul>
<li>今天，2024年2月9日，除夕，我完成了PA0。在这个过程中，我主要遇到了几个困难：</li>
</ul>
<ol>
<li>VMware断网。先是弃用了Debian，装了ics2023指定的Ubuntu 22.04版本，才发现仍然没有网络，是VMware的问题，初始化网络后得以解决。</li>
<li>环境问题。Ubuntu desktop版apt-get使用有问题，换成了server版。死磕最小安装，最后在安装man的过程中不得不unminimize，联网下载了很久，<strong>聪明误把聪明误</strong>。看到课程要求必须使用GUI，又非常笨蛋地下回了desktop版；最后才想到使用server并安装gnome图形界面。</li>
<li>ssh终端问题。Mobaxterm右对齐窗口溢出、无法调整窗口大小的bug，几经周折换成了Terminus。</li>
<li>反向代理问题。git clone过程中因为开启了github反向代理，一直被拒绝连接。</li>
<li>缺乏linux使用经验。看到nemu提示<code>No such file or directory</code>不知道是没有安装工具。</li>
</ol>
<ul>
<li>最后我想说，我终于做到了。英语、按要求debug c程序、看懂命令行回显、搞懂git的使用方式，在接触ICS PA的215天后，我做到了。</li>
<li>Where there is a will, there is a wall. The wall only blocks those who don’t really want to get closer to their will. That is it.</li>
</ul>
<h2 id="to-do"><a class="markdownIt-Anchor" href="#to-do"></a> To-do</h2>
<ul>
<li>Read the source code and the mannual, Search the web and AI, and Keep grit.</li>
</ul>
<h1 id="pa1"><a class="markdownIt-Anchor" href="#pa1"></a> PA1</h1>
<h2 id="ahead"><a class="markdownIt-Anchor" href="#ahead"></a> Ahead</h2>
<p>2024/02/10 成功运行马里奥.nes</p>
<h3 id="notification-2"><a class="markdownIt-Anchor" href="#notification-2"></a> notification</h3>
<ul>
<li>独立解决问题。即使是一个小bug，也能<strong>顺带</strong>学到许多</li>
<li>多看篮框题</li>
<li><code>make ... -j2</code>使用两个CPU编译</li>
<li>ccache：节省编译时间的工具。会把目标文件保存，即使<code>make clean</code>了也能保持非常快的编译速度（跳过了重复编译的过程，发挥加速作用）</li>
<li>NEMU：NES Emulator</li>
<li>“程序是代码”视角（整体）：ICS PA中期会介绍，抽象了细节，更容易理解整个程序</li>
<li>“程序是状态机”视角（局部）：ICS第三章专门分析状态机视角（单步执行程序，进入细节部分）</li>
<li>阅读源代码：从main()开始。</li>
<li><strong>kconfig：配置系统。</strong><code>make menuconfig</code>时生成conf文件，解析kconfig，二者结合生成宏定义，存储在<code>nemu/include/generated/autoconf.h</code>, 阅读C代码时使用;<code>nemu/include/config/auto.conf</code>, 阅读Makefile时使用</li>
</ul>
<h3 id="difficulties-2"><a class="markdownIt-Anchor" href="#difficulties-2"></a> difficulties</h3>
<ol>
<li>运行ALSA时Terminus的显示问题。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Power on</span><br><span class="line">Initializing video...                  </span><br><span class="line">ALSA lib confmisc.c:855:(parse_card) cannot find card <span class="string">&#x27;0&#x27;</span> <span class="comment"># ALSA在Terminus中显示不出来</span></span><br></pre></td></tr></table></figure>
</li>
<li>没有GUI界面，<code>make ARCH=native run mainargs=mario</code>显示如下：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Power on</span><br><span class="line">Initializingyideo</span><br><span class="line">system time: 8s) FPS = 59</span><br><span class="line">System time: 9s) FPS = 59</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>最后安装了LXDE，过程中需要安装lightdm（相比gdm3更轻的显示管理器），用<code>cat /etc/X11/default-display-manager</code>命令查看当前使用的显示管理器<br />
3. 磁盘爆了。<code>/dev/mapper/ubuntu--vg-ubuntu--lv 9.8G 9.8G 0 100% /</code>用完了分区的10G存储空间，扩展分区时也提示<code>No space left on device</code>，连拓展分区的命令都写不下了:)，最后<code>apt-get autoclean</code>拯救了我，为我清除了0.8G的内容。<br />
4. manual理解问题。配置<code>ccache</code>时，手册提示</p>
   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">To use the second method on a Debian system, it’s easiest to just prepend /usr/lib/ccache to your PATH.</span><br></pre></td></tr></table></figure>
<p>但是我没有搞懂prepend yo your PATH的含义。（没想到就是添加到$PATH，字面意思，PATH不指代其他路径）最终AI帮了我：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># echo $PATH结果</span></span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改~/.bashrc</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/usr/lib/ccache:<span class="variable">$PATH</span>&quot;</span> </span><br><span class="line"><span class="comment"># 双引号里的PATH是上面的旧的PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#echo $PATH结果</span></span><br><span class="line">/usr/lib/ccache:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</span><br></pre></td></tr></table></figure>
<p>可以看到在$PATH最前面加上了ccache（即PATH=ccache:$PATH(oringin)的含义）<br />
附：[[…/笔记/Linux笔记#环境变量|常见环境变量]]<br />
5. 不知道如何使用<code>grep</code>命令查找。不知道main函数在哪，找到main函数了不知道main执行的函数在哪。[[…/笔记/Linux笔记#^0608f3|grep教程]]</p>
<h2 id="rtfs"><a class="markdownIt-Anchor" href="#rtfs"></a> RTFS</h2>
<h3 id="to-do-2"><a class="markdownIt-Anchor" href="#to-do-2"></a> to-do</h3>
<p>[ ] 记得学习gdb调试，并且修正直接退出的makefile bug</p>
<h3 id="notification-3"><a class="markdownIt-Anchor" href="#notification-3"></a> notification</h3>
<ul>
<li>在<code>cmd_c()</code>函数中, 调用<code>cpu_exec()</code>的时候传入了参数<code>-1</code>, 你知道这是什么意思吗?</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="number">74</span> <span class="type">static</span> <span class="type">void</span> <span class="title function_">execute</span><span class="params">(<span class="type">uint64_t</span> n)</span> &#123; <span class="comment">// 无符号型！</span></span><br><span class="line"> <span class="number">75</span>   Decode s;</span><br><span class="line"> <span class="number">76</span>   <span class="keyword">for</span> (;n &gt; <span class="number">0</span>; n--) &#123; <span class="comment">// 传入-1则永远n&lt;0（错误）</span></span><br><span class="line">...        ...</span><br></pre></td></tr></table></figure>
<p>意味着无限循环执行（错了，n是无符号整数，被解释成最大的数，也就是说会终止）</p>
<ul>
<li>在程序设计课上老师告诉你, 当程序执行到<code>main()</code>函数返回处的时候, 程序就退出了, 你对此深信不疑. 但你是否怀疑过, 凭什么程序执行到<code>main()</code>函数的返回处就结束了? 如果有人告诉你, 程序设计课上老师的说法是错的, 你有办法来证明/反驳吗? 如果你对此感兴趣, 请在互联网上搜索相关内容。<br />
C99标准：</li>
</ul>
<blockquote>
<p>5.1.2.2.3 Program termination<br />
If the return type of the main function is a type compatible with int, a return from the<br />
initial call to the main function is equivalent to calling the exit function with the value<br />
returned by the main function as its argument;11) reaching the } that terminates the<br />
main function returns a value of 0. If the return type is not compatible with int, the<br />
termination status returned to the host environment is unspecified.<br />
Forward references: definition of terms (7.1.1), the exit function (7.22.4.4).</p>
</blockquote>
<ul>
<li>
<p>为了测试大家是否已经理解框架代码, 我们给大家设置一个练习: 如果在运行NEMU之后直接键入<code>q</code>退出, 你会发现终端输出了一些错误信息. 请分析这个错误信息是什么原因造成的, 然后尝试在NEMU中修复它.</p>
</li>
<li></li>
</ul>
<h3 id="difficulties-3"><a class="markdownIt-Anchor" href="#difficulties-3"></a> difficulties</h3>
<ol>
<li>不知道<code>sdb_mainloop()</code>怎么就跳到<code>cpu_exec()</code>去了。vim搜索后发现在<code>cmd_c</code>函数里哈哈</li>
<li>学会了直接用<code>:e folder/file</code>和<code>:bn/bp</code>直接在vim里打开和切换文件</li>
<li></li>
</ol>
<h2 id="summary-2"><a class="markdownIt-Anchor" href="#summary-2"></a> summary</h2>
]]></content>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP ADTP后台管理</title>
    <url>/ComputerScience/%E9%A1%B9%E7%9B%AE/PHP%20ADTP%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="信息系统架构"><a class="markdownIt-Anchor" href="#信息系统架构"></a> 信息系统架构</h1>
<ul>
<li>信息化系统：前台 + 后台 + 数据库</li>
<li>B/S 模式</li>
<li>前端 -&gt; Server[Apache-&gt;PHP(TP6.0)] -&gt; SQL DataBase</li>
<li>运行逻辑：
<ul>
<li>Client发送require请求(http协议)，包含header（length、refer信息）、body（数据）</li>
<li>Apache接受请求，给PHP做处理</li>
<li>PHP读取、处理数据；判断数据是否损毁、是否需要退回</li>
<li>数据更新到前端，并返回结果(success/fail)</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h1 id="think-php-60-mvc模式"><a class="markdownIt-Anchor" href="#think-php-60-mvc模式"></a> Think Php 6.0 MVC模式</h1>
<ul>
<li>MVC模式: Model View Controller</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">      后台            数据交互  组织查询语句</span><br><span class="line"> | Controller | ---&gt; | Model | ---&gt; | DataBase |</span><br><span class="line">    ↓   ↖ ------------------------------ ↙</span><br><span class="line">决定数据处理</span><br><span class="line"> | View |</span><br><span class="line">   前端</span><br></pre></td></tr></table></figure>
<h2 id="举例"><a class="markdownIt-Anchor" href="#举例"></a> 举例</h2>
<ul>
<li>加载页面，产生一个require请求<code>https://website.net/app_name/class_name/method_name</code></li>
<li>在<code>project_floder/app_name/class_name.php</code>可以找到<code>method_name</code>方法</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">method_name</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 接收数据、构造请求</span></span><br><span class="line">    <span class="variable">$attribute1</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;attribute1&#x27;</span>, <span class="number">0</span>);  <span class="comment">// body中的内容</span></span><br><span class="line">    <span class="variable">$attribute2</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;attribute2&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="comment">// 处理逻辑</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$attribute1</span>))&#123;</span><br><span class="line">        <span class="variable">$attribute</span> = <span class="title class_">ShopLib</span>::<span class="title function_ invoke__">wxAppLogin</span>(<span class="variable">$attribute1</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$attribute</span>) &#123;</span><br><span class="line">            <span class="variable">$errData</span> = [</span><br><span class="line">                <span class="string">&#x27;errcode&#x27;</span> =&gt; -<span class="number">2</span>, <span class="comment">// 相当于字典，errData[&#x27;errcode&#x27;] = -2</span></span><br><span class="line">                <span class="string">&#x27;msg&#x27;</span> =&gt; <span class="string">&#x27;error message&#x27;</span></span><br><span class="line">            ];</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">json</span>(<span class="variable">$errData</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 到Model中查找数据</span></span><br><span class="line">    <span class="variable">$Model</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getModel</span>(); <span class="comment">// getModel()默认使用定义的主模型，可以在common/model中找到定义</span></span><br><span class="line">    <span class="variable">$where</span>[<span class="string">&#x27;key&#x27;</span>] = [</span><br><span class="line">        <span class="string">&#x27;key_name&#x27;</span> =&gt; <span class="variable">$value</span>,</span><br><span class="line">    ];</span><br><span class="line">    <span class="comment">// 处理逻辑</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$attribute</span>))&#123;</span><br><span class="line">        <span class="variable">$where</span>[<span class="string">&#x27;key&#x27;</span>] = [</span><br><span class="line">            <span class="string">&#x27;key_name&#x27;</span> =&gt; <span class="variable">$attribute</span>[<span class="string">&#x27;key_name&#x27;</span>],</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$Result</span> = <span class="variable">$Model</span>::<span class="title function_ invoke__">getDetail</span>(<span class="variable">$where</span>[<span class="string">&#x27;key&#x27;</span>], <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 组装数据</span></span><br><span class="line">    <span class="variable">$result</span> = [</span><br><span class="line">        <span class="string">&#x27;errcode&#x27;</span> =&gt; <span class="number">0</span>,</span><br><span class="line">        <span class="string">&#x27;data&#x27;</span> =&gt; <span class="variable">$Result</span></span><br><span class="line">    ];</span><br><span class="line">    <span class="comment">// 返回前台</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$result</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><code>app_name/class_name/method_name?attribute1=1&amp;attribute2=10</code>'?'后面的内容是参数</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>PyEcharts 数据可视化</title>
    <url>/ComputerScience/%E9%A1%B9%E7%9B%AE/PyEcharts%20%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
    <content><![CDATA[<h1 id="10-bar-柱状图"><a class="markdownIt-Anchor" href="#10-bar-柱状图"></a> 1.0 Bar 柱状图</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar</span><br><span class="line"></span><br><span class="line">bar = Bar()</span><br><span class="line">bar.add_xaxis([<span class="string">&quot;衬衣&quot;</span>, <span class="string">&quot;羊毛衫&quot;</span>, <span class="string">&quot;西装&quot;</span>, <span class="string">&quot;裤子&quot;</span>, <span class="string">&quot;鞋子&quot;</span>, <span class="string">&quot;袜子&quot;</span>])</span><br><span class="line">bar.add_yaxis(<span class="string">&quot;商家&quot;</span>, [<span class="number">5</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">70</span>, <span class="number">90</span>])</span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line">bar = (</span><br><span class="line">    Bar()</span><br><span class="line">    .add_xaxis([<span class="string">&quot;衬衣&quot;</span>, <span class="string">&quot;羊毛衫&quot;</span>, <span class="string">&quot;西装&quot;</span>, <span class="string">&quot;裤子&quot;</span>, <span class="string">&quot;鞋子&quot;</span>, <span class="string">&quot;袜子&quot;</span>])</span><br><span class="line">    .add_yaxis(<span class="string">&quot;商家&quot;</span>, [<span class="number">5</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">70</span>, <span class="number">90</span>])</span><br><span class="line">    .add_yaxis(<span class="string">&quot;商家B&quot;</span>, [<span class="number">15</span>, <span class="number">6</span>, <span class="number">45</span>, <span class="number">20</span>, <span class="number">35</span>, <span class="number">66</span>]) <span class="comment"># 支持两个柱子同时生成</span></span><br><span class="line">    .set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">&quot;主标题&quot;</span>, subtitle=<span class="string">&quot;副标题&quot;</span>)) <span class="comment"># 生成标题</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bar.render(<span class="string">&quot;bar.html&quot;</span>) <span class="comment"># 渲染为 bar.html，默认是 render.html</span></span><br></pre></td></tr></table></figure>
<ul>
<li>效果</li>
</ul>
<span id="more"></span>
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Awesome-pyecharts</title>
                <script type="text/javascript" src="https://assets.pyecharts.org/assets/v5/echarts.min.js"></script>
</head>
<body >
    <div id="92cc11b94d1e4006b0fb4797d930ff23" class="chart-container" style="width:900px; height:500px; "></div>
    <script>
        var chart_92cc11b94d1e4006b0fb4797d930ff23 = echarts.init(
            document.getElementById('92cc11b94d1e4006b0fb4797d930ff23'), 'white', {renderer: 'canvas'});
        var option_92cc11b94d1e4006b0fb4797d930ff23 = {
    "animation": true,
    "animationThreshold": 2000,
    "animationDuration": 1000,
    "animationEasing": "cubicOut",
    "animationDelay": 0,
    "animationDurationUpdate": 300,
    "animationEasingUpdate": "cubicOut",
    "animationDelayUpdate": 0,
    "aria": {
        "enabled": false
    },
    "color": [
        "#5470c6",
        "#91cc75",
        "#fac858",
        "#ee6666",
        "#73c0de",
        "#3ba272",
        "#fc8452",
        "#9a60b4",
        "#ea7ccc"
    ],
    "series": [
        {
            "type": "bar",
            "name": "\u5546\u5bb6",
            "legendHoverLink": true,
            "data": [
                5,
                20,
                40,
                10,
                70,
                90
            ],
            "realtimeSort": false,
            "showBackground": false,
            "stackStrategy": "samesign",
            "cursor": "pointer",
            "barMinHeight": 0,
            "barCategoryGap": "20%",
            "barGap": "30%",
            "large": false,
            "largeThreshold": 400,
            "seriesLayoutBy": "column",
            "datasetIndex": 0,
            "clip": true,
            "zlevel": 0,
            "z": 2,
            "label": {
                "show": true,
                "margin": 8
            }
        }
    ],
    "legend": [
        {
            "data": [
                "\u5546\u5bb6"
            ],
            "selected": {}
        }
    ],
    "tooltip": {
        "show": true,
        "trigger": "item",
        "triggerOn": "mousemove|click",
        "axisPointer": {
            "type": "line"
        },
        "showContent": true,
        "alwaysShowContent": false,
        "showDelay": 0,
        "hideDelay": 100,
        "enterable": false,
        "confine": false,
        "appendToBody": false,
        "transitionDuration": 0.4,
        "textStyle": {
            "fontSize": 14
        },
        "borderWidth": 0,
        "padding": 5,
        "order": "seriesAsc"
    },
    "xAxis": [
        {
            "show": true,
            "scale": false,
            "nameLocation": "end",
            "nameGap": 15,
            "gridIndex": 0,
            "inverse": false,
            "offset": 0,
            "splitNumber": 5,
            "minInterval": 0,
            "splitLine": {
                "show": true,
                "lineStyle": {
                    "show": true,
                    "width": 1,
                    "opacity": 1,
                    "curveness": 0,
                    "type": "solid"
                }
            },
            "data": [
                "\u886c\u8863",
                "\u7f8a\u6bdb\u886b",
                "\u897f\u88c5",
                "\u88e4\u5b50",
                "\u978b\u5b50",
                "\u889c\u5b50"
            ]
        }
    ],
    "yAxis": [
        {
            "show": true,
            "scale": false,
            "nameLocation": "end",
            "nameGap": 15,
            "gridIndex": 0,
            "inverse": false,
            "offset": 0,
            "splitNumber": 5,
            "minInterval": 0,
            "splitLine": {
                "show": true,
                "lineStyle": {
                    "show": true,
                    "width": 1,
                    "opacity": 1,
                    "curveness": 0,
                    "type": "solid"
                }
            }
        }
    ]
};
        chart_92cc11b94d1e4006b0fb4797d930ff23.setOption(option_92cc11b94d1e4006b0fb4797d930ff23);
    </script>
</body>
</html>
<ul>
<li>生成图片</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> snapshot_selenium <span class="keyword">import</span> snapshot <span class="keyword">as</span> driver</span><br><span class="line"><span class="keyword">from</span> pyecharts.render <span class="keyword">import</span> make_snapshot</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bar_chart</span>() -&gt; Bar:</span><br><span class="line">    bar = (</span><br><span class="line">        Bar()</span><br><span class="line">        .add_xaxis([<span class="string">&quot;衬衣&quot;</span>, <span class="string">&quot;羊毛衫&quot;</span>, <span class="string">&quot;西装&quot;</span>, <span class="string">&quot;裤子&quot;</span>, <span class="string">&quot;鞋子&quot;</span>, <span class="string">&quot;袜子&quot;</span>])</span><br><span class="line">        .add_yaxis(<span class="string">&quot;商家&quot;</span>, [<span class="number">5</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">70</span>, <span class="number">90</span>])</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> bar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要安装 snapshot-selenium 或者 snapshot-phantomjs</span></span><br><span class="line">make_snapshot(driver, bar_chart().render(), <span class="string">&quot;bar.png&quot;</span>)</span><br><span class="line"><span class="comment"># 调用函数bar_chart()进行生成</span></span><br><span class="line"><span class="comment"># 可以直接使用bar.render()，其中bar=Bar()</span></span><br></pre></td></tr></table></figure>
<h1 id="20-饼图"><a class="markdownIt-Anchor" href="#20-饼图"></a> 2.0 饼图</h1>
]]></content>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>Django动态网页 Python项目</title>
    <url>/ComputerScience/%E9%A1%B9%E7%9B%AE/Django%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%20Python%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="00-规范"><a class="markdownIt-Anchor" href="#00-规范"></a> 0.0 规范</h1>
<p>我要编写一个名为“学习笔记”的 Web 应用程序,让用户能够记录感兴趣的主题,并在学习每个主题的过程中添加日志条目。“学习笔记”的主页对这个网站进行描述,并邀请用户注册或登录。用户登录后,可以创建新主题、添加新条目以及阅读既有的条目。</p>
<p>目录 ll_project 包含 4 个文件, 其中最重要的是 <a href="http://settings.py">settings.py</a>、<a href="http://urls.py">urls.py</a> 和 <a href="http://wsgi.py">wsgi.py</a>。文件 <a href="http://settings.py">settings.py</a> 指定 Django 如何与系统交互以及如何管理项目。<br />
在开发项目的过程中,我们将修改其中的一些设置,并添加一些设置。<br />
文件 <a href="http://urls.py">urls.py</a> 告诉 Django,应创建哪些网页来响应浏览器请求。<br />
文件 <a href="http://wsgi.py">wsgi.py</a> 帮助 Django 提供它创建的文件,名称是 web server gateway interface(Web 服务器网关接口)的首字母缩写。</p>
<h1 id="10-创建环境"><a class="markdownIt-Anchor" href="#10-创建环境"></a> 1.0 创建环境</h1>
<h2 id="11-创建虚拟环境"><a class="markdownIt-Anchor" href="#11-创建虚拟环境"></a> 1.1 创建虚拟环境</h2>
<p>在独立的项目文件夹下运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m venv ll_env</span><br><span class="line"></span><br><span class="line">python -m ensurepip --default-pip <span class="comment"># 重装pip</span></span><br></pre></td></tr></table></figure>
<p>将会创造一个<code>ll_env</code>文件夹<br />
可以使用下面的命令激活虚拟环境。激活虚拟环境后，安装的模组将只在虚拟环境中生效，而不干扰到电脑上Python的模组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ll_env/bin/activate <span class="comment"># Linux系统</span></span><br><span class="line"><span class="built_in">source</span> ll_env/Scripts/activate <span class="comment"># Windows系统</span></span><br><span class="line"></span><br><span class="line">(ll_env)</span><br><span class="line">work_directory$ <span class="comment"># 命令提示符前会显示(ll_env)</span></span><br></pre></td></tr></table></figure>
<p>使用<code>deactive</code>取消激活虚拟环境</p>
<h2 id="12-安装配置django"><a class="markdownIt-Anchor" href="#12-安装配置django"></a> 1.2 安装配置Django</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install --upgrade pip <span class="comment"># 更新pip</span></span><br><span class="line">pip install django <span class="comment"># 安装Django</span></span><br><span class="line">django-admin startproject ll_project . <span class="comment"># 初始化Django</span></span><br><span class="line">python manage.py migrate <span class="comment"># 生成数据库</span></span><br><span class="line">python manage.py runserver <span class="comment"># 生成预览，可以在本地8000端口看到网页</span></span><br></pre></td></tr></table></figure>
<pre><code>Django手册： https://docs.djangoproject.com/en/4.1/ref/models/fields/
</code></pre>
<span id="more"></span>
<h2 id="13-创建和配置app"><a class="markdownIt-Anchor" href="#13-创建和配置app"></a> 1.3 创建和配置App</h2>
<ul>
<li>创建app</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py startapp learning_logs(app_name)</span><br></pre></td></tr></table></figure>
<ul>
<li>保存更改</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更改了.py文件就要重新执行下面的命令保存，否则会出错</span></span><br><span class="line">python manage.py makemigrations learning_logs(app name)</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>
<p>每当需要修改“学习笔记”管理的数据时,都采取如下三个步骤:修改<br />
<a href="http://models.py">models.py</a>,对 learning_logs 调用 makemigrations,以及让 Django迁移项目。</p>
<h2 id="14-创建管理员及注册模型到admin页面"><a class="markdownIt-Anchor" href="#14-创建管理员及注册模型到admin页面"></a> 1.4 创建管理员及注册模型到admin页面</h2>
<ul>
<li>创建管理员</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br><span class="line">ll_admin, Abc123</span><br></pre></td></tr></table></figure>
<ul>
<li>注册模型，打开<code>admin.py</code>并注册模型</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Model1, Model2 <span class="comment"># improt models with their name</span></span><br><span class="line"></span><br><span class="line">admin.site.register(Model1)</span><br></pre></td></tr></table></figure>
<h2 id="15-定义模型models"><a class="markdownIt-Anchor" href="#15-定义模型models"></a> 1.5 定义模型Models</h2>
<ol>
<li>打开<code>app_name/models.py</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># your models:</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Model_name1</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Document&quot;&quot;&quot;</span></span><br><span class="line">    text = models.TextField() <span class="comment"># field attribute</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return a string representation of the model.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.text</span><br><span class="line">        <span class="comment"># will be used as output</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Model_name2</span>(models.Model):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Document&quot;&quot;&quot;</span></span><br><span class="line">    content = models.TextField(max_length=<span class="number">200</span>) <span class="comment"># parameter is optional</span></span><br><span class="line">    something_else = models.ForeignKey(Model_name1, on_delete=models.CASCADE)</span><br><span class="line">    <span class="comment"># foreign key, cascading delete级联删除</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Return a string representation of the model.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.content</span><br></pre></td></tr></table></figure>
<h2 id="16-激活模型"><a class="markdownIt-Anchor" href="#16-激活模型"></a> 1.6 激活模型</h2>
<ul>
<li>在<code>settings.py</code>下找到<code>INSTALLED_APPS</code>并添加App名称</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">        <span class="comment"># My apps.</span></span><br><span class="line">    <span class="string">&#x27;app_name&#x27;</span>, <span class="comment"># the app&#x27;s file name</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Default django apps.</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    --snip--</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="17-shell命令行"><a class="markdownIt-Anchor" href="#17-shell命令行"></a> 1.7 Shell命令行</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ python manage.py shell</span><br><span class="line"><span class="keyword">from</span> learning_logs.models <span class="keyword">import</span> Topic</span><br><span class="line">Topic.objects.<span class="built_in">all</span>() <span class="comment"># 返回Queryset， 查询结果集</span></span><br><span class="line"></span><br><span class="line">topics = Topic.objects.<span class="built_in">all</span>()</span><br><span class="line"><span class="comment"># 列出topic的id与名称</span></span><br><span class="line"><span class="keyword">for</span> topic <span class="keyword">in</span> topics:</span><br><span class="line">    <span class="built_in">print</span>(topic.<span class="built_in">id</span>, topic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 知道id后可以调用方法查看相应内容</span></span><br><span class="line">t = Topic.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">t.text</span><br><span class="line">t.date_added</span><br><span class="line"></span><br><span class="line">t.entry_set.<span class="built_in">all</span>() <span class="comment"># 查看entries具体内容</span></span><br></pre></td></tr></table></figure>
<h1 id="20-制作网页"><a class="markdownIt-Anchor" href="#20-制作网页"></a> 2.0 制作网页</h1>
<p>使用 Django 创建网页的过程分为三个阶段：定义 URL，编写视图，以及编写模板。按什么顺序完成这三个阶段无关紧要，但在本项目中，总是先定义 URL 模式。<strong>URL 模式</strong>描述了 URL 的构成，让 Django 知道如何将浏览器请求与网站 URL 匹配，以确定返回哪个网页。</p>
<h2 id="21-制作主页"><a class="markdownIt-Anchor" href="#21-制作主页"></a> 2.1 制作主页</h2>
<ol>
<li>增加配置文件，在<code>ll_project</code>中编辑<code>urls.py</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include <span class="comment"># 导入方法</span></span><br><span class="line">    </span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include(<span class="string">&#x27;app_folder_name.urls&#x27;</span>)), <span class="comment"># 添加app文件夹的名称</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>创建并编辑<code>app_folder_name/urls.</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Defines URL patterns for learning_logs.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">&#x27;learning_logs&#x27;</span> <span class="comment"># app文件夹名称</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># Home page</span></span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>编写<code>views.py</code></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;The home page for Learning Log.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;app_floder_name/index.html&#x27;</span>) <span class="comment"># template路径</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>创建<code>tmplates/app_floder_name</code>文件夹，并创建<code>index.html</code>文件</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Learning Log<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Learning Log helps you keep track of your learning, for any topic you&#x27;re</span><br><span class="line">interested in.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="22-制作网页模板"><a class="markdownIt-Anchor" href="#22-制作网页模板"></a> 2.2 制作网页模板</h2>
<ol>
<li>创建<code>base.html</code></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;learning_logs:index&#x27; %&#125;&quot;</span>&gt;</span>Learning Log<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;&#123;% endblock content %&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用<code>base.html</code>模板</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#x27;learning_logs/base.html&#x27; %&#125; <span class="comment">&lt;!-- &#x27;extends 表示继承哪个模板 --&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Learning Log helps you keep track of your learning, for any topic you&#x27;re</span><br><span class="line">  interested in.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endblock content %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="23-制作topic与entry网页"><a class="markdownIt-Anchor" href="#23-制作topic与entry网页"></a> 2.3 制作Topic与Entry网页</h2>
<h3 id="231-topics"><a class="markdownIt-Anchor" href="#231-topics"></a> 2.3.1 Topics</h3>
<ol>
<li>修改<code>urls.py</code>，创建<code>topics</code>界面</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># Home page</span></span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.index, name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">    <span class="comment"># Page that shows all topics.</span></span><br><span class="line">    path(<span class="string">&#x27;topics/&#x27;</span>, views.topics, name=<span class="string">&#x27;topics&#x27;</span>), </span><br><span class="line">    <span class="comment"># 标注网址、调用方法、名称 </span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>修改<code>views.py</code>，创建<code>topics</code>方法</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Topic <span class="comment"># 导入Topic类</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">topics</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Show all topics.&quot;&quot;&quot;</span></span><br><span class="line">     topics = Topic.objects.order_by(<span class="string">&#x27;date_added&#x27;</span>) <span class="comment"># 顺序</span></span><br><span class="line">     context = &#123;<span class="string">&#x27;topics&#x27;</span>: topics&#125; <span class="comment"># 内容组织方式</span></span><br><span class="line">     <span class="keyword">return</span> render(request, <span class="string">&#x27;learning_logs/topics.html&#x27;</span>, context) <span class="comment"># 指出html文件名，传入内容</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>创建<code>topics.html</code>界面</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% extends <span class="string">&#x27;learning_logs/base.html&#x27;</span> %&#125; <span class="comment"># 模板</span></span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">  &lt;p&gt;Topics&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">   &lt;ul&gt; <span class="comment"># 无序列表 unordered list</span></span><br><span class="line">     &#123;% <span class="keyword">for</span> topic <span class="keyword">in</span> topics %&#125; <span class="comment"># for循环</span></span><br><span class="line">       &lt;li&gt;&#123;&#123; topic.text &#125;&#125;&lt;/li&gt; <span class="comment"># 有序列表 list item, text是models.py的Topic类中定义的属性</span></span><br><span class="line">     &#123;% empty %&#125;</span><br><span class="line">      &lt;li&gt;No topics have been added yet.&lt;/li&gt;</span><br><span class="line">     &#123;% endfor %&#125;</span><br><span class="line">   &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endblock content %&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>修改<code>base.html</code>，添加链接</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line"> &lt;a href=<span class="string">&quot;&#123;% url &#x27;learning_logs:index&#x27; %&#125;&quot;</span>&gt;Learning Log&lt;/a&gt; -</span><br><span class="line"> &lt;a href=<span class="string">&quot;&#123;% url &#x27;learning_logs:topics&#x27; %&#125;&quot;</span>&gt;Topics&lt;/a&gt; <span class="comment"># Topics链接</span></span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<h3 id="232-topic"><a class="markdownIt-Anchor" href="#232-topic"></a> 2.3.2 Topic</h3>
<ul>
<li>同样是4步走</li>
</ul>
<ol>
<li>修改<code>urls.py</code>，创建<code>topic</code>界面</li>
<li>
<ol start="2">
<li>修改<code>views.py</code>，创建<code>topic</code>方法</li>
</ol>
</li>
<li>创建<code>topic.html</code>界面</li>
<li><strong>修改<code>topics.html</code>，添加链接</strong>（不是修改<code>base.html</code>）</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">--snip--</span><br><span class="line"><span class="comment"># 特定主题的详细页面</span></span><br><span class="line">path(<span class="string">&#x27;topics/&lt;int:topic_id&gt;/&#x27;</span>, views.topic, name=<span class="string">&#x27;topic&#x27;</span>), </span><br><span class="line"><span class="comment"># &lt;int:topic_id&gt;变量匹配每个单独topic的id</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">topic</span>(<span class="params">request, topic_id</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示单个主题及其所有的条目&quot;&quot;&quot;</span></span><br><span class="line">    topic = Topic.objects.get(<span class="built_in">id</span>=topic_id) <span class="comment"># query检索id</span></span><br><span class="line">    entries = topic.entry_set.order_by(<span class="string">&#x27;-date_added&#x27;</span>) <span class="comment"># 负date，按时间倒序，新的在前</span></span><br><span class="line">    context = &#123;<span class="string">&#x27;topic&#x27;</span>: topic, <span class="string">&#x27;entries&#x27;</span>: entries&#125; <span class="comment"># 组织方式</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;learning_logs/topic.html&#x27;</span>, context) <span class="comment"># 指定html文件名，返回内容</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- topic.html --&gt;</span></span><br><span class="line">    &#123;% extends &#x27;learning_logs/base.html&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Topic: &#123;&#123; topic.text &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Entries:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for entry in entries %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; entry.date_added|date:&#x27;M d, Y H:i&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- |设置时间格式 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; entry.text|linebreaks &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line">      <span class="comment">&lt;!-- |textlinebreaks将包含换行符的长条目转换为浏览器能够理解的格式，</span></span><br><span class="line"><span class="comment">      以免显示为不间断的文本块。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% empty %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>There are no entries for this topic yet.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% endblock content %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- topics.html --&gt;</span></span><br><span class="line">&#123;% for topic in topics %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;learning_logs:topic&#x27; topic.id %&#125;&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123; topic.text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">&#123;% empty %&#125;</span><br></pre></td></tr></table></figure>
<h1 id="11-第一阶段总结"><a class="markdownIt-Anchor" href="#11-第一阶段总结"></a> 1.1 第一阶段总结</h1>
<ul>
<li>构建<code>learning_logs</code>的过程基本上是在抄代码，只有到做课后练习，完成<code>pizzas_project</code>的时候才真正在学习。例如为什么<code>import Topic</code>而不是<code>Entry</code>，在我课后练习的时候就给我带来了一个无法运行网页的代价：不理解<code>subsequence_set</code>是怎么来的，就不能够成功地导入<code>Pizza</code>模组并成功设置<code>toppings</code>参数；不理解<code>.order_by()</code>方法建立在什么基础上，不阅读手册，就想不到在不是博客，而是菜单的pizza项目中使用<code>.all()</code></li>
<li>理解是那么的重要，它几乎占据了学习的全部：理解过后就只剩计算了。而学习的乐趣也大多在于这个理解和融会贯通。</li>
<li>最终我明白：正是在错误中我得以学习，不要畏惧错误。正如CSAPP所说：错误地使用内存，最好的结果是程序马上崩溃，最坏的结果是程序运行一段时间才出现不知道哪里冒出来的问题。让我多多崩溃，这是相对最好的结果。</li>
<li>2024/6/25：有一些小细节也会导致错误，例如DateField和DateTimeField是不一样的</li>
<li>2024/6/26：html -&gt; views.py字典 -&gt; models.py定义字段</li>
</ul>
<h1 id="30-用户账户"><a class="markdownIt-Anchor" href="#30-用户账户"></a> 3.0 用户账户</h1>
<h2 id="31-让用户添加topics"><a class="markdownIt-Anchor" href="#31-让用户添加topics"></a> 3.1 让用户添加Topics</h2>
<ul>
<li>添加新主题，四步走
<ol>
<li>创建<code>app_folder/forms.py</code>，添加表单</li>
<li>修改<code>urls.py</code>，添加网页</li>
<li>修改<code>views.py</code>，添加定义的函数</li>
<li>创建html模板</li>
<li>链接到页面</li>
</ol>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># forms.py</span></span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Topic</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TopicForm</span>(forms.ModelForm):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Topic</span><br><span class="line">        fields = [<span class="string">&#x27;text&#x27;</span>]</span><br><span class="line">        labels = &#123;<span class="string">&#x27;text&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125; <span class="comment"># 不要为字段text生成标签</span></span><br><span class="line">        widgets = &#123;<span class="string">&#x27;text&#x27;</span>: forms.Textarea(attrs=&#123;<span class="string">&#x27;cols&#x27;</span>: <span class="number">80</span>&#125;)&#125; <span class="comment"># 使用80列宽（默认是40列）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 用于添加新主题的网页</span></span><br><span class="line">    path(<span class="string">&#x27;new_topic/&#x27;</span>, views.new_topic, name=<span class="string">&#x27;new_topic&#x27;</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Topic</span><br><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> TopicForm</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new_topic</span>(<span class="params">request</span>):</span><br><span class="line"><span class="string">&quot;&quot;&quot;添加新主题&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method != <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># 未提交数据:创建一个新表单</span></span><br><span class="line">        form = TopicForm()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># POST 提交的数据:对数据进行处理</span></span><br><span class="line">        form = TopicForm(data=request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid(): <span class="comment"># 检查是否有效</span></span><br><span class="line">            form.save() <span class="comment"># 写入数据库</span></span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;learning_logs:topics&#x27;</span>)</span><br><span class="line">    <span class="comment"># 显示空表单或指出表单数据无效</span></span><br><span class="line">    context = &#123;<span class="string">&#x27;form&#x27;</span>: form&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;learning_logs/new_topic.html&#x27;</span>,</span><br><span class="line">context)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- new_topic.html --&gt;</span></span><br><span class="line">&#123;% extends &quot;learning_logs/base.html&quot; %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Add a new topic:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&#123;% url &#x27;learning_logs:new_topic&#x27; %&#125;&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">method</span>=<span class="string">&#x27;post&#x27;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125; <span class="comment">&lt;!-- web安全，防止攻击 --&gt;</span></span><br><span class="line">    &#123;&#123; form.as_div &#125;&#125; <span class="comment">&lt;!-- 自动创建表单 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Add topic<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">&#123;% endblock content %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- topics.html添加链接 --&gt;</span></span><br><span class="line">&#123;% extends &quot;learning_logs/base.html&quot; %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Topics<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    --snip--</span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;learning_logs:new_topic&#x27; %&#125;&quot;</span>&gt;</span>Add a new topic<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% endblock content %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="32-新增-修改entries"><a class="markdownIt-Anchor" href="#32-新增-修改entries"></a> 3.2 新增、修改entries</h2>
<ul>
<li>新增</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># forms.py</span><br><span class="line">from django import forms</span><br><span class="line">from .models import Topic, Entry</span><br><span class="line">class TopicForm(forms.ModelForm):</span><br><span class="line">--snip--</span><br><span class="line">class EntryForm(forms.ModelForm):</span><br><span class="line">    class Meta:</span><br><span class="line">        model = Entry</span><br><span class="line">        fields = [&#x27;text&#x27;]</span><br><span class="line">        labels = &#123;&#x27;text&#x27;: &#x27;&#x27;&#125;</span><br><span class="line">        widgets = &#123;&#x27;text&#x27;: forms.Textarea(attrs=&#123;&#x27;cols&#x27;: 80&#125;)&#125;</span><br><span class="line"></span><br><span class="line"># urls.py</span><br><span class="line">urlpatterns = [</span><br><span class="line">--snip--</span><br><span class="line"># 用于添加新条目的页面</span><br><span class="line">path(&#x27;new_entry/&lt;int:topic_id&gt;/&#x27;, views.new_entry,</span><br><span class="line">name=&#x27;new_entry&#x27;),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># views.py</span><br><span class="line">from django.shortcuts import render, redirect</span><br><span class="line">from .models import Topic</span><br><span class="line">from .forms import TopicForm, EntryForm</span><br><span class="line">--snip--</span><br><span class="line">def new_entry(request, topic_id):</span><br><span class="line">&quot;&quot;&quot;在特定主题中添加新条目&quot;&quot;&quot;</span><br><span class="line">    topic = Topic.objects.get(id=topic_id)</span><br><span class="line">    if request.method != &#x27;POST&#x27;:</span><br><span class="line">    # 未提交数据:创建一个空表单</span><br><span class="line">        form = EntryForm()</span><br><span class="line">    else:</span><br><span class="line">    # POST 提交的数据:对数据进行处理</span><br><span class="line">        form = EntryForm(data=request.POST)</span><br><span class="line">        if form.is_valid():</span><br><span class="line">            new_entry = form.save(commit=False)</span><br><span class="line">            new_entry.topic = topic</span><br><span class="line">            new_entry.save()</span><br><span class="line">            return redirect(&#x27;learning_logs:topic&#x27;,</span><br><span class="line">    topic_id=topic_id)</span><br><span class="line">    # 显示空表单或指出表单数据无效</span><br><span class="line">    context = &#123;&#x27;topic&#x27;: topic, &#x27;form&#x27;: form&#125;</span><br><span class="line">    return render(request, &#x27;learning_logs/new_entry.html&#x27;,</span><br><span class="line">    context)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- new_entry.html --&gt;</span></span><br><span class="line">&#123;% extends &quot;learning_logs/base.html&quot; %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;learning_logs:topic&#x27; topic.id %&#125;&quot;</span>&gt;</span>&#123;&#123; topic &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Add a new entry:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&#123;% url &#x27;learning_logs:new_entry&#x27; topic.id %&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&#x27;post&#x27;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;&#123; form.as_div &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">name</span>=<span class="string">&#x27;submit&#x27;</span>&gt;</span>Add entry<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">&#123;% endblock content %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- topic.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Entries:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;learning_logs:new_entry&#x27; topic.id %&#125;&quot;</span>&gt;</span>Add new entry<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>修改</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">--snip--</span><br><span class="line"><span class="comment"># 用于编辑条目的页面</span></span><br><span class="line">path(<span class="string">&#x27;edit_entry/&lt;int:entry_id&gt;/&#x27;</span>, views.edit_entry,</span><br><span class="line">name=<span class="string">&#x27;edit_entry&#x27;</span>),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, redirect</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Topic, Entry</span><br><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> TopicForm, EntryForm</span><br><span class="line">--snip--</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit_entry</span>(<span class="params">request, entry_id</span>):</span><br><span class="line"><span class="string">&quot;&quot;&quot;编辑既有的条目&quot;&quot;&quot;</span></span><br><span class="line">    entry = Entry.objects.get(<span class="built_in">id</span>=entry_id)</span><br><span class="line">    topic = entry.topic</span><br><span class="line">    <span class="keyword">if</span> request.method != <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># 初次请求:使用当前的条目填充表单</span></span><br><span class="line">        form = EntryForm(instance=entry)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># POST 提交的数据:对数据进行处理</span></span><br><span class="line">        form = EntryForm(instance=entry, data=request.POST)</span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            form.save()</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;learning_logs:topic&#x27;</span>, topic_id=topic.<span class="built_in">id</span>)</span><br><span class="line">            </span><br><span class="line">    context = &#123;<span class="string">&#x27;entry&#x27;</span>: entry, <span class="string">&#x27;topic&#x27;</span>: topic, <span class="string">&#x27;form&#x27;</span>: form&#125;</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;learning_logs/edit_entry.html&#x27;</span>,</span><br><span class="line">    context)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% extends &quot;learning_logs/base.html&quot; %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;learning_logs:topic&#x27; topic.id %&#125;&quot;</span>&gt;</span>&#123;&#123; topic &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Edit entry:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&#123;% url &#x27;learning_logs:edit_entry&#x27; entry.id %&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&#x27;post&#x27;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;&#123; form.as_div &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Save changes<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">&#123;% endblock content %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="33-让用户登录-注册"><a class="markdownIt-Anchor" href="#33-让用户登录-注册"></a> 3.3 让用户登录、注册</h2>
<h2 id="34-让用户只能看见自己的topic"><a class="markdownIt-Anchor" href="#34-让用户只能看见自己的topic"></a> 3.4 让用户只能看见自己的topic</h2>
<h1 id="40-美化页面"><a class="markdownIt-Anchor" href="#40-美化页面"></a> 4.0 美化页面</h1>
<h2 id="41-安装并启用bootstrap5"><a class="markdownIt-Anchor" href="#41-安装并启用bootstrap5"></a> 4.1 安装并启用bootstrap5</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(ll_env)learning_log$ pip install django-bootstrap5</span><br></pre></td></tr></table></figure>
<p><a href="http://settings.py">settings.py</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"> 我的应用程序</span><br><span class="line"><span class="string">&#x27;learning_logs&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;accounts&#x27;</span>,</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"> 第三方应用程序</span><br><span class="line"><span class="string">&#x27;django_bootstrap5&#x27;</span>,</span><br></pre></td></tr></table></figure>
<h1 id="50-部署"><a class="markdownIt-Anchor" href="#50-部署"></a> 5.0 部署</h1>
<p>生成配置文件<code>requirements.txt</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip freeze &gt; requirements.txt</span><br><span class="line">$ pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
<p>YAML (YAML Ain’t Markup Language)</p>
]]></content>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot</title>
    <url>/ComputerScience/%E9%A1%B9%E7%9B%AE/Spring%20Boot/</url>
    <content><![CDATA[<h1 id="devtools"><a class="markdownIt-Anchor" href="#devtools"></a> DevTools</h1>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="spring-cli"><a class="markdownIt-Anchor" href="#spring-cli"></a> Spring CLI</h1>
<p>可以用<a href="https://start.spring.io">Spring Initializr</a>或Spirng CLI来构建项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring init -list <span class="comment"># 列出参数</span></span><br><span class="line"><span class="comment"># 初始化项目</span></span><br><span class="line">spring init ( -d || --dependencies ) package1,package2 --build (maven/gradle) ( -p || --package) (war/jar) projectName</span><br><span class="line"><span class="comment"># Example</span></span><br><span class="line">spring init -d web,jpa,security --build maven -p jar basic-project</span><br><span class="line"></span><br><span class="line">spring init -d web,mustache,jpa,h2,devtools --package-name=com.example.blog --build maven mybloge</span><br></pre></td></tr></table></figure>
<ul>
<li>Web: API服务</li>
<li>JPA: 访问数据库的抽象<br />
项目结构图</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ tree basic-project/</span><br><span class="line">basic-project/</span><br><span class="line">├── HELP.md</span><br><span class="line">├── mvnw # maven wrapper附带脚本</span><br><span class="line">├── mvnw.cmd</span><br><span class="line">├── pom.xml # maven 构建配置文件</span><br><span class="line">└── src</span><br><span class="line">    ├── main</span><br><span class="line">    │   ├── java</span><br><span class="line">    │   │   └── com</span><br><span class="line">    │   │       └── example</span><br><span class="line">    │   │           └── basic_project</span><br><span class="line">    │   │               └── DemoApplication.java # 入口</span><br><span class="line">    │   └── resources</span><br><span class="line">    │       ├── application.properties # Configuration</span><br><span class="line">    │       ├── static # 存放js/css,images</span><br><span class="line">    │       └── templates # 存放页面模板</span><br><span class="line">    └── test</span><br><span class="line">        └── java</span><br><span class="line">            └── com</span><br><span class="line">                └── example</span><br><span class="line">                    └── basic_project</span><br><span class="line">                        └── DemoApplicationTests.java</span><br><span class="line"></span><br><span class="line">15 directories, 7 files</span><br></pre></td></tr></table></figure>
<h1 id="maven"><a class="markdownIt-Anchor" href="#maven"></a> Maven</h1>
<h2 id="换源"><a class="markdownIt-Anchor" href="#换源"></a> 换源</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">distributionUrl=https://maven.aliyun.com/repository/central/org/apache/maven/apache-maven/(edition.number)/apache-maven-(edition.number)-bin.zip</span><br></pre></td></tr></table></figure>
<h2 id="运行项目"><a class="markdownIt-Anchor" href="#运行项目"></a> 运行项目</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn spring-boot:run</span><br><span class="line"><span class="comment"># 将会在localhost:8080运行</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPHP 6</title>
    <url>/ComputerScience/%E9%A1%B9%E7%9B%AE/ThinkPHP%206/</url>
    <content><![CDATA[<p><a href="https://www.kancloud.cn/manual/thinkphp6_0/1037479">ThinkPHP 6.0文档</a></p>
<h1 id="composer安装"><a class="markdownIt-Anchor" href="#composer安装"></a> Composer安装</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer create-project topthink/think tp</span><br><span class="line"><span class="comment"># tp是应用根目录名称，可以修改</span></span><br></pre></td></tr></table></figure>
<h1 id="访问"><a class="markdownIt-Anchor" href="#访问"></a> 访问</h1>
<ol>
<li><code>localhost/tp/public/</code> 首页</li>
<li><code>首页/index.php/index</code> controller下的Index类</li>
<li><code>首页/index.php/index/?s=hello/value</code> 调用controller下Index类的hello方法，并传入参数value(URL兼容模式)</li>
<li><code>首页/index.php/hello_world</code> 调用controller下HelloWorld类</li>
<li><code>首页/index.php/group.blog</code> 调用controller/group下的Blog类</li>
</ol>
<h1 id="输出数组"><a class="markdownIt-Anchor" href="#输出数组"></a> 输出数组</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$data</span> = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span> =&gt; <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span> =&gt; <span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">json</span>(<span class="variable">$data</span>);</span><br></pre></td></tr></table></figure>
<h1 id="开启调试"><a class="markdownIt-Anchor" href="#开启调试"></a> 开启调试</h1>
<p>在应用根目录下新建.env文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">APP_DEBUG = true</span><br><span class="line"></span><br><span class="line">[APP]</span><br><span class="line">DEFAULT_TIMEZONE = Asia/Shanghai</span><br><span class="line"></span><br><span class="line">[DATABASE]</span><br><span class="line">TYPE = mysql</span><br><span class="line">HOSTNAME = 127.0.0.1</span><br><span class="line">DATABASE = test</span><br><span class="line">USERNAME = username</span><br><span class="line">PASSWORD = password</span><br><span class="line">HOSTPORT = 3306</span><br><span class="line">CHARSET = utf8</span><br><span class="line">DEBUG = true</span><br><span class="line"></span><br><span class="line">[LANG]</span><br><span class="line">default_lang = zh-cn</span><br></pre></td></tr></table></figure>
<h1 id="数据库"><a class="markdownIt-Anchor" href="#数据库"></a> 数据库</h1>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$user</span> = <span class="title class_">Db</span>::<span class="title function_ invoke__">connect</span>(<span class="string">&#x27;mysql&#x27;</span>)-&gt;<span class="title function_ invoke__">table</span>(<span class="string">&#x27;tp_user&#x27;</span>)-&gt;<span class="title function_ invoke__">select</span>();</span><br><span class="line"><span class="comment">// 确定数据库和数据表</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">json</span>(<span class="variable">$user</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者有Model User</span></span><br><span class="line"><span class="variable">$user</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">select</span>();</span><br></pre></td></tr></table></figure>
<h2 id="model"><a class="markdownIt-Anchor" href="#model"></a> Model</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">model</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$connection</span> = <span class="string">&#x27;databaseName&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="查询"><a class="markdownIt-Anchor" href="#查询"></a> 查询</h2>
<p>Db::getLastSql();可以看上一条sql语句</p>
<h4 id="一条数据"><a class="markdownIt-Anchor" href="#一条数据"></a> 一条数据</h4>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">table</span>(<span class="string">&#x27;tableName&#x27;</span>)-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;fieldName&#x27;</span>, fieldValue)-&gt;<span class="title function_ invoke__">find</span>(); <span class="comment">// 查询不到返回null</span></span><br><span class="line"><span class="comment">// findFail在查询不到时抛出异常；findEmpty在查询不到时返回空数组</span></span><br></pre></td></tr></table></figure>
<h3 id="整个表数据集"><a class="markdownIt-Anchor" href="#整个表数据集"></a> 整个表（数据集）</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">table</span>(<span class="string">&#x27;tableName&#x27;</span>)-&gt;<span class="title function_ invoke__">select</span>();</span><br><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;tableNameWithoutPrefix&#x27;</span>)-&gt;<span class="title function_ invoke__">select</span>();</span><br></pre></td></tr></table></figure>
<h3 id="某条记录的字段值"><a class="markdownIt-Anchor" href="#某条记录的字段值"></a> 某条记录的字段值</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;tableName&#x27;</span>)-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$id</span>)-&gt;<span class="title function_ invoke__">value</span>(<span class="string">&#x27;field&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="一列键值对"><a class="markdownIt-Anchor" href="#一列键值对"></a> 一列（键值对）</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;name&#x27;</span>)-&gt;<span class="title function_ invoke__">column</span>(<span class="string">&#x27;fieldAsValue&#x27;</span>, <span class="string">&#x27;fieldAsKey&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="插入"><a class="markdownIt-Anchor" href="#插入"></a> 插入</h2>
<h3 id="一条数据-2"><a class="markdownIt-Anchor" href="#一条数据-2"></a> 一条数据</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// strict 表示强行插入</span></span><br><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;user&#x27;</span>)-&gt;<span class="title function_ invoke__">strict</span>(<span class="literal">false</span>)-&gt;<span class="title function_ invoke__">insert</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="comment">// 有相同主键则替换</span></span><br><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;user&#x27;</span>)-&gt;<span class="title function_ invoke__">replace</span>()-&gt;<span class="title function_ invoke__">insert</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="comment">// 根据主键自动判断</span></span><br><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;user&#x27;</span>)-&gt;<span class="title function_ invoke__">save</span>(<span class="variable">$data</span>);</span><br></pre></td></tr></table></figure>
<h3 id="多条数据"><a class="markdownIt-Anchor" href="#多条数据"></a> 多条数据</h3>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;user&#x27;</span>)-&gt;<span class="title function_ invoke__">insertAll</span>(<span class="variable">$data</span>);</span><br></pre></td></tr></table></figure>
<h2 id="修改"><a class="markdownIt-Anchor" href="#修改"></a> 修改</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;user&#x27;</span>)-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;id&#x27;</span>, <span class="number">232</span>)</span><br><span class="line">                -&gt;<span class="title function_ invoke__">update</span>([ </span><br><span class="line">                  // 下面是SQL表达式</span><br><span class="line">                  <span class="string">&#x27;email&#x27;</span> =&gt; <span class="title class_">Db</span>::<span class="title function_ invoke__">raw</span>(<span class="string">&#x27;UPPER(email)&#x27;</span>),</span><br><span class="line">                    <span class="string">&#x27;price&#x27;</span> =&gt; <span class="title class_">Db</span>::<span class="title function_ invoke__">raw</span>(<span class="string">&#x27;price + 1&#x27;</span>),</span><br><span class="line">                  <span class="string">&#x27;status&#x27;</span>=&gt; <span class="title class_">Db</span>::<span class="title function_ invoke__">raw</span>(<span class="string">&#x27;status - 2&#x27;</span>)</span><br><span class="line">                ]);</span><br></pre></td></tr></table></figure>
<h2 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h2>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据主键删除多条数据</span></span><br><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;user&#x27;</span>)-&gt;<span class="title function_ invoke__">delete</span>([<span class="number">48</span>,<span class="number">49</span>,<span class="number">50</span>]);</span><br><span class="line"><span class="comment">// 匹配删除</span></span><br><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;user&#x27;</span>)-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;id&#x27;</span>, <span class="number">47</span>)-&gt;<span class="title function_ invoke__">delete</span>();</span><br><span class="line"><span class="comment">// 全部删除</span></span><br><span class="line"><span class="title class_">Db</span>::<span class="title function_ invoke__">name</span>(<span class="string">&#x27;user&#x27;</span>)-&gt;<span class="title function_ invoke__">delete</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<h1 id="模板"><a class="markdownIt-Anchor" href="#模板"></a> 模板</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer require topthink/think-view</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序 MiniApp</title>
    <url>/ComputerScience/%E9%A1%B9%E7%9B%AE/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%20MiniApp/</url>
    <content><![CDATA[<p>说明：%%是注释%%</p>
<h1 id="程序设计"><a class="markdownIt-Anchor" href="#程序设计"></a> 程序设计</h1>
<ol>
<li>首先写<code>&lt;view class=&quot;class_name&quot;&gt;&lt;/view&gt;</code>来结构化设计；每个<code>class</code>对应一个<code>css</code>样式</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../images/avatar/avatar-1.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;motto&quot;</span>&gt;</span>Welcome, Orange Can<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;journey-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;journey&quot;</span>&gt;</span>Start your journey of miniprogram<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li><code>css</code>中放样式信息，写法如下；全局样式可以放<code>app.css</code></li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 示范写法 */</span></span><br><span class="line"><span class="selector-class">.class_name</span>&#123;</span><br><span class="line">    attribute: rpx;</span><br><span class="line">    location_attribute: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 一般网页可以这样布局 */</span></span><br><span class="line"><span class="selector-class">.container</span>&#123; <span class="comment">/* 最外层的&lt;view&gt; */</span></span><br><span class="line">  <span class="attribute">display</span>: flex; <span class="comment">/* 布局方式 */</span></span><br><span class="line">  <span class="attribute">flex-direction</span>: column; <span class="comment">/* 列，从上到下；reverse是从下到上；可选row */</span></span><br><span class="line">  <span class="attribute">align-items</span>: center; <span class="comment">/* 居中 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<ol start="3">
<li>全局配置<code>app.json</code></li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;pages_folder/folder/html&quot;</span>  %% 没有.html后缀！</span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;window&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> %% 小程序顶部菜单栏</span><br><span class="line">    <span class="attr">&quot;attribute1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;argument1&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;attribute2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;argument2&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li><code>js</code>文件结构：用于匹配数据</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>( &#123;</span><br><span class="line">  <span class="attr">data</span>:&#123; <span class="comment">// 数据文件，在html中用 &#123;&#123; (object.)attribute([index]) &#125;&#125; 匹配使用</span></span><br><span class="line">    <span class="attr">object</span>: &#123;</span><br><span class="line">      <span class="attr">array</span>: [<span class="number">108</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">date</span>: <span class="string">&quot;2024-4-2&quot;</span>,  </span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;Title of article&quot;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/image/image.png&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onLoad</span>: <span class="keyword">function</span>(<span class="params">options</span>)&#123; <span class="comment">// 注意最新版为onLoad(options)，下同</span></span><br><span class="line">    <span class="comment">// 页面初始化 options 为页面跳转所带来的参数</span></span><br><span class="line">    <span class="keyword">var</span> newAttribute = &#123;</span><br><span class="line">      <span class="attr">attribute</span>: argument</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;New Title&quot;</span> <span class="comment">// 将会修改上面data里title的值</span></span><br><span class="line">      <span class="attr">postData</span>: newAttribute <span class="comment">// 把上面的参数加入data中，此时需要用&#123;&#123; postData.attribute &#125;&#125;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onReady</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 页面渲染完成</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onShow</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//页面显示</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onHide</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 页面隐藏</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">onUnload</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 页面关闭</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>隔离数据：把数据存储在根目录<code>data/data.js</code>下</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// data.js 存储</span></span><br><span class="line"><span class="keyword">var</span> data = []</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">export</span> = &#123; <span class="comment">// 暴露模块接口</span></span><br><span class="line">  <span class="attr">postList</span>: data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// page.js 使用</span></span><br><span class="line"><span class="keyword">var</span> dataObj = <span class="title function_">requre</span>(<span class="string">&quot;/data/data.js&quot;</span>) <span class="comment">// 注意需要后缀名</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">    <span class="attr">postList</span>: dataObj.<span class="property">postList</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>html模板</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- template.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">&quot;templateName&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 模板内容，记得带&#123;&#123; attribute &#125;&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- page.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">&quot;post-item/post-item-tpl.wxml&quot;</span> /&gt;</span>  <span class="comment">&lt;!-- 导入模板 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123; postList &#125;&#125;&quot;</span> <span class="attr">wx:for-item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">wx:for-index</span>=<span class="string">&quot;idx&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">&quot;postItemTpl&quot;</span> <span class="attr">data</span>=<span class="string">&quot;&#123;&#123; ...item &#125;&#125;&quot;</span> /&gt;</span>  <span class="comment">&lt;!-- 使用...item，就不需要变量名和template匹配，template也不用item.attribute了 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="7">
<li>css模板</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 导入 */</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;post-item/post-item-tpl.wxss&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol start="8">
<li>缓存</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">App</span>(&#123;</span><br><span class="line">  <span class="attr">onLaunch</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 尝试读取缓存，所以参数直接写&#x27;postList&#x27;；如果没有此参数就是没有缓存</span></span><br><span class="line">    <span class="keyword">var</span> storageData = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;postList&#x27;</span>); </span><br><span class="line">    <span class="keyword">if</span> (!storageData) &#123; <span class="comment">// 缓存不存在</span></span><br><span class="line">      <span class="keyword">var</span> dataObj = <span class="built_in">require</span>(<span class="string">&quot;data/data.js&quot;</span>)</span><br><span class="line">      wx.<span class="title function_">clearStorageSync</span>(); <span class="comment">// 清空本地缓存</span></span><br><span class="line">      wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;postList&#x27;</span>, dataObj.<span class="property">postList</span>) <span class="comment">// 保存数据到缓存</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异步写法</span></span><br><span class="line">     wx.<span class="title function_">setStorage</span>(&#123;</span><br><span class="line">       <span class="attr">key</span>: <span class="string">&quot;postList&quot;</span>,</span><br><span class="line">       <span class="attr">data</span>: dataObj.<span class="property">postList</span>,</span><br><span class="line">       <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">         <span class="comment">// success</span></span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="attr">fail</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">         <span class="comment">// fail</span></span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="attr">complete</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">         <span class="comment">// complete</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ol start="9">
<li></li>
</ol>
<h1 id="组件"><a class="markdownIt-Anchor" href="#组件"></a> 组件</h1>
<ul>
<li>表单</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">bindsubmit</span>=<span class="string">&quot;formSubmit&quot;</span> <span class="attr">bindreset</span>=<span class="string">&quot;formReset&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;title_class_name&quot;</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">view</span>&gt;</span> <span class="comment">&lt;!-- 表单标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;input_class_name&quot;</span> <span class="attr">placeholder-class</span>=<span class="string">&quot;place-holder&quot;</span> <span class="attr">name</span>=<span class="string">&quot;realname &quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Type your name&quot;</span> <span class="attr">value</span> = <span class="string">&quot;&#123;&#123; uersInfo.realname &#125;&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- placeholder: 表单提示文本 --&gt;</span></span><br><span class="line">    hello</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>链接、跳转</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">catch:tap</span>=<span class="string">&quot;tapName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- bind:tap 会向之前的界面传数据；catch:tap 不会 --&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">navigateTo</span>(&#123; <span class="comment">// 1. 保留页面跳转；但是太多层级不好</span></span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;../page_folder_name/page_name&#x27;</span>,  <span class="comment">// 不需要后缀名.html</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="attr">tapName</span>: <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  wx.<span class="title function_">redirectTo</span>(&#123;  <span class="comment">// 这个也可以，重定向；2. 关闭页面跳转，没有返回按钮</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;../post/post&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;jump success&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">fail</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;jump fail&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">complete</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">console</span>(<span class="string">&quot;jump complete&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wx.<span class="property">swtichTap</span> <span class="comment">// 跳转tabbar界面，并关闭非tabbar界面</span></span><br></pre></td></tr></table></figure>
<ul>
<li>按钮</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;tapName&quot;</span> &gt;</span>Hello World!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>弹窗</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">tap_name</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;fail&#x27;</span>, <span class="comment">// the content will show to user</span></span><br><span class="line">    <span class="attr">icon</span>: <span class="string">&#x27;loading&#x27;</span>, <span class="comment">// success, fail</span></span><br><span class="line">    <span class="attr">duration</span>: <span class="number">2000</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>图片</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">background-size</span>=<span class="string">&quot;cover&quot;</span> <span class="attr">class</span>=<span class="string">&quot;userinfo-avatar&quot;</span> <span class="attr">src</span>=<span class="string">&quot;foldername/your_photo.png&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">mode</span>=<span class="string">&quot;aspectFill&quot;</span>&gt;</span>content<span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mode: aspectFit 容器内完整显示缩放；aspectFill 填充缩放；widthFix 自适应完全显示 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- content will show on the bottom of the photo --&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>轮播图（横向滚动切换的图片）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">swiper</span> <span class="attr">indicator-dots</span>=<span class="string">&quot;true&quot;</span> <span class="attr">vertical</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoplay</span>=<span class="string">&quot;true&quot;</span> <span class="attr">interval</span>=<span class="string">&quot;5000&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- indicator-dots：每张图片一个小圆点，autoplay：自动播放，interval：换片间隔5秒，vertical：垂直小圆点 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;../images/post/post-1.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;../images/post/post-2.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;../images/post/post-3.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 注意，css要写两个才能起作用 */</span></span><br><span class="line">swiper&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">swiper <span class="selector-tag">image</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>ICS5 PA</title>
    <url>/ComputerScience/%E9%A1%B9%E7%9B%AE/ICS5%20PA/</url>
    <content><![CDATA[<h1 id="pa1-1-24530"><a class="markdownIt-Anchor" href="#pa1-1-24530"></a> PA1-1 24.5.30</h1>
<p>又开始了ICS之旅，这次又给自己下了一个难度，找到了汪亮老师讲解的ICS 5！</p>
<h2 id="target"><a class="markdownIt-Anchor" href="#target"></a> target</h2>
<p>第一课的目标是修正一个register错误声明</p>
<h2 id="insteresting"><a class="markdownIt-Anchor" href="#insteresting"></a> insteresting</h2>
<ul>
<li>中途网易源Bad Gateway 502了，更换清华源，学会了<code>:%s/163/tuna/g</code>非常爽！</li>
<li>又学了几个<a href="../%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/Shell%E7%BB%88%E7%AB%AF%E4%BD%BF%E7%94%A8">终端快捷键</a></li>
<li>想到了用 <code>ccache</code> 加速我的PA</li>
</ul>
<h2 id="problems"><a class="markdownIt-Anchor" href="#problems"></a> problems</h2>
<ol>
<li><code>union</code> 和 <code>struct</code> 的区别？<br />
<code>unioin</code> 在同一个内存空间中存储不同的数据类型。<br />
<code>struct</code> 则是同时存储不同的数据类型。</li>
<li>为什么要用 <code>union</code>？阅读i386手册<br />
2.3.1 General Registers<br />
As <a href="https://nju-projectn.github.io/i386-manual/s02_03.htm#fig2-5">Figure 2-5</a> shows, the low-order word of each of these eight registers has a separate name and can be treated as a unit. This feature is useful for handling 16-bit data items and for compatibility with the 8086 and 80286 processors. The word registers are named AX, BX, CX, DX, BP, SP, SI, and DI.<br />
对于CPU来说，可以把AH AX AL看成单独的单元，拆分成小块。所以它们是共用关系。</li>
</ol>
<h1 id="pa1-2-alu-2465"><a class="markdownIt-Anchor" href="#pa1-2-alu-2465"></a> PA1-2 ALU 24.6.5</h1>
<h2 id="target-2"><a class="markdownIt-Anchor" href="#target-2"></a> target</h2>
<p>实现ALU中的各类运算，包括设置标志位</p>
<h2 id="knowledge"><a class="markdownIt-Anchor" href="#knowledge"></a> knowledge</h2>
<h3 id="appendix-c"><a class="markdownIt-Anchor" href="#appendix-c"></a> Appendix C</h3>
<table>
<thead>
<tr>
<th>Name</th>
<th>Function</th>
</tr>
</thead>
<tbody>
<tr>
<td>CF</td>
<td>Carry Flag ── Set on high-order bit carry or borrow; cleared otherwise.</td>
</tr>
<tr>
<td>PF</td>
<td>Parity Flag ── Set if low-order eight bits of result contain an even number of 1 bits; cleared otherwise.</td>
</tr>
<tr>
<td>ZF</td>
<td>Zero Flag ── Set if result is zero; cleared otherwise.</td>
</tr>
<tr>
<td>SF</td>
<td>Sign Flag ── Set equal to high-order bit of result (0 is positive, 1 if negative).</td>
</tr>
<tr>
<td>OF<br></td>
<td>Overflow Flag ── Set if result is too large a positive number or too small a negative number (excluding sign-bit) to fit in destination operand; cleared otherwise.</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<h3 id="add"><a class="markdownIt-Anchor" href="#add"></a> ADD</h3>
<p>Operation<br />
DEST ← DEST + SRC;<br />
Flags Affected<br />
OF, SF, ZF, AF, CF, and PF as described in Appendix C</p>
<h3 id="adc"><a class="markdownIt-Anchor" href="#adc"></a> ADC</h3>
<p>ADD with Carry：“带进位的加法”操作，需要看操作数是否已经进位<br />
Operation<br />
DEST ← DEST + SRC + CF;<br />
Flags Affected<br />
OF, SF, ZF, AF, CF, and PF as described in Appendix C<br />
注意CF标志位需要特殊设置，考虑之前的进位状态</p>
<h3 id="sub"><a class="markdownIt-Anchor" href="#sub"></a> SUB</h3>
<p>借位：A - B，当A小于B时，结果为一个负数，产生了借位。<br />
根据这个规则完成set_CF_sub()<br />
在做减法时，<br />
如果用一个正数减去一个负数得到一个负的结果，<br />
或者用一个负数减去一个正数然后得到一个正的结果，<br />
则发生了溢出 。<br />
根据上面的规则比较符号，即可完成set_OF_sub()</p>
<h3 id="sbb"><a class="markdownIt-Anchor" href="#sbb"></a> SBB</h3>
<p>Sub with Borrow<br />
什么时候产生借位？<br />
1. 和普通减法一样10-1， 0&lt;1，产生借位<br />
2. 已经借位的时候，130-31，3 不小于 3，但是3已经产生借位，所以(3-1借位)&lt;3的时候，产生借位<br />
根据上面规则，即可完成set_CF_sbb()</p>
<h3 id="shl"><a class="markdownIt-Anchor" href="#shl"></a> SHL</h3>
<p>Shift Left<br />
左移操作，CF位是最高位；只移1位时才需要设置OF（CF和操作数不相同时）<br />
注意：符号位不等于最高位！</p>
<h3 id="div"><a class="markdownIt-Anchor" href="#div"></a> DIV</h3>
<p>实现除法需要完成MOD<br />
注意，dest是被除数，src是除数</p>
<h1 id="pa1-3-fpu-24730"><a class="markdownIt-Anchor" href="#pa1-3-fpu-24730"></a> PA1-3 FPU 24.7.30</h1>
<p>按照手册和伪代码实现FPU的规格化操作，以及加法和乘法。注意NEMU的实现中，fraction包含Guard、Round、Sticky位，共23+3=26位。</p>
<h2 id="加法"><a class="markdownIt-Anchor" href="#加法"></a> 加法</h2>
<p>小阶向大阶对齐，shift right，exp–<br />
根据guide处理各种情况即可</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="type">uint32_t</span> <span class="title function_">internal_normalize</span><span class="params">(<span class="type">uint32_t</span> sign, <span class="type">int32_t</span> <span class="built_in">exp</span>, <span class="type">uint64_t</span> sig_grs)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="comment">/* 需要进行右规 */</span> ) &#123;</span><br><span class="line">        <span class="keyword">while</span>( <span class="comment">/* 需要右规 且 未发生阶码上溢*/</span> ) &#123;</span><br><span class="line">            <span class="comment">/* 右规一次 */</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( <span class="comment">/* 发生了阶码上溢 */</span> ) &#123;</span><br><span class="line">            <span class="comment">/* 根据符号将结果置为 +∞ 或 -∞ */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>( <span class="comment">/* 需要进行左规 */</span> ) &#123;</span><br><span class="line">        <span class="keyword">while</span>( <span class="comment">/* 需要左规 且 阶码大于0 */</span> ) &#123;</span><br><span class="line">            <span class="comment">/* 左规一次 */</span>        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( <span class="comment">/* 发生了阶码==0 */</span> ) &#123;</span><br><span class="line">            <span class="comment">/* 右移一次化为非规格化浮点数 */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>( <span class="comment">/* 两个非规格化数运算后得到了一个规格化数 */</span> ) &#123;</span><br><span class="line">        <span class="built_in">exp</span>++; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( <span class="comment">/* 规格化过程中未发生溢出 */</span> ) &#123;</span><br><span class="line">        <span class="comment">/* 根据sig_grs最后三位GRS bits的取值决定舍入，采取就近舍入到偶数的方式 */</span></span><br><span class="line">        <span class="comment">/* 移除sig_grs最后三位保留的GRS bits*/</span></span><br><span class="line">        <span class="keyword">if</span>( <span class="comment">/* 舍入后破坏了规格化 */</span> ) &#123;</span><br><span class="line">            <span class="comment">/* 再进行规格化并判断溢出 */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 假设最后的结果的符号、阶码、尾数保留在sign, exp, sig_grs中</span></span><br><span class="line">    FLOAT f;</span><br><span class="line">    f.sign = sign;</span><br><span class="line">    f.exponent = (<span class="type">uint32_t</span>) (<span class="built_in">exp</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">    f.fraction = sig_grs; <span class="comment">// here only the lowest 23 bits are kept</span></span><br><span class="line">    <span class="keyword">return</span> f.val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="乘法"><a class="markdownIt-Anchor" href="#乘法"></a> 乘法</h2>
<p>非常简单，浮点相乘就是尾数相乘，阶码相加</p>
<blockquote>
<p>加入GRS bits后，等同于约定中间结果的小数部分为26位。<br />
对于除法而言，将被除数左移shift位后除以除数得到的小数部分为shift位，为了保证中间结果的小数部分为26位且真值不变，将多余的shift – 26位从阶码中减去，最后的阶码等于<code>fa.exponent - fb.exponent + 127 – (shift – 26)</code>。<br />
对于乘法而言，用两个小数点后为23位的尾数相乘得到的乘积尾数小数点后为46位，为了保证中间结果的小数点后依然是26位，我们将多出来的46 – 26 = 20位归于阶码，因此阶码就是<code>fa.exponent + fb.exponent - 127 - 20</code>。</p>
</blockquote>
<h2 id="规格化"><a class="markdownIt-Anchor" href="#规格化"></a> 规格化</h2>
<blockquote>
<p>如果sig_grs &gt;&gt; (23 + 3) &gt; 1，则需要右规直至sig_grs &gt;&gt; (23 + 3) == 1；<br />
反之如果sig_grs &gt;&gt; (23 + 3) == 0且不是非规格化浮点数（exp &gt; 0），则需要左规直至sig_grs &gt;&gt; (23 + 3) == 1。<br />
注意这里的23 + 3的取值是因为我们在临时尾数的最低三位保留了GRS bits的缘故，也就是上文所述的等同于中间结果尾数sig_grs的小数部分约定为26位。<br />
在规格化过程中，根据规格化的方向确定尾数右移还是左移，并对阶码进行增减操作。右规过程中需要保留粘位。<br />
同时在每次右移前都要检查阶码上溢（exp &gt;= 0xff）的情形。<br />
在左规过程中，则有可能发生结果出现非规格化浮点数的情况（阶码变为exp == 0），此时需要将尾数额外右移1位以对应非规格化浮点数阶码是2 ^-126的约定（否则单纯从数值上看阶码全0对应2 ^ -127）。</p>
</blockquote>
<p>整数部分不是1，(sig_grs &gt;&gt; 26) &gt; 1，，需要进行右移；整数部分 &lt; 1（也就是等于0）则需要进行左移</p>
<h2 id="舍入"><a class="markdownIt-Anchor" href="#舍入"></a> 舍入</h2>
<p>就近舍入偶数的规则可以参考视频和袁春风老师的书。</p>
<ol>
<li>Guard位为0，Round、Sticky不为0，舍去</li>
<li>Guard位为1，Round、Sticky为0，确保尾数是偶数</li>
<li>Guard位为1，Round、Sticky不为0，进位<br />
注意最后要处理掉GRS位</li>
</ol>
<h1 id="pa2-1"><a class="markdownIt-Anchor" href="#pa2-1"></a> PA2-1</h1>
<p>示例修改文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">objdump -d ./testcase/bin/mov | less</span><br><span class="line"></span><br><span class="line">nemu/src/cpu/instr/jmp.c // 包含.h</span><br><span class="line">nemu/include/cpu/instr/jmp.h // 声明函数</span><br><span class="line"></span><br><span class="line">nemu/src/cpu/decode/opcode.c // 替换</span><br><span class="line"></span><br><span class="line">nemu/include/cpu/operand.h // OPERAND read/write</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划学习指南</title>
    <url>/ComputerScience/%E6%8C%87%E5%8D%97/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>Author：<strong><a href="https://link.zhihu.com/?target=https%3A//leetcode.com/aatalyk">aatalyk</a></strong><br />
Origin：<a href="https://leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns">Link</a></p>
<p>Before starting the topic let me introduce myself. I am a Mobile Developer currently working in Warsaw and spending my free time for interview preparations. I started to prepare for interviews two years ago. At that time I should say I could not solve the two sum problem. Easy problems seemed to me like hard ones so most of the time I had to look at editorials and discuss section. Currently, I have solved ~800 problems and time to time participate in contests. I usually solve 3 problems in a contest and sometimes 4 problems. Ok, lets come back to the topic.</p>
<p>Recently I have concentrated my attention on Dynamic Programming cause its one of the hardest topics in an interview prep. After solving ~140 problems in DP I have noticed that there are few patterns that can be found in different problems. So I did a research on that and find the following topics. I will not give complete ways how to solve problems but these patterns may be helpful in solving DP.</p>
<h2 id="patterns"><a class="markdownIt-Anchor" href="#patterns"></a> Patterns</h2>
<ol>
<li><a href="https://link.zhihu.com/?target=https%3A//leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns%23Minimum-%28Maximum%29-Path-to-Reach-a-Target">Minimum (Maximum) Path to Reach a Target</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns%23distinct-ways">Distinct Ways</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns%23Merging-Intervals">Merging Intervals</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns%23DP-on-Strings">DP on Strings</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//leetcode.com/discuss/general-discussion/458695/dynamic-programming-patterns%23Decision-Making">Decision Making</a></li>
</ol>
<span id="more"></span>
<h2 id="10-minimum-maximum-path-to-reach-a-target"><a class="markdownIt-Anchor" href="#10-minimum-maximum-path-to-reach-a-target"></a> 1.0 Minimum (Maximum) Path to Reach a Target</h2>
<p>最大最小的条件路径</p>
<p>Generate problem statement for this pattern</p>
<h3 id="statement"><a class="markdownIt-Anchor" href="#statement"></a> Statement</h3>
<blockquote>
<p>Given a target find minimum (maximum) cost / path / sum to reach the target.</p>
</blockquote>
<h3 id="approach"><a class="markdownIt-Anchor" href="#approach"></a> Approach</h3>
<blockquote>
<p>Choose minimum (maximum) path among all possible paths before the current state, then add value for the current state.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">routes[i] = min(routes[i-<span class="number">1</span>], routes[i-<span class="number">2</span>], ... , routes[i-k]) + cost[i]</span><br></pre></td></tr></table></figure>
<p>Generate optimal solutions for all values in the target and return the value for the target.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= target; ++i) &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; ways.size(); ++j) &#123;</span><br><span class="line">       <span class="keyword">if</span> (ways[j] &lt;= i) &#123;</span><br><span class="line">           dp[i] = min(dp[i], dp[i - ways[j]]) + cost / path / sum;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> dp[target]</span><br></pre></td></tr></table></figure>
<h3 id="similar-problems"><a class="markdownIt-Anchor" href="#similar-problems"></a> Similar Problems</h3>
<p><a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/min-cost-climbing-stairs/">746. Min Cost Climbing Stairs</a> <code>Easy</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">   dp[i] = min(dp[i-<span class="number">1</span>], dp[i-<span class="number">2</span>]) + (i == n ? <span class="number">0</span> : cost[i]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> dp[n]</span><br></pre></td></tr></table></figure>
<p><a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/minimum-path-sum/">64. Minimum Path Sum</a> <code>Medium</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; m; ++j) &#123;</span><br><span class="line">       grid[i][j] = min(grid[i-<span class="number">1</span>][j], grid[i][j-<span class="number">1</span>]) + grid[i][j];</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> grid[n-<span class="number">1</span>][m-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p><a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/coin-change/">322. Coin Change</a> <code>Medium</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= amount; ++j) &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; coins.size(); ++i) &#123;</span><br><span class="line">       <span class="keyword">if</span> (coins[i] &lt;= j) &#123;</span><br><span class="line">           dp[j] = min(dp[j], dp[j - coins[i]] + <span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/minimum-falling-path-sum/">931. Minimum Falling Path Sum</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/minimum-cost-for-tickets/">983. Minimum Cost For Tickets</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/2-keys-keyboard/">650. 2 Keys Keyboard</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/perfect-squares/">279. Perfect Squares</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/last-stone-weight-ii/">1049. Last Stone Weight II</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/triangle/">120. Triangle</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/ones-and-zeroes/">474. Ones and Zeroes</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/maximal-square/">221. Maximal Square</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/coin-change/">322. Coin Change</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/tiling-a-rectangle-with-the-fewest-squares/">1240. Tiling a Rectangle with the Fewest Squares</a> <code>Hard</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/dungeon-game/">174. Dungeon Game</a> <code>Hard</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/minimum-number-of-refueling-stops/">871. Minimum Number of Refueling Stops</a> <code>Hard</code></p>
<h2 id="20-distinct-ways"><a class="markdownIt-Anchor" href="#20-distinct-ways"></a> 2.0 Distinct Ways</h2>
<p>达到目标的不同方式总数</p>
<p>Generate problem statement for this pattern</p>
<h3 id="statement问题描述"><a class="markdownIt-Anchor" href="#statement问题描述"></a> Statement，问题描述</h3>
<blockquote>
<p>Given a target find a number of distinct ways to reach the target.</p>
</blockquote>
<h3 id="approach解题方法"><a class="markdownIt-Anchor" href="#approach解题方法"></a> Approach，解题方法</h3>
<blockquote>
<p>Sum all possible ways to reach the current state.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">routes[i] = routes[i-<span class="number">1</span>] + routes[i-<span class="number">2</span>], ... , + routes[i-k]</span><br></pre></td></tr></table></figure>
<p>Generate sum for all values in the target and return the value for the target.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= target; ++i) &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; ways.size(); ++j) &#123;</span><br><span class="line">       <span class="keyword">if</span> (ways[j] &lt;= i) &#123;</span><br><span class="line">           dp[i] += dp[i - ways[j]];</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> dp[target]</span><br></pre></td></tr></table></figure>
<h3 id="similar-problems-2"><a class="markdownIt-Anchor" href="#similar-problems-2"></a> Similar Problems</h3>
<p><a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/climbing-stairs/">70. Climbing Stairs</a> <code>easy</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">stair</span> <span class="operator">=</span> <span class="number">2</span>; stair &lt;= n; ++stair) &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">step</span> <span class="operator">=</span> <span class="number">1</span>; step &lt;= <span class="number">2</span>; ++step) &#123;</span><br><span class="line">       dp[stair] += dp[stair-step];   </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/unique-paths/">62. Unique Paths</a> <code>Medium</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; ++i) &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">       dp[i][j] = dp[i][j-<span class="number">1</span>] + dp[i-<span class="number">1</span>][j];</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/number-of-dice-rolls-with-target-sum/">1155. Number of Dice Rolls With Target Sum</a> <code>Medium</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">rep</span> <span class="operator">=</span> <span class="number">1</span>; rep &lt;= d; ++rep) &#123;</span><br><span class="line">   vector&lt;<span class="type">int</span>&gt; <span class="title function_">new_ways</span><span class="params">(target+<span class="number">1</span>)</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">already</span> <span class="operator">=</span> <span class="number">0</span>; already &lt;= target; ++already) &#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">pipe</span> <span class="operator">=</span> <span class="number">1</span>; pipe &lt;= f; ++pipe) &#123;</span><br><span class="line">           <span class="keyword">if</span> (already - pipe &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">               new_ways[already] += ways[already - pipe];</span><br><span class="line">               new_ways[already] %= mod;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   ways = new_ways;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Note，备注</strong><br />
Some questions point out the number of repetitions, in that case, add one more loop to simulate every repetition.<br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/knight-probability-in-chessboard/">688. Knight Probability in Chessboard</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/target-sum/">494. Target Sum</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/combination-sum-iv/">377. Combination Sum IV</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/knight-dialer/">935. Knight Dialer</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/dice-roll-simulation/">1223. Dice Roll Simulation</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/partition-equal-subset-sum/">416. Partition Equal Subset Sum</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/soup-servings/">808. Soup Servings</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/domino-and-tromino-tiling/">790. Domino and Tromino Tiling</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/minimum-swaps-to-make-sequences-increasing/">801. Minimum Swaps To Make Sequences Increasing</a><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/number-of-longest-increasing-subsequence/">673. Number of Longest Increasing Subsequence</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/unique-paths-ii/">63. Unique Paths II</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/out-of-boundary-paths/">576. Out of Boundary Paths</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/">1269. Number of Ways to Stay in the Same Place After Some Steps</a> <code>Hard</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/count-vowels-permutation/">1220. Count Vowels Permutation</a> <code>Hard</code></p>
<h2 id="30-merging-intervals"><a class="markdownIt-Anchor" href="#30-merging-intervals"></a> 3.0 Merging Intervals</h2>
<p>区间合并</p>
<p>Generate problem statement for this pattern</p>
<h3 id="statement问题描述-2"><a class="markdownIt-Anchor" href="#statement问题描述-2"></a> Statement，问题描述</h3>
<blockquote>
<p>Given a set of numbers find an optimal solution for a problem considering the current number and the best you can get from the left and right sides.</p>
</blockquote>
<h3 id="approach解法方法"><a class="markdownIt-Anchor" href="#approach解法方法"></a> Approach，解法方法</h3>
<blockquote>
<p>Find all optimal solutions for every interval and return the best possible answer.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// from i to j</span></span><br><span class="line">dp[i][j] = dp[i][k] + result[k] + dp[k+<span class="number">1</span>][j]</span><br></pre></td></tr></table></figure>
<p>Get the best from the left and right sides and add a solution for the current position.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">1</span>; l&lt;n; l++) &#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;n-l; i++) &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+l;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i; k&lt;j; k++) &#123;</span><br><span class="line">           dp[i][j] = max(dp[i][j], dp[i][k] + result[k] + dp[k+<span class="number">1</span>][j]);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> dp[<span class="number">0</span>][n-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<h3 id="similar-problems类似问题"><a class="markdownIt-Anchor" href="#similar-problems类似问题"></a> Similar Problems，类似问题</h3>
<p><a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/minimum-cost-tree-from-leaf-values/">1130. Minimum Cost Tree From Leaf Values</a> <code>Medium</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">1</span>; l &lt; n; ++l) &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - l; ++i) &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + l;</span><br><span class="line">       dp[i][j] = INT_MAX;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i; k &lt; j; ++k) &#123;</span><br><span class="line">           dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+<span class="number">1</span>][j] + maxs[i][k] * maxs[k+<span class="number">1</span>][j]);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/unique-binary-search-trees/">96. Unique Binary Search Trees</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/minimum-score-triangulation-of-polygon/">1039. Minimum Score Triangulation of Polygon</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/remove-boxes/">546. Remove Boxes</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/minimum-cost-to-merge-stones/">1000. Minimum Cost to Merge Stones</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/burst-balloons/">312. Burst Balloons</a> <code>Hard</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/guess-number-higher-or-lower-ii/">375. Guess Number Higher or Lower II</a> <code>Medium</code></p>
<h2 id="40-dp-on-strings"><a class="markdownIt-Anchor" href="#40-dp-on-strings"></a> 4.0 DP on Strings</h2>
<p>字符串上的DP</p>
<p>General problem statement for this pattern can vary but most of the time you are given two strings where lengths of those strings are not big</p>
<h3 id="statement问题描述-3"><a class="markdownIt-Anchor" href="#statement问题描述-3"></a> Statement，问题描述</h3>
<blockquote>
<p>Given two strings <code>s1</code> and <code>s2</code>, return <code>some result</code>.</p>
</blockquote>
<h3 id="approach解决方法"><a class="markdownIt-Anchor" href="#approach解决方法"></a> Approach，解决方法</h3>
<blockquote>
<p>Most of the problems on this pattern requires a solution that can be accepted in O(n^2) complexity.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// i - indexing string s1</span></span><br><span class="line"><span class="comment">// j - indexing string s2</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">       <span class="keyword">if</span> (s1[i-<span class="number">1</span>] == s2[j-<span class="number">1</span>]) &#123;</span><br><span class="line">           dp[i][j] = <span class="comment">/*code*/</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           dp[i][j] = <span class="comment">/*code*/</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>If you are given one string <code>s</code> the approach may little vary</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">1</span>; l &lt; n; ++l) &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n-l; ++i) &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + l;</span><br><span class="line">       <span class="keyword">if</span> (s[i] == s[j]) &#123;</span><br><span class="line">           dp[i][j] = <span class="comment">/*code*/</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           dp[i][j] = <span class="comment">/*code*/</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/longest-common-subsequence/">1143. Longest Common Subsequence</a> <code>Medium</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">       <span class="keyword">if</span> (text1[i-<span class="number">1</span>] == text2[j-<span class="number">1</span>]) &#123;</span><br><span class="line">           dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           dp[i][j] = max(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/palindromic-substrings/">647. Palindromic Substrings</a> <code>Medium</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">1</span>; l &lt; n; ++l) &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n-l; ++i) &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + l;</span><br><span class="line">       <span class="keyword">if</span> (s[i] == s[j] &amp;&amp; dp[i+<span class="number">1</span>][j-<span class="number">1</span>] == j-i-<span class="number">1</span>) &#123;</span><br><span class="line">           dp[i][j] = dp[i+<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">2</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           dp[i][j] = <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/longest-palindromic-subsequence/">516. Longest Palindromic Subsequence</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/shortest-common-supersequence/">1092. Shortest Common Supersequence</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/edit-distance/">72. Edit Distance</a> <code>Hard</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/distinct-subsequences/">115. Distinct Subsequences</a> <code>Hard</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/">712. Minimum ASCII Delete Sum for Two Strings</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/longest-palindromic-substring/">5. Longest Palindromic Substring</a> <code>Medium</code></p>
<h2 id="50-decision-making"><a class="markdownIt-Anchor" href="#50-decision-making"></a> 5.0 Decision Making</h2>
<p>决策，取不取当前元素</p>
<p>The general problem statement for this pattern is forgiven situation decide whether to use or not to use the current state. So, the problem requires you to make a decision at a current state.</p>
<h3 id="statement问题描述-4"><a class="markdownIt-Anchor" href="#statement问题描述-4"></a> Statement，问题描述</h3>
<blockquote>
<p>Given a set of values find an answer with an option to choose or ignore the current value.</p>
</blockquote>
<h3 id="approach解决方法-2"><a class="markdownIt-Anchor" href="#approach解决方法-2"></a> Approach，解决方法</h3>
<blockquote>
<p>If you decide to choose the current value use the previous result where the value was ignored; vice-versa, if you decide to ignore the current value use previous result where value was used.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// i - indexing a set of values</span></span><br><span class="line"><span class="comment">// j - options to ignore j values</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= k; ++j) &#123;</span><br><span class="line">       dp[i][j] = max(&#123;dp[i][j], dp[i-<span class="number">1</span>][j] + arr[i], dp[i-<span class="number">1</span>][j-<span class="number">1</span>]&#125;);</span><br><span class="line">       dp[i][j-<span class="number">1</span>] = max(&#123;dp[i][j-<span class="number">1</span>], dp[i-<span class="number">1</span>][j-<span class="number">1</span>] + arr[i], arr[i]&#125;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/house-robber/">198. House Robber</a> <code>Easy</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">   dp[i][<span class="number">1</span>] = max(dp[i-<span class="number">1</span>][<span class="number">0</span>] + nums[i], dp[i-<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">   dp[i][<span class="number">0</span>] = dp[i-<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/best-time-to-buy-and-sell-stock/">121. Best Time to Buy and Sell Stock</a> <code>Easy</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/">714. Best Time to Buy and Sell Stock with Transaction Fee</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/">309. Best Time to Buy and Sell Stock with Cooldown</a> <code>Medium</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/">123. Best Time to Buy and Sell Stock III</a> <code>Hard</code><br />
<a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/">188. Best Time to Buy and Sell Stock IV</a> <code>Hard</code></p>
<p>I hope these tips will be helpful.</p>
]]></content>
      <tags>
        <tag>指南</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 支付模块</title>
    <url>/ComputerScience/%E9%A1%B9%E7%9B%AE/SpringBoot%20%E6%94%AF%E4%BB%98%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<p>参考资料<br />
<a href="https://gitee.com/52itstyle/spring-boot-pay/">Gitee项目</a><br />
<a href="https://blog.csdn.net/m0_66490875/article/details/136842381">支付宝</a></p>
]]></content>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis使用</title>
    <url>/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/Redis%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="general"><a class="markdownIt-Anchor" href="#general"></a> General</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 返回给定模式的keys</span><br><span class="line">KEYS patter</span><br><span class="line">KEYS * # 返回全部</span><br><span class="line">KEYS set* # 返回set开头的keys</span><br><span class="line">EXISTS key</span><br><span class="line">TYPE key</span><br><span class="line">DEL key</span><br></pre></td></tr></table></figure>
<h1 id="string"><a class="markdownIt-Anchor" href="#string"></a> String</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET key value</span><br><span class="line">GET key</span><br><span class="line"># Set Extend Time</span><br><span class="line">SETEX key seconds value</span><br><span class="line"># Set When Key Not Exist</span><br><span class="line">SETNX key value</span><br></pre></td></tr></table></figure>
<h1 id="hash"><a class="markdownIt-Anchor" href="#hash"></a> Hash</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HSET key field value</span><br><span class="line">HGET key field</span><br><span class="line">HDEL key field</span><br><span class="line"># Get All Fields</span><br><span class="line">HKEYS key</span><br><span class="line"># Get All Values</span><br><span class="line">HVALS key</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    key[key]</span><br><span class="line">    item[</span><br><span class="line">    field1: value1</span><br><span class="line">    field2: value2</span><br><span class="line">    ]</span><br><span class="line">    key --&gt; item</span><br></pre></td></tr></table></figure>
<h1 id="list"><a class="markdownIt-Anchor" href="#list"></a> List</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LPUSH key value1 value2</span><br><span class="line"># Get Key From Start To Stop</span><br><span class="line">LRANGE key start stop</span><br><span class="line"># Right POP</span><br><span class="line">RPOP key</span><br><span class="line"># List Length</span><br><span class="line">LLEN key</span><br></pre></td></tr></table></figure>
<h1 id="set"><a class="markdownIt-Anchor" href="#set"></a> Set</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SADD key mem1 mem2</span><br><span class="line">SMEMBERS key</span><br><span class="line"># Set Size</span><br><span class="line">SCARD key</span><br><span class="line">SINTER key1 key2</span><br><span class="line">SUNION key1 key2</span><br><span class="line"># Delete</span><br><span class="line">SREM key mem1 mem2</span><br></pre></td></tr></table></figure>
<h1 id="sorted-set-zset"><a class="markdownIt-Anchor" href="#sorted-set-zset"></a> Sorted Set / ZSet</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ZADD key score1 mem1 score2 mem2</span><br><span class="line"># Show List</span><br><span class="line">ZRANGE key start stop (WITHSCORES)</span><br><span class="line"># Increse Member</span><br><span class="line">ZINCRBY key increment member</span><br><span class="line">ZREM key mem1 mem2</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h1 id="redis-for-java"><a class="markdownIt-Anchor" href="#redis-for-java"></a> Redis for Java</h1>
<ul>
<li>Jedis (Official Recommand)</li>
<li>Lettuce</li>
<li>Spring Data Redis</li>
</ul>
<h2 id="redis-data-redis"><a class="markdownIt-Anchor" href="#redis-data-redis"></a> Redis Data Redis</h2>
<figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframwork.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yml"><figcaption><span>application.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">yourPassword</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始创建Redis模板对象...&quot;</span>);</span><br><span class="line">        <span class="type">RedisTemplate</span> <span class="variable">redisTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>();</span><br><span class="line">        <span class="comment">// Set Redis Connection Factory Object</span></span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">// Set Key Serializer</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>DP 设计模式</title>
    <url>/ComputerScience/%E8%AF%BE%E7%A8%8B/DP%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="策略模式"><a class="markdownIt-Anchor" href="#策略模式"></a> 策略模式</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MallardDuck</span> <span class="keyword">extends</span> <span class="title class_">Duck</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MallardDuck</span><span class="params">()</span> &#123;</span><br><span class="line">        quackBehavior = <span class="keyword">new</span> <span class="title class_">Quack</span>();</span><br><span class="line">        flyBehavior = <span class="keyword">new</span> <span class="title class_">FlyWithWings</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ModelDuck</span> <span class="keyword">extends</span> <span class="title class_">Duck</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ModelDuck</span><span class="params">()</span> &#123;</span><br><span class="line">        quackBehavior = <span class="keyword">new</span> <span class="title class_">Quack</span>();</span><br><span class="line">        flyBehavior = <span class="keyword">new</span> <span class="title class_">FlyNoWay</span>(); <span class="comment">// 组合不同的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Duck</span> <span class="variable">real</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MallardDuck</span>();</span><br><span class="line">        <span class="type">Duck</span> <span class="variable">model</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelDuck</span>();</span><br><span class="line"></span><br><span class="line">        real.fly();</span><br><span class="line">        model.fly(); <span class="comment">// 调用同样的接口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>识别应用中变化的方面，把它们和不变的方面分开。</p>
</blockquote>
<blockquote>
<p>针对接口编程，而不是针对实现编程。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Implement</span></span><br><span class="line"><span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">d.bark();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Interface</span></span><br><span class="line"><span class="type">Animal</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">dog.makeSound(); <span class="comment">// abstract</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>优先使用组合而不是继承。</p>
</blockquote>
<h2 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> summary</h2>
<p>策略模式定义了算法族并分别封装。策略让算法变化独立于使用它的客户。</p>
<span id="more"></span>
<h1 id="观察者模式"><a class="markdownIt-Anchor" href="#观察者模式"></a> 观察者模式</h1>
<p>不要打给我，我会打给你！</p>
<blockquote>
<p>尽量做到交互的对象之间的松耦合设计。</p>
</blockquote>
<h2 id="summary-2"><a class="markdownIt-Anchor" href="#summary-2"></a> summary</h2>
<p>观察者模式定义对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。</p>
<h1 id="装饰者模式"><a class="markdownIt-Anchor" href="#装饰者模式"></a> 装饰者模式</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Expresso</span> <span class="keyword">extends</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Milk</span> &#123;</span><br><span class="line">    Beverage beverage;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Decorator</span></span><br><span class="line">        <span class="keyword">return</span> cost + beverage.cost();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>类应该对拓展开放，对修改关闭。</p>
</blockquote>
<h2 id="summary-3"><a class="markdownIt-Anchor" href="#summary-3"></a> summary</h2>
<p>装饰者模式动态地将额外责任附加到对象上。对于拓展功能，装饰着提供子类化之外的弹性替代方案。</p>
<h1 id="工厂模式"><a class="markdownIt-Anchor" href="#工厂模式"></a> 工厂模式</h1>
<blockquote>
<p>依赖抽象，不依赖具体类。</p>
</blockquote>
<p>三条原则帮助你遵循依赖倒置：</p>
<ol>
<li>变量不应该持有到具体类的引用。</li>
<li>类不应该派生自具体类。</li>
<li>方法不覆盖基类已实现的方法。</li>
</ol>
<blockquote>
<p>[!Warning]<br />
注意：完全实现上面三条原则是不可能的。尽量遵循即可。</p>
</blockquote>
<h2 id="summary-4"><a class="markdownIt-Anchor" href="#summary-4"></a> summary</h2>
<p>抽象工厂模式提供一个接口来创建相关或依赖对象的家族，而不需要指定具体类。</p>
<p>工厂模式定义了一个创建对象的接口，但由子类决定要实例化哪个类。工厂方法让类把实例化推迟到子类。</p>
<h1 id="单件模式"><a class="markdownIt-Anchor" href="#单件模式"></a> 单件模式</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> MyClass &#123;</span><br><span class="line">    <span class="comment">// 私有的构造方法</span></span><br><span class="line">    <span class="keyword">private</span> MyClass &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态的getter</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MyClass <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (uniqueClass == <span class="literal">null</span>) &#123;</span><br><span class="line">            uniqueClass = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueClass;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="summary-5"><a class="markdownIt-Anchor" href="#summary-5"></a> summary</h2>
<p>单件模式确保一个类只有一个实例，并提供一个全局访问点。</p>
<h1 id="命令模式"><a class="markdownIt-Anchor" href="#命令模式"></a> 命令模式</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SomeControl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCommand</span><span class="params">(Command command)</span> &#123;</span><br><span class="line">        slot = command;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bottonWasPressed</span><span class="params">()</span> &#123;</span><br><span class="line">        slot.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SomeCommand</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        on();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// execute和undo互为镜像</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">undo</span><span class="params">()</span> &#123;</span><br><span class="line">        off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="summary-6"><a class="markdownIt-Anchor" href="#summary-6"></a> summary</h2>
<p>命令模式把请求封装为对象，以便用不同的请求、队列或日志请求，来参数化其他对象，并支持可撤销的操作。</p>
<h1 id="适配器模式"><a class="markdownIt-Anchor" href="#适配器模式"></a> 适配器模式</h1>
<blockquote>
<p>适配器改变接口以符合客户的期望。</p>
</blockquote>
<h2 id="summary-7"><a class="markdownIt-Anchor" href="#summary-7"></a> summary</h2>
<p>适配器模式，将一个类的接口转换成客户期望的另一个接口。适配器让原本接口不兼容的类可以合作。</p>
<h1 id="外观模式"><a class="markdownIt-Anchor" href="#外观模式"></a> 外观模式</h1>
<blockquote>
<p>外观模式将客户从一个复杂子系统解耦。</p>
</blockquote>
<h2 id="summary-8"><a class="markdownIt-Anchor" href="#summary-8"></a> summary</h2>
<p>外观模式，为子系统中的一组接口提供了一个统一的接口。外观定义了一个更高级别的接口，使得子系统更容易使用。</p>
]]></content>
      <tags>
        <tag>课程</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis使用</title>
    <url>/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/Mybatis%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="mybatis-configxml"><a class="markdownIt-Anchor" href="#mybatis-configxml"></a> mybatis-config.xml</h1>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span> <span class="comment">&lt;!-- 设置环境 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;驱动类（含包名）&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;数据库连接URL&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;用户名&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;密码&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="util"><a class="markdownIt-Anchor" href="#util"></a> Util</h1>
<p>一般只需要创建一次，所以创建一个工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在类加载时就进行创建</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一个新的会话</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> autoCommit 是否开启自动提交（跟JDBC是一样的，如果不自动提交，则会变成事务操作）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SqlSession对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSession</span><span class="params">(<span class="type">boolean</span> autoCommit)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession(autoCommit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在其他函数里直接使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> MybatisUtil.getSession(<span class="literal">true</span>)) &#123;</span><br><span class="line">    session.selectOne(<span class="string">&quot;id&quot;</span>, argu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="mapper"><a class="markdownIt-Anchor" href="#mapper"></a> Mapper</h1>
<h2 id="原始方法"><a class="markdownIt-Anchor" href="#原始方法"></a> 原始方法</h2>
<ol>
<li>在<code>mybatis-config.xml</code>中添加</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:mappers/TestMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    这里用的是url，也可以使用其他类型，我们会在后面讲解    --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>定义<code>TestMapper.xml</code></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.test.mapper.TestMapper&quot;</span>&gt;</span> <span class="comment">&lt;!-- 命名空间指明mapper接口名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudent&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.test.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- id：函数名；resultType：返回类型 --&gt;</span></span><br><span class="line">        select * from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectOneStudent&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.test.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- id：函数名；resultType：返回类型 --&gt;</span></span><br><span class="line">        select * from student where sid = #&#123;sid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;mybatis-config.xml&quot;</span>)); <span class="comment">// config 文件路径</span></span><br><span class="line">    <span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>))&#123;</span><br><span class="line">        List&lt;Student&gt; student = sqlSession.selectList(<span class="string">&quot;selectStudent&quot;</span>); <span class="comment">// xml id</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu3</span> <span class="operator">=</span> sqlSession.selectOne(<span class="string">&quot;selectOneStudent&quot;</span>, <span class="number">3</span>); <span class="comment">// 传参</span></span><br><span class="line">        student.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="接口方法"><a class="markdownIt-Anchor" href="#接口方法"></a> 接口方法</h2>
<ol>
<li>在<code>mybatis-config.xml</code>中添加</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/test/mapper/TestMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>定义<code>TestMapper.xml</code>和接口<code>TestMapper.java</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestMapper</span> &#123;</span><br><span class="line">    List&lt;Student&gt; <span class="title function_">selectStudent</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用-2"><a class="markdownIt-Anchor" href="#使用-2"></a> 使用</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtil.getSession(<span class="literal">true</span>))&#123;</span><br><span class="line">        <span class="type">TestMapper</span> <span class="variable">testMapper</span> <span class="operator">=</span> sqlSession.getMapper(TestMapper.class);</span><br><span class="line">        List&lt;Student&gt; student = testMapper.selectStudent(); <span class="comment">// 已经定义好了类型</span></span><br><span class="line">        student.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="注解方法"><a class="markdownIt-Anchor" href="#注解方法"></a> 注解方法</h2>
<ol>
<li>在<code>mybatis-config.xml</code>中添加</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.test.mapper.TestMapper&quot;</span>/&gt;</span> </span><br><span class="line">    // 单个java class</span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">package</span>=<span class="string">&quot;com.test.mapper&quot;</span>/&gt;</span> </span><br><span class="line">    // 整个包</span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用-3"><a class="markdownIt-Anchor" href="#使用-3"></a> 使用</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">        @Result(id = true, column = &quot;id&quot;, property = &quot;sid&quot;, </span></span><br><span class="line"><span class="meta">                one = @One(select = &quot;method&quot;)),</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from student&quot;)</span> <span class="comment">// 注解</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">selectStudent</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from student where sid = #&#123;s&#125;, bid = #&#123;book.bid&#125;&quot;)</span></span><br><span class="line">    Student <span class="title function_">selectStudentBySid</span><span class="params">(<span class="meta">@Param(&quot;s&quot;)</span> <span class="type">int</span> sid, <span class="meta">@Param(&quot;book&quot;)</span> Book book)</span> <span class="comment">// 标明变量</span></span><br><span class="line"></span><br><span class="line">    Type <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="动态sql"><a class="markdownIt-Anchor" href="#动态sql"></a> <a href="https://mybatis.org/mybatis-3/dynamic-sql.html">动态SQL</a></h1>
<h2 id="if"><a class="markdownIt-Anchor" href="#if"></a> if</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;argu == value&quot;</span>&gt;</span></span><br><span class="line">    // your sql query.</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven使用</title>
    <url>/ComputerScience/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/Maven%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="基本命令"><a class="markdownIt-Anchor" href="#基本命令"></a> 基本命令</h1>
<p><code>mvn package</code> 测试并打包到<code>target/</code>，使用<code>java -jar Project.jar</code>来运行</p>
]]></content>
      <tags>
        <tag>基本操作</tag>
      </tags>
  </entry>
  <entry>
    <title>Web笔记</title>
    <url>/ComputerScience/%E7%AC%94%E8%AE%B0/Web%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="tomcat"><a class="markdownIt-Anchor" href="#tomcat"></a> Tomcat</h1>
<h2 id="jre报错"><a class="markdownIt-Anchor" href="#jre报错"></a> JRE报错</h2>
<p>一般教程会让我们配置<code>JAVA_HOME</code>和<code>JRE_HOME</code>，然后启动Tomcat；<br />
然而，在JDK9以后，就不默认包含JRE了。<br />
此时，我们使用命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jlink --module-path jmods --add-modules java.desktop --output jre</span><br></pre></td></tr></table></figure>
<p>生成一个JRE后，启动Tomcat，就会报错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">WARNING: Unknown module: java.rmi specified to --add-opens</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: java/util/logging/Logger</span><br><span class="line">    at org.apache.juli.logging.DirectJDKLog.&lt;init&gt;(DirectJDKLog.java:61)</span><br><span class="line">    at org.apache.juli.logging.DirectJDKLog.getInstance(DirectJDKLog.java:181)</span><br><span class="line">    at org.apache.juli.logging.LogFactory.getInstance(LogFactory.java:133)</span><br><span class="line">    at org.apache.juli.logging.LogFactory.getInstance(LogFactory.java:156)</span><br><span class="line">    at org.apache.juli.logging.LogFactory.getLog(LogFactory.java:211)</span><br><span class="line">    at org.apache.catalina.startup.Bootstrap.&lt;clinit&gt;(Bootstrap.java:49)</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: java.util.logging.Logger</span><br><span class="line">    at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)</span><br><span class="line">    at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)</span><br><span class="line">    at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:525)</span><br><span class="line">    ... 6 more</span><br></pre></td></tr></table></figure>
<p>这时候，只需要把jre文件和<code>JRE_HOME</code>环境变量删除，Tomcat就能正常启动</p>
<span id="more"></span>
<h1 id="cookies"><a class="markdownIt-Anchor" href="#cookies"></a> Cookies</h1>
<h2 id="remember-me"><a class="markdownIt-Anchor" href="#remember-me"></a> Remember-me</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;记住密码&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember-me&quot;</span>&gt;</span></span><br><span class="line">        记住密码</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Post请求的表单数据</span></span><br><span class="line">Map&lt;String, String[]&gt; reqMap = req.getParameterMap();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(map.containsKey(<span class="string">&quot;remember-me&quot;</span>))&#123;   <span class="comment">//若勾选了勾选框，那么会此表单信息</span></span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">cookie_username</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">    cookie_username.setMaxAge(<span class="number">30</span>);</span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">cookie_password</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;password&quot;</span>, password);</span><br><span class="line">    cookie_password.setMaxAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    resp.addCookie(cookie_username);</span><br><span class="line">    resp.addCookie(cookie_password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    Cookie[] cookies = req.getCookies();</span><br><span class="line">    <span class="keyword">if</span>(cookies != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">            <span class="keyword">if</span>(cookie.getName().equals(<span class="string">&quot;username&quot;</span>)) username = cookie.getValue();</span><br><span class="line">            <span class="keyword">if</span>(cookie.getName().equals(<span class="string">&quot;password&quot;</span>)) password = cookie.getValue();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(username != <span class="literal">null</span> &amp;&amp; password != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 登陆校验</span></span><br><span class="line">            <span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession(<span class="literal">true</span>))&#123;</span><br><span class="line">                <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">                <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.getUser(username, password);</span><br><span class="line">                <span class="keyword">if</span>(user != <span class="literal">null</span>)&#123;</span><br><span class="line">                    resp.sendRedirect(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;   <span class="comment">// 直接返回</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    req.getRequestDispatcher(<span class="string">&quot;/&quot;</span>).forward(req, resp);   <span class="comment">// 正常情况还是转发给默认的Servlet帮我们返回静态页面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="session"><a class="markdownIt-Anchor" href="#session"></a> Session</h2>
<blockquote>
<p>Session基于Cookies实现。Session使我们能够辨别不同用户的会话。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line"></span><br><span class="line">session.setAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br></pre></td></tr></table></figure>
<h1 id="servlet"><a class="markdownIt-Anchor" href="#servlet"></a> Servlet</h1>
<p>一个Servlet的生命周期为：</p>
<ul>
<li>首先执行构造方法完成 Servlet 初始化</li>
<li>Servlet 初始化后调用 <code>init ()</code> 方法。</li>
<li>Servlet 调用 <code>service()</code> 方法来处理客户端的请求。</li>
<li>Servlet 销毁前调用 <code>destroy()</code> 方法。</li>
<li>最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</li>
</ul>
<blockquote>
<p>Servlet 用于动态网页响应，使后端数据能够与前端通信。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    doGet(req, resp) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="上传文件"><a class="markdownIt-Anchor" href="#上传文件"></a> 上传文件</h2>
<p><a href="http://xn--commons-oc6k521z.io">使用commons.io</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>前端表单设置<code>multipart</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- multipart 传文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;file&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;test-file&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>后端定义Post方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MultipartConfig</span> <span class="comment">// 文件传输注解</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/file&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">FileOutputStream</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;/Users/nagocoler/Documents/IdeaProjects/WebTest/test.png&quot;</span>))&#123;</span><br><span class="line">            <span class="type">Part</span> <span class="variable">part</span> <span class="operator">=</span> req.getPart(<span class="string">&quot;test-file&quot;</span>);</span><br><span class="line">            IOUtils.copy(part.getInputStream(), stream);</span><br><span class="line">            resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;文件上传成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="context"><a class="markdownIt-Anchor" href="#context"></a> Context</h2>
<blockquote>
<p>ServeletContext属于整个Web应用程序，全局唯一</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ServeltContext</span> <span class="variable">context</span> <span class="operator">=</span> getServletContext();</span><br><span class="line">context.setAttribute(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br></pre></td></tr></table></figure>
<h1 id="filter"><a class="markdownIt-Anchor" href="#filter"></a> Filter</h1>
<blockquote>
<p>Filter相当于在所有访问前加了一堵墙，来自浏览器的所有访问请求都会首先经过Filter。</p>
</blockquote>
<p>只有Filter允许通过的请求，才可以顺利到达Servlet。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFileter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(req, resp, chain)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        chain.doFilter(req, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring核心技术</title>
    <url>/ComputerScience/%E7%AC%94%E8%AE%B0/Spring%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h1 id="maven依赖"><a class="markdownIt-Anchor" href="#maven依赖"></a> Maven依赖</h1>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="注解开发"><a class="markdownIt-Anchor" href="#注解开发"></a> 注解开发</h1>
<p>使用xml</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt; &lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span> xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt; &lt;/beans&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">//ApplicationContext是应用程序上下文的顶层接口，它有很多种实现，这里我们先介绍第一种</span></span><br><span class="line">      <span class="comment">//因为这里使用的是XML配置文件，所以说我们就使用 ClassPathXmlApplicationContext 这个实现类</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;application.xml&quot;</span>);  <span class="comment">//这里写上刚刚的名字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(MainConfiguration.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfiguration</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SomeClass someClass;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC笔记</title>
    <url>/ComputerScience/%E7%AC%94%E8%AE%B0/SpringMVC%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="mvc"><a class="markdownIt-Anchor" href="#mvc"></a> MVC</h1>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="controller"><a class="markdownIt-Anchor" href="#controller"></a> Controller</h1>
<h2 id="页面"><a class="markdownIt-Anchor" href="#页面"></a> 页面</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>   <span class="comment">//直接添加注解即可</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index&quot;)</span>   <span class="comment">//直接填写访问路径</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        modelAndView.getModel().put(<span class="string">&quot;arg&quot;</span>, <span class="string">&quot;value&quot;</span>);   <span class="comment">//将name传递给Model</span></span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">          <span class="comment">//返回后会经过视图解析器进行处理</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/index&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(Model model)</span>&#123;  <span class="comment">//这里不仅仅可以是Model，还可以是Map、ModelMap</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;arg&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="重定向"><a class="markdownIt-Anchor" href="#重定向"></a> 重定向</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:page&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="请求转发"><a class="markdownIt-Anchor" href="#请求转发"></a> 请求转发</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:home&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="bean的web作用域"><a class="markdownIt-Anchor" href="#bean的web作用域"></a> Bean的Web作用域</h1>
<p>Bean的作用域：</p>
<ol>
<li>Singleton</li>
<li>Prototype</li>
<li>Request HTTP请求产生新实例，结束后Bean消失</li>
<li>Session 每一个会话</li>
<li>Global Session</li>
</ol>
<h1 id="restful"><a class="markdownIt-Anchor" href="#restful"></a> RESTFul</h1>
<blockquote>
<p>一种设计风格。RESTful风格的设计允许将参数通过URL拼接传到服务端。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/mvc/index/13579</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/index/&#123;str&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(<span class="meta">@PathVariable</span> String str)</span> &#123;</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="文件上传"><a class="markdownIt-Anchor" href="#文件上传"></a> 文件上传</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainInitializer</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">customizeRegistration</span><span class="params">(ServletRegistration.Dynamic registration)</span> &#123;</span><br><span class="line">          <span class="comment">// 直接通过registration配置Multipart相关配置，必须配置临时上传路径，建议选择方便打开的</span></span><br><span class="line">        <span class="comment">// 同样可以设置其他属性：maxFileSize, maxRequestSize, fileSizeThreshold</span></span><br><span class="line">        registration.setMultipartConfig(<span class="keyword">new</span> <span class="title class_">MultipartConfigElement</span>(<span class="string">&quot;/path/to/save&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Controller模板</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/upload&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestParam</span> MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">fileObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;filename.png&quot;</span>);</span><br><span class="line">    file.transferTo(fileObj);</span><br><span class="line">    System.out.println(<span class="string">&quot;用户上传的文件已保存到：&quot;</span>+fileObj.getAbsolutePath());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;文件上传成功！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>前端模板</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;upload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
